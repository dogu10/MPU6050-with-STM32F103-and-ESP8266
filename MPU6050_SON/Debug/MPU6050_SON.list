
MPU6050_SON.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000742c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000310  08007540  08007540  00017540  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007850  08007850  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08007850  08007850  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007850  08007850  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007850  08007850  00017850  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007854  08007854  00017854  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08007858  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000390  20000074  080078cc  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000404  080078cc  00020404  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b3f1  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cc0  00000000  00000000  0002b48e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000aa8  00000000  00000000  0002d150  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a18  00000000  00000000  0002dbf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017d37  00000000  00000000  0002e610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cad7  00000000  00000000  00046347  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087bb9  00000000  00000000  00052e1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000da9d7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000035ac  00000000  00000000  000daa2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000074 	.word	0x20000074
 800012c:	00000000 	.word	0x00000000
 8000130:	08007524 	.word	0x08007524

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000078 	.word	0x20000078
 800014c:	08007524 	.word	0x08007524

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2iz>:
 8000a28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a30:	d215      	bcs.n	8000a5e <__aeabi_d2iz+0x36>
 8000a32:	d511      	bpl.n	8000a58 <__aeabi_d2iz+0x30>
 8000a34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a3c:	d912      	bls.n	8000a64 <__aeabi_d2iz+0x3c>
 8000a3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a52:	bf18      	it	ne
 8000a54:	4240      	negne	r0, r0
 8000a56:	4770      	bx	lr
 8000a58:	f04f 0000 	mov.w	r0, #0
 8000a5c:	4770      	bx	lr
 8000a5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a62:	d105      	bne.n	8000a70 <__aeabi_d2iz+0x48>
 8000a64:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a68:	bf08      	it	eq
 8000a6a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a6e:	4770      	bx	lr
 8000a70:	f04f 0000 	mov.w	r0, #0
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop

08000a78 <__aeabi_d2f>:
 8000a78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a7c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a80:	bf24      	itt	cs
 8000a82:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a86:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a8a:	d90d      	bls.n	8000aa8 <__aeabi_d2f+0x30>
 8000a8c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a90:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a94:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a98:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a9c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aa0:	bf08      	it	eq
 8000aa2:	f020 0001 	biceq.w	r0, r0, #1
 8000aa6:	4770      	bx	lr
 8000aa8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000aac:	d121      	bne.n	8000af2 <__aeabi_d2f+0x7a>
 8000aae:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ab2:	bfbc      	itt	lt
 8000ab4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ab8:	4770      	bxlt	lr
 8000aba:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000abe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ac2:	f1c2 0218 	rsb	r2, r2, #24
 8000ac6:	f1c2 0c20 	rsb	ip, r2, #32
 8000aca:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ace:	fa20 f002 	lsr.w	r0, r0, r2
 8000ad2:	bf18      	it	ne
 8000ad4:	f040 0001 	orrne.w	r0, r0, #1
 8000ad8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000adc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ae0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ae4:	ea40 000c 	orr.w	r0, r0, ip
 8000ae8:	fa23 f302 	lsr.w	r3, r3, r2
 8000aec:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000af0:	e7cc      	b.n	8000a8c <__aeabi_d2f+0x14>
 8000af2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000af6:	d107      	bne.n	8000b08 <__aeabi_d2f+0x90>
 8000af8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000afc:	bf1e      	ittt	ne
 8000afe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b02:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b06:	4770      	bxne	lr
 8000b08:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b0c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b10:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_frsub>:
 8000b18:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b1c:	e002      	b.n	8000b24 <__addsf3>
 8000b1e:	bf00      	nop

08000b20 <__aeabi_fsub>:
 8000b20:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b24 <__addsf3>:
 8000b24:	0042      	lsls	r2, r0, #1
 8000b26:	bf1f      	itttt	ne
 8000b28:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b2c:	ea92 0f03 	teqne	r2, r3
 8000b30:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b34:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b38:	d06a      	beq.n	8000c10 <__addsf3+0xec>
 8000b3a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b3e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b42:	bfc1      	itttt	gt
 8000b44:	18d2      	addgt	r2, r2, r3
 8000b46:	4041      	eorgt	r1, r0
 8000b48:	4048      	eorgt	r0, r1
 8000b4a:	4041      	eorgt	r1, r0
 8000b4c:	bfb8      	it	lt
 8000b4e:	425b      	neglt	r3, r3
 8000b50:	2b19      	cmp	r3, #25
 8000b52:	bf88      	it	hi
 8000b54:	4770      	bxhi	lr
 8000b56:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b5e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b62:	bf18      	it	ne
 8000b64:	4240      	negne	r0, r0
 8000b66:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b6a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b6e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4249      	negne	r1, r1
 8000b76:	ea92 0f03 	teq	r2, r3
 8000b7a:	d03f      	beq.n	8000bfc <__addsf3+0xd8>
 8000b7c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b80:	fa41 fc03 	asr.w	ip, r1, r3
 8000b84:	eb10 000c 	adds.w	r0, r0, ip
 8000b88:	f1c3 0320 	rsb	r3, r3, #32
 8000b8c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b90:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b94:	d502      	bpl.n	8000b9c <__addsf3+0x78>
 8000b96:	4249      	negs	r1, r1
 8000b98:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b9c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000ba0:	d313      	bcc.n	8000bca <__addsf3+0xa6>
 8000ba2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000ba6:	d306      	bcc.n	8000bb6 <__addsf3+0x92>
 8000ba8:	0840      	lsrs	r0, r0, #1
 8000baa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bae:	f102 0201 	add.w	r2, r2, #1
 8000bb2:	2afe      	cmp	r2, #254	; 0xfe
 8000bb4:	d251      	bcs.n	8000c5a <__addsf3+0x136>
 8000bb6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bbe:	bf08      	it	eq
 8000bc0:	f020 0001 	biceq.w	r0, r0, #1
 8000bc4:	ea40 0003 	orr.w	r0, r0, r3
 8000bc8:	4770      	bx	lr
 8000bca:	0049      	lsls	r1, r1, #1
 8000bcc:	eb40 0000 	adc.w	r0, r0, r0
 8000bd0:	3a01      	subs	r2, #1
 8000bd2:	bf28      	it	cs
 8000bd4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000bd8:	d2ed      	bcs.n	8000bb6 <__addsf3+0x92>
 8000bda:	fab0 fc80 	clz	ip, r0
 8000bde:	f1ac 0c08 	sub.w	ip, ip, #8
 8000be2:	ebb2 020c 	subs.w	r2, r2, ip
 8000be6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bea:	bfaa      	itet	ge
 8000bec:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bf0:	4252      	neglt	r2, r2
 8000bf2:	4318      	orrge	r0, r3
 8000bf4:	bfbc      	itt	lt
 8000bf6:	40d0      	lsrlt	r0, r2
 8000bf8:	4318      	orrlt	r0, r3
 8000bfa:	4770      	bx	lr
 8000bfc:	f092 0f00 	teq	r2, #0
 8000c00:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c04:	bf06      	itte	eq
 8000c06:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c0a:	3201      	addeq	r2, #1
 8000c0c:	3b01      	subne	r3, #1
 8000c0e:	e7b5      	b.n	8000b7c <__addsf3+0x58>
 8000c10:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c14:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c18:	bf18      	it	ne
 8000c1a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c1e:	d021      	beq.n	8000c64 <__addsf3+0x140>
 8000c20:	ea92 0f03 	teq	r2, r3
 8000c24:	d004      	beq.n	8000c30 <__addsf3+0x10c>
 8000c26:	f092 0f00 	teq	r2, #0
 8000c2a:	bf08      	it	eq
 8000c2c:	4608      	moveq	r0, r1
 8000c2e:	4770      	bx	lr
 8000c30:	ea90 0f01 	teq	r0, r1
 8000c34:	bf1c      	itt	ne
 8000c36:	2000      	movne	r0, #0
 8000c38:	4770      	bxne	lr
 8000c3a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c3e:	d104      	bne.n	8000c4a <__addsf3+0x126>
 8000c40:	0040      	lsls	r0, r0, #1
 8000c42:	bf28      	it	cs
 8000c44:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c48:	4770      	bx	lr
 8000c4a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c4e:	bf3c      	itt	cc
 8000c50:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bxcc	lr
 8000c56:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c5a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c5e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c62:	4770      	bx	lr
 8000c64:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c68:	bf16      	itet	ne
 8000c6a:	4608      	movne	r0, r1
 8000c6c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c70:	4601      	movne	r1, r0
 8000c72:	0242      	lsls	r2, r0, #9
 8000c74:	bf06      	itte	eq
 8000c76:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c7a:	ea90 0f01 	teqeq	r0, r1
 8000c7e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c82:	4770      	bx	lr

08000c84 <__aeabi_ui2f>:
 8000c84:	f04f 0300 	mov.w	r3, #0
 8000c88:	e004      	b.n	8000c94 <__aeabi_i2f+0x8>
 8000c8a:	bf00      	nop

08000c8c <__aeabi_i2f>:
 8000c8c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c90:	bf48      	it	mi
 8000c92:	4240      	negmi	r0, r0
 8000c94:	ea5f 0c00 	movs.w	ip, r0
 8000c98:	bf08      	it	eq
 8000c9a:	4770      	bxeq	lr
 8000c9c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ca0:	4601      	mov	r1, r0
 8000ca2:	f04f 0000 	mov.w	r0, #0
 8000ca6:	e01c      	b.n	8000ce2 <__aeabi_l2f+0x2a>

08000ca8 <__aeabi_ul2f>:
 8000ca8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cac:	bf08      	it	eq
 8000cae:	4770      	bxeq	lr
 8000cb0:	f04f 0300 	mov.w	r3, #0
 8000cb4:	e00a      	b.n	8000ccc <__aeabi_l2f+0x14>
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_l2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cc4:	d502      	bpl.n	8000ccc <__aeabi_l2f+0x14>
 8000cc6:	4240      	negs	r0, r0
 8000cc8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ccc:	ea5f 0c01 	movs.w	ip, r1
 8000cd0:	bf02      	ittt	eq
 8000cd2:	4684      	moveq	ip, r0
 8000cd4:	4601      	moveq	r1, r0
 8000cd6:	2000      	moveq	r0, #0
 8000cd8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cdc:	bf08      	it	eq
 8000cde:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000ce2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000ce6:	fabc f28c 	clz	r2, ip
 8000cea:	3a08      	subs	r2, #8
 8000cec:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cf0:	db10      	blt.n	8000d14 <__aeabi_l2f+0x5c>
 8000cf2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cf6:	4463      	add	r3, ip
 8000cf8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cfc:	f1c2 0220 	rsb	r2, r2, #32
 8000d00:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d04:	fa20 f202 	lsr.w	r2, r0, r2
 8000d08:	eb43 0002 	adc.w	r0, r3, r2
 8000d0c:	bf08      	it	eq
 8000d0e:	f020 0001 	biceq.w	r0, r0, #1
 8000d12:	4770      	bx	lr
 8000d14:	f102 0220 	add.w	r2, r2, #32
 8000d18:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d1c:	f1c2 0220 	rsb	r2, r2, #32
 8000d20:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d24:	fa21 f202 	lsr.w	r2, r1, r2
 8000d28:	eb43 0002 	adc.w	r0, r3, r2
 8000d2c:	bf08      	it	eq
 8000d2e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d32:	4770      	bx	lr

08000d34 <__aeabi_fmul>:
 8000d34:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d38:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d3c:	bf1e      	ittt	ne
 8000d3e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d42:	ea92 0f0c 	teqne	r2, ip
 8000d46:	ea93 0f0c 	teqne	r3, ip
 8000d4a:	d06f      	beq.n	8000e2c <__aeabi_fmul+0xf8>
 8000d4c:	441a      	add	r2, r3
 8000d4e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d52:	0240      	lsls	r0, r0, #9
 8000d54:	bf18      	it	ne
 8000d56:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d5a:	d01e      	beq.n	8000d9a <__aeabi_fmul+0x66>
 8000d5c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d60:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d64:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d68:	fba0 3101 	umull	r3, r1, r0, r1
 8000d6c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d70:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d74:	bf3e      	ittt	cc
 8000d76:	0049      	lslcc	r1, r1, #1
 8000d78:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d7c:	005b      	lslcc	r3, r3, #1
 8000d7e:	ea40 0001 	orr.w	r0, r0, r1
 8000d82:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d86:	2afd      	cmp	r2, #253	; 0xfd
 8000d88:	d81d      	bhi.n	8000dc6 <__aeabi_fmul+0x92>
 8000d8a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d8e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d92:	bf08      	it	eq
 8000d94:	f020 0001 	biceq.w	r0, r0, #1
 8000d98:	4770      	bx	lr
 8000d9a:	f090 0f00 	teq	r0, #0
 8000d9e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000da2:	bf08      	it	eq
 8000da4:	0249      	lsleq	r1, r1, #9
 8000da6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000daa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dae:	3a7f      	subs	r2, #127	; 0x7f
 8000db0:	bfc2      	ittt	gt
 8000db2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000db6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dba:	4770      	bxgt	lr
 8000dbc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dc0:	f04f 0300 	mov.w	r3, #0
 8000dc4:	3a01      	subs	r2, #1
 8000dc6:	dc5d      	bgt.n	8000e84 <__aeabi_fmul+0x150>
 8000dc8:	f112 0f19 	cmn.w	r2, #25
 8000dcc:	bfdc      	itt	le
 8000dce:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000dd2:	4770      	bxle	lr
 8000dd4:	f1c2 0200 	rsb	r2, r2, #0
 8000dd8:	0041      	lsls	r1, r0, #1
 8000dda:	fa21 f102 	lsr.w	r1, r1, r2
 8000dde:	f1c2 0220 	rsb	r2, r2, #32
 8000de2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000de6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dea:	f140 0000 	adc.w	r0, r0, #0
 8000dee:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000df2:	bf08      	it	eq
 8000df4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000df8:	4770      	bx	lr
 8000dfa:	f092 0f00 	teq	r2, #0
 8000dfe:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e02:	bf02      	ittt	eq
 8000e04:	0040      	lsleq	r0, r0, #1
 8000e06:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e0a:	3a01      	subeq	r2, #1
 8000e0c:	d0f9      	beq.n	8000e02 <__aeabi_fmul+0xce>
 8000e0e:	ea40 000c 	orr.w	r0, r0, ip
 8000e12:	f093 0f00 	teq	r3, #0
 8000e16:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e1a:	bf02      	ittt	eq
 8000e1c:	0049      	lsleq	r1, r1, #1
 8000e1e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e22:	3b01      	subeq	r3, #1
 8000e24:	d0f9      	beq.n	8000e1a <__aeabi_fmul+0xe6>
 8000e26:	ea41 010c 	orr.w	r1, r1, ip
 8000e2a:	e78f      	b.n	8000d4c <__aeabi_fmul+0x18>
 8000e2c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e30:	ea92 0f0c 	teq	r2, ip
 8000e34:	bf18      	it	ne
 8000e36:	ea93 0f0c 	teqne	r3, ip
 8000e3a:	d00a      	beq.n	8000e52 <__aeabi_fmul+0x11e>
 8000e3c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e40:	bf18      	it	ne
 8000e42:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e46:	d1d8      	bne.n	8000dfa <__aeabi_fmul+0xc6>
 8000e48:	ea80 0001 	eor.w	r0, r0, r1
 8000e4c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e50:	4770      	bx	lr
 8000e52:	f090 0f00 	teq	r0, #0
 8000e56:	bf17      	itett	ne
 8000e58:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e5c:	4608      	moveq	r0, r1
 8000e5e:	f091 0f00 	teqne	r1, #0
 8000e62:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e66:	d014      	beq.n	8000e92 <__aeabi_fmul+0x15e>
 8000e68:	ea92 0f0c 	teq	r2, ip
 8000e6c:	d101      	bne.n	8000e72 <__aeabi_fmul+0x13e>
 8000e6e:	0242      	lsls	r2, r0, #9
 8000e70:	d10f      	bne.n	8000e92 <__aeabi_fmul+0x15e>
 8000e72:	ea93 0f0c 	teq	r3, ip
 8000e76:	d103      	bne.n	8000e80 <__aeabi_fmul+0x14c>
 8000e78:	024b      	lsls	r3, r1, #9
 8000e7a:	bf18      	it	ne
 8000e7c:	4608      	movne	r0, r1
 8000e7e:	d108      	bne.n	8000e92 <__aeabi_fmul+0x15e>
 8000e80:	ea80 0001 	eor.w	r0, r0, r1
 8000e84:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e88:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e8c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e90:	4770      	bx	lr
 8000e92:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e96:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e9a:	4770      	bx	lr

08000e9c <__aeabi_fdiv>:
 8000e9c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ea0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ea4:	bf1e      	ittt	ne
 8000ea6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eaa:	ea92 0f0c 	teqne	r2, ip
 8000eae:	ea93 0f0c 	teqne	r3, ip
 8000eb2:	d069      	beq.n	8000f88 <__aeabi_fdiv+0xec>
 8000eb4:	eba2 0203 	sub.w	r2, r2, r3
 8000eb8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ebc:	0249      	lsls	r1, r1, #9
 8000ebe:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ec2:	d037      	beq.n	8000f34 <__aeabi_fdiv+0x98>
 8000ec4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ec8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ecc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ed0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	bf38      	it	cc
 8000ed8:	005b      	lslcc	r3, r3, #1
 8000eda:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000ede:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ee2:	428b      	cmp	r3, r1
 8000ee4:	bf24      	itt	cs
 8000ee6:	1a5b      	subcs	r3, r3, r1
 8000ee8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000eec:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ef0:	bf24      	itt	cs
 8000ef2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ef6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000efa:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000efe:	bf24      	itt	cs
 8000f00:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f04:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f08:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f0c:	bf24      	itt	cs
 8000f0e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f12:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f16:	011b      	lsls	r3, r3, #4
 8000f18:	bf18      	it	ne
 8000f1a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f1e:	d1e0      	bne.n	8000ee2 <__aeabi_fdiv+0x46>
 8000f20:	2afd      	cmp	r2, #253	; 0xfd
 8000f22:	f63f af50 	bhi.w	8000dc6 <__aeabi_fmul+0x92>
 8000f26:	428b      	cmp	r3, r1
 8000f28:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f2c:	bf08      	it	eq
 8000f2e:	f020 0001 	biceq.w	r0, r0, #1
 8000f32:	4770      	bx	lr
 8000f34:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f38:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f3c:	327f      	adds	r2, #127	; 0x7f
 8000f3e:	bfc2      	ittt	gt
 8000f40:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f44:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f48:	4770      	bxgt	lr
 8000f4a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f4e:	f04f 0300 	mov.w	r3, #0
 8000f52:	3a01      	subs	r2, #1
 8000f54:	e737      	b.n	8000dc6 <__aeabi_fmul+0x92>
 8000f56:	f092 0f00 	teq	r2, #0
 8000f5a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f5e:	bf02      	ittt	eq
 8000f60:	0040      	lsleq	r0, r0, #1
 8000f62:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f66:	3a01      	subeq	r2, #1
 8000f68:	d0f9      	beq.n	8000f5e <__aeabi_fdiv+0xc2>
 8000f6a:	ea40 000c 	orr.w	r0, r0, ip
 8000f6e:	f093 0f00 	teq	r3, #0
 8000f72:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f76:	bf02      	ittt	eq
 8000f78:	0049      	lsleq	r1, r1, #1
 8000f7a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f7e:	3b01      	subeq	r3, #1
 8000f80:	d0f9      	beq.n	8000f76 <__aeabi_fdiv+0xda>
 8000f82:	ea41 010c 	orr.w	r1, r1, ip
 8000f86:	e795      	b.n	8000eb4 <__aeabi_fdiv+0x18>
 8000f88:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f8c:	ea92 0f0c 	teq	r2, ip
 8000f90:	d108      	bne.n	8000fa4 <__aeabi_fdiv+0x108>
 8000f92:	0242      	lsls	r2, r0, #9
 8000f94:	f47f af7d 	bne.w	8000e92 <__aeabi_fmul+0x15e>
 8000f98:	ea93 0f0c 	teq	r3, ip
 8000f9c:	f47f af70 	bne.w	8000e80 <__aeabi_fmul+0x14c>
 8000fa0:	4608      	mov	r0, r1
 8000fa2:	e776      	b.n	8000e92 <__aeabi_fmul+0x15e>
 8000fa4:	ea93 0f0c 	teq	r3, ip
 8000fa8:	d104      	bne.n	8000fb4 <__aeabi_fdiv+0x118>
 8000faa:	024b      	lsls	r3, r1, #9
 8000fac:	f43f af4c 	beq.w	8000e48 <__aeabi_fmul+0x114>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e76e      	b.n	8000e92 <__aeabi_fmul+0x15e>
 8000fb4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fb8:	bf18      	it	ne
 8000fba:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fbe:	d1ca      	bne.n	8000f56 <__aeabi_fdiv+0xba>
 8000fc0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fc4:	f47f af5c 	bne.w	8000e80 <__aeabi_fmul+0x14c>
 8000fc8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fcc:	f47f af3c 	bne.w	8000e48 <__aeabi_fmul+0x114>
 8000fd0:	e75f      	b.n	8000e92 <__aeabi_fmul+0x15e>
 8000fd2:	bf00      	nop

08000fd4 <__gesf2>:
 8000fd4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fd8:	e006      	b.n	8000fe8 <__cmpsf2+0x4>
 8000fda:	bf00      	nop

08000fdc <__lesf2>:
 8000fdc:	f04f 0c01 	mov.w	ip, #1
 8000fe0:	e002      	b.n	8000fe8 <__cmpsf2+0x4>
 8000fe2:	bf00      	nop

08000fe4 <__cmpsf2>:
 8000fe4:	f04f 0c01 	mov.w	ip, #1
 8000fe8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000fec:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ff0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ff4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ff8:	bf18      	it	ne
 8000ffa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ffe:	d011      	beq.n	8001024 <__cmpsf2+0x40>
 8001000:	b001      	add	sp, #4
 8001002:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001006:	bf18      	it	ne
 8001008:	ea90 0f01 	teqne	r0, r1
 800100c:	bf58      	it	pl
 800100e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001012:	bf88      	it	hi
 8001014:	17c8      	asrhi	r0, r1, #31
 8001016:	bf38      	it	cc
 8001018:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800101c:	bf18      	it	ne
 800101e:	f040 0001 	orrne.w	r0, r0, #1
 8001022:	4770      	bx	lr
 8001024:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001028:	d102      	bne.n	8001030 <__cmpsf2+0x4c>
 800102a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800102e:	d105      	bne.n	800103c <__cmpsf2+0x58>
 8001030:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001034:	d1e4      	bne.n	8001000 <__cmpsf2+0x1c>
 8001036:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800103a:	d0e1      	beq.n	8001000 <__cmpsf2+0x1c>
 800103c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop

08001044 <__aeabi_cfrcmple>:
 8001044:	4684      	mov	ip, r0
 8001046:	4608      	mov	r0, r1
 8001048:	4661      	mov	r1, ip
 800104a:	e7ff      	b.n	800104c <__aeabi_cfcmpeq>

0800104c <__aeabi_cfcmpeq>:
 800104c:	b50f      	push	{r0, r1, r2, r3, lr}
 800104e:	f7ff ffc9 	bl	8000fe4 <__cmpsf2>
 8001052:	2800      	cmp	r0, #0
 8001054:	bf48      	it	mi
 8001056:	f110 0f00 	cmnmi.w	r0, #0
 800105a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800105c <__aeabi_fcmpeq>:
 800105c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001060:	f7ff fff4 	bl	800104c <__aeabi_cfcmpeq>
 8001064:	bf0c      	ite	eq
 8001066:	2001      	moveq	r0, #1
 8001068:	2000      	movne	r0, #0
 800106a:	f85d fb08 	ldr.w	pc, [sp], #8
 800106e:	bf00      	nop

08001070 <__aeabi_fcmplt>:
 8001070:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001074:	f7ff ffea 	bl	800104c <__aeabi_cfcmpeq>
 8001078:	bf34      	ite	cc
 800107a:	2001      	movcc	r0, #1
 800107c:	2000      	movcs	r0, #0
 800107e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001082:	bf00      	nop

08001084 <__aeabi_fcmple>:
 8001084:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001088:	f7ff ffe0 	bl	800104c <__aeabi_cfcmpeq>
 800108c:	bf94      	ite	ls
 800108e:	2001      	movls	r0, #1
 8001090:	2000      	movhi	r0, #0
 8001092:	f85d fb08 	ldr.w	pc, [sp], #8
 8001096:	bf00      	nop

08001098 <__aeabi_fcmpge>:
 8001098:	f84d ed08 	str.w	lr, [sp, #-8]!
 800109c:	f7ff ffd2 	bl	8001044 <__aeabi_cfrcmple>
 80010a0:	bf94      	ite	ls
 80010a2:	2001      	movls	r0, #1
 80010a4:	2000      	movhi	r0, #0
 80010a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010aa:	bf00      	nop

080010ac <__aeabi_fcmpgt>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff ffc8 	bl	8001044 <__aeabi_cfrcmple>
 80010b4:	bf34      	ite	cc
 80010b6:	2001      	movcc	r0, #1
 80010b8:	2000      	movcs	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_f2iz>:
 80010c0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010c4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010c8:	d30f      	bcc.n	80010ea <__aeabi_f2iz+0x2a>
 80010ca:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010ce:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010d2:	d90d      	bls.n	80010f0 <__aeabi_f2iz+0x30>
 80010d4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010d8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010dc:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80010e0:	fa23 f002 	lsr.w	r0, r3, r2
 80010e4:	bf18      	it	ne
 80010e6:	4240      	negne	r0, r0
 80010e8:	4770      	bx	lr
 80010ea:	f04f 0000 	mov.w	r0, #0
 80010ee:	4770      	bx	lr
 80010f0:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80010f4:	d101      	bne.n	80010fa <__aeabi_f2iz+0x3a>
 80010f6:	0242      	lsls	r2, r0, #9
 80010f8:	d105      	bne.n	8001106 <__aeabi_f2iz+0x46>
 80010fa:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80010fe:	bf08      	it	eq
 8001100:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001104:	4770      	bx	lr
 8001106:	f04f 0000 	mov.w	r0, #0
 800110a:	4770      	bx	lr
 800110c:	0000      	movs	r0, r0
	...

08001110 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001110:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001114:	b084      	sub	sp, #16
 8001116:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001118:	f001 f87e 	bl	8002218 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800111c:	f000 fdb6 	bl	8001c8c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001120:	f000 feb4 	bl	8001e8c <MX_GPIO_Init>
  MX_I2C1_Init();
 8001124:	f000 fe10 	bl	8001d48 <MX_I2C1_Init>
  MX_RTC_Init();
 8001128:	f000 fe3c 	bl	8001da4 <MX_RTC_Init>
  MX_USART2_UART_Init();
 800112c:	f000 fe84 	bl	8001e38 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

       /*****************************************MPU6050 GYRO+ACC SENSOR***********************************************************/
  // PWR_MGMT_1 CNFG ----> GUC AYARLAMASI YAPILIR
      data = 0x00;
 8001130:	4b21      	ldr	r3, [pc, #132]	; (80011b8 <main+0xa8>)
 8001132:	2200      	movs	r2, #0
 8001134:	701a      	strb	r2, [r3, #0]
      HAL_I2C_Mem_Write (&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &data, 1, HAL_MAX_DELAY);
 8001136:	f04f 33ff 	mov.w	r3, #4294967295
 800113a:	9302      	str	r3, [sp, #8]
 800113c:	2301      	movs	r3, #1
 800113e:	9301      	str	r3, [sp, #4]
 8001140:	4b1d      	ldr	r3, [pc, #116]	; (80011b8 <main+0xa8>)
 8001142:	9300      	str	r3, [sp, #0]
 8001144:	2301      	movs	r3, #1
 8001146:	226b      	movs	r2, #107	; 0x6b
 8001148:	21d0      	movs	r1, #208	; 0xd0
 800114a:	481c      	ldr	r0, [pc, #112]	; (80011bc <main+0xac>)
 800114c:	f002 f80c 	bl	8003168 <HAL_I2C_Mem_Write>
      //kullanılan birimin pointer olarak döndürülmesi, cihaz slave adresi, register adresi, register boyutu, verinin pointer
      //olarak döndürülmesi, verinin boyutu , zaman aşımıı değeri

      // GYRO CNFG --> +-500 derece/saniye --> 08 (AÇISAL HIZ AYARLAMASI YAPILIR)
      data = 0x08;
 8001150:	4b19      	ldr	r3, [pc, #100]	; (80011b8 <main+0xa8>)
 8001152:	2208      	movs	r2, #8
 8001154:	701a      	strb	r2, [r3, #0]
      HAL_I2C_Mem_Write (&hi2c1, MPU6050_ADDR, GYRO_CNFG_REG, 1, &data, 1, HAL_MAX_DELAY);
 8001156:	f04f 33ff 	mov.w	r3, #4294967295
 800115a:	9302      	str	r3, [sp, #8]
 800115c:	2301      	movs	r3, #1
 800115e:	9301      	str	r3, [sp, #4]
 8001160:	4b15      	ldr	r3, [pc, #84]	; (80011b8 <main+0xa8>)
 8001162:	9300      	str	r3, [sp, #0]
 8001164:	2301      	movs	r3, #1
 8001166:	221b      	movs	r2, #27
 8001168:	21d0      	movs	r1, #208	; 0xd0
 800116a:	4814      	ldr	r0, [pc, #80]	; (80011bc <main+0xac>)
 800116c:	f001 fffc 	bl	8003168 <HAL_I2C_Mem_Write>

      // ACC CNFG --> +-8g --> 10 (IVMENIN HIZLANMA AYARLAMASI YAPILIR)
      data = 0x10;
 8001170:	4b11      	ldr	r3, [pc, #68]	; (80011b8 <main+0xa8>)
 8001172:	2210      	movs	r2, #16
 8001174:	701a      	strb	r2, [r3, #0]
      HAL_I2C_Mem_Write (&hi2c1, MPU6050_ADDR, ACC_CNFG_REG, 1, &data, 1, HAL_MAX_DELAY);
 8001176:	f04f 33ff 	mov.w	r3, #4294967295
 800117a:	9302      	str	r3, [sp, #8]
 800117c:	2301      	movs	r3, #1
 800117e:	9301      	str	r3, [sp, #4]
 8001180:	4b0d      	ldr	r3, [pc, #52]	; (80011b8 <main+0xa8>)
 8001182:	9300      	str	r3, [sp, #0]
 8001184:	2301      	movs	r3, #1
 8001186:	221c      	movs	r2, #28
 8001188:	21d0      	movs	r1, #208	; 0xd0
 800118a:	480c      	ldr	r0, [pc, #48]	; (80011bc <main+0xac>)
 800118c:	f001 ffec 	bl	8003168 <HAL_I2C_Mem_Write>

     // DLPF_CFG---> ALCAK GECIREN FILTRE AYARLAMASI YAPILIR
      data = 0x03;
 8001190:	4b09      	ldr	r3, [pc, #36]	; (80011b8 <main+0xa8>)
 8001192:	2203      	movs	r2, #3
 8001194:	701a      	strb	r2, [r3, #0]
      HAL_I2C_Mem_Write (&hi2c1, MPU6050_ADDR, LPF_REG, 1, &data, 1, HAL_MAX_DELAY);
 8001196:	f04f 33ff 	mov.w	r3, #4294967295
 800119a:	9302      	str	r3, [sp, #8]
 800119c:	2301      	movs	r3, #1
 800119e:	9301      	str	r3, [sp, #4]
 80011a0:	4b05      	ldr	r3, [pc, #20]	; (80011b8 <main+0xa8>)
 80011a2:	9300      	str	r3, [sp, #0]
 80011a4:	2301      	movs	r3, #1
 80011a6:	221a      	movs	r2, #26
 80011a8:	21d0      	movs	r1, #208	; 0xd0
 80011aa:	4804      	ldr	r0, [pc, #16]	; (80011bc <main+0xac>)
 80011ac:	f001 ffdc 	bl	8003168 <HAL_I2C_Mem_Write>

/* Offset islemi yapılarak daha temiz veriler alinir. Ortalama Metodu ile veriler for dongusune sokulur,
  degerler toplanır ardından ornek sayısına bolunerek ortalaması alınır.*/
      for(i=0; i<2000; i++)
 80011b0:	4b03      	ldr	r3, [pc, #12]	; (80011c0 <main+0xb0>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	601a      	str	r2, [r3, #0]
 80011b6:	e094      	b.n	80012e2 <main+0x1d2>
 80011b8:	20000350 	.word	0x20000350
 80011bc:	200000f4 	.word	0x200000f4
 80011c0:	20000250 	.word	0x20000250
      {

// prevtime ile her while dongusune girdigimizde islemde gecen sureyi gormemizi saglar//
    	  prevtime2 = time2;
 80011c4:	4b9d      	ldr	r3, [pc, #628]	; (800143c <main+0x32c>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a9d      	ldr	r2, [pc, #628]	; (8001440 <main+0x330>)
 80011ca:	6013      	str	r3, [r2, #0]
    	  time2 = HAL_GetTick();
 80011cc:	f001 f87c 	bl	80022c8 <HAL_GetTick>
 80011d0:	4603      	mov	r3, r0
 80011d2:	4618      	mov	r0, r3
 80011d4:	f7ff fd56 	bl	8000c84 <__aeabi_ui2f>
 80011d8:	4603      	mov	r3, r0
 80011da:	4a98      	ldr	r2, [pc, #608]	; (800143c <main+0x32c>)
 80011dc:	6013      	str	r3, [r2, #0]
    	  elapsedtime2=(time2-prevtime2)*1000;
 80011de:	4b97      	ldr	r3, [pc, #604]	; (800143c <main+0x32c>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	4a97      	ldr	r2, [pc, #604]	; (8001440 <main+0x330>)
 80011e4:	6812      	ldr	r2, [r2, #0]
 80011e6:	4611      	mov	r1, r2
 80011e8:	4618      	mov	r0, r3
 80011ea:	f7ff fc99 	bl	8000b20 <__aeabi_fsub>
 80011ee:	4603      	mov	r3, r0
 80011f0:	4994      	ldr	r1, [pc, #592]	; (8001444 <main+0x334>)
 80011f2:	4618      	mov	r0, r3
 80011f4:	f7ff fd9e 	bl	8000d34 <__aeabi_fmul>
 80011f8:	4603      	mov	r3, r0
 80011fa:	461a      	mov	r2, r3
 80011fc:	4b92      	ldr	r3, [pc, #584]	; (8001448 <main+0x338>)
 80011fe:	601a      	str	r2, [r3, #0]

    	  gyro_buffer[0]=0x43; //GYRO OUTPUT REGISTER BASLANGIC ADRESI[0x43-0x48]//
 8001200:	4b92      	ldr	r3, [pc, #584]	; (800144c <main+0x33c>)
 8001202:	2243      	movs	r2, #67	; 0x43
 8001204:	701a      	strb	r2, [r3, #0]
    	  HAL_I2C_Master_Transmit(&hi2c1,MPU6050_ADDR,gyro_buffer,1,HAL_MAX_DELAY);
 8001206:	f04f 33ff 	mov.w	r3, #4294967295
 800120a:	9300      	str	r3, [sp, #0]
 800120c:	2301      	movs	r3, #1
 800120e:	4a8f      	ldr	r2, [pc, #572]	; (800144c <main+0x33c>)
 8001210:	21d0      	movs	r1, #208	; 0xd0
 8001212:	488f      	ldr	r0, [pc, #572]	; (8001450 <main+0x340>)
 8001214:	f001 fc4a 	bl	8002aac <HAL_I2C_Master_Transmit>
    	  HAL_I2C_Master_Receive(&hi2c1,MPU6050_ADDR,gyro_buffer,6,HAL_MAX_DELAY);
 8001218:	f04f 33ff 	mov.w	r3, #4294967295
 800121c:	9300      	str	r3, [sp, #0]
 800121e:	2306      	movs	r3, #6
 8001220:	4a8a      	ldr	r2, [pc, #552]	; (800144c <main+0x33c>)
 8001222:	21d0      	movs	r1, #208	; 0xd0
 8001224:	488a      	ldr	r0, [pc, #552]	; (8001450 <main+0x340>)
 8001226:	f001 fd3f 	bl	8002ca8 <HAL_I2C_Master_Receive>


// 8 bitlik sola kaydırma islemi yapılarak 16 bitlik degiskenle alanı kaplaması engellenir.//
// OR mantıksal operatoru ile de sonra gelecek verinin sagdaki bitte tutulmasını saglayıp  soldaki verinin gitmesini engellemis olur//
// 0x43 baslangıc registeri boylelikle [15:8] indexleri arasında degil [7:0] indexleri arası verileri yazmaya baslamıs olur//
    	  gyro_raw[0] = (gyro_buffer[0] << 8 | gyro_buffer[1]);
 800122a:	4b88      	ldr	r3, [pc, #544]	; (800144c <main+0x33c>)
 800122c:	781b      	ldrb	r3, [r3, #0]
 800122e:	021b      	lsls	r3, r3, #8
 8001230:	b21a      	sxth	r2, r3
 8001232:	4b86      	ldr	r3, [pc, #536]	; (800144c <main+0x33c>)
 8001234:	785b      	ldrb	r3, [r3, #1]
 8001236:	b21b      	sxth	r3, r3
 8001238:	4313      	orrs	r3, r2
 800123a:	b21a      	sxth	r2, r3
 800123c:	4b85      	ldr	r3, [pc, #532]	; (8001454 <main+0x344>)
 800123e:	801a      	strh	r2, [r3, #0]
    	  gyro_raw[1] = (gyro_buffer[2] << 8 | gyro_buffer[3]);
 8001240:	4b82      	ldr	r3, [pc, #520]	; (800144c <main+0x33c>)
 8001242:	789b      	ldrb	r3, [r3, #2]
 8001244:	021b      	lsls	r3, r3, #8
 8001246:	b21a      	sxth	r2, r3
 8001248:	4b80      	ldr	r3, [pc, #512]	; (800144c <main+0x33c>)
 800124a:	78db      	ldrb	r3, [r3, #3]
 800124c:	b21b      	sxth	r3, r3
 800124e:	4313      	orrs	r3, r2
 8001250:	b21a      	sxth	r2, r3
 8001252:	4b80      	ldr	r3, [pc, #512]	; (8001454 <main+0x344>)
 8001254:	805a      	strh	r2, [r3, #2]
    	  gyro_raw[2] = (gyro_buffer[4] << 8 | gyro_buffer[5]);
 8001256:	4b7d      	ldr	r3, [pc, #500]	; (800144c <main+0x33c>)
 8001258:	791b      	ldrb	r3, [r3, #4]
 800125a:	021b      	lsls	r3, r3, #8
 800125c:	b21a      	sxth	r2, r3
 800125e:	4b7b      	ldr	r3, [pc, #492]	; (800144c <main+0x33c>)
 8001260:	795b      	ldrb	r3, [r3, #5]
 8001262:	b21b      	sxth	r3, r3
 8001264:	4313      	orrs	r3, r2
 8001266:	b21a      	sxth	r2, r3
 8001268:	4b7a      	ldr	r3, [pc, #488]	; (8001454 <main+0x344>)
 800126a:	809a      	strh	r2, [r3, #4]


    	  // gyro_raw ile toplanmıs verileri gyro_cal dizisine gonderirilir.//
    	  gyro_cal[0] += gyro_raw[0];
 800126c:	4b7a      	ldr	r3, [pc, #488]	; (8001458 <main+0x348>)
 800126e:	681c      	ldr	r4, [r3, #0]
 8001270:	4b78      	ldr	r3, [pc, #480]	; (8001454 <main+0x344>)
 8001272:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001276:	4618      	mov	r0, r3
 8001278:	f7ff fd08 	bl	8000c8c <__aeabi_i2f>
 800127c:	4603      	mov	r3, r0
 800127e:	4619      	mov	r1, r3
 8001280:	4620      	mov	r0, r4
 8001282:	f7ff fc4f 	bl	8000b24 <__addsf3>
 8001286:	4603      	mov	r3, r0
 8001288:	461a      	mov	r2, r3
 800128a:	4b73      	ldr	r3, [pc, #460]	; (8001458 <main+0x348>)
 800128c:	601a      	str	r2, [r3, #0]
    	  gyro_cal[1] += gyro_raw[1];
 800128e:	4b72      	ldr	r3, [pc, #456]	; (8001458 <main+0x348>)
 8001290:	685c      	ldr	r4, [r3, #4]
 8001292:	4b70      	ldr	r3, [pc, #448]	; (8001454 <main+0x344>)
 8001294:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001298:	4618      	mov	r0, r3
 800129a:	f7ff fcf7 	bl	8000c8c <__aeabi_i2f>
 800129e:	4603      	mov	r3, r0
 80012a0:	4619      	mov	r1, r3
 80012a2:	4620      	mov	r0, r4
 80012a4:	f7ff fc3e 	bl	8000b24 <__addsf3>
 80012a8:	4603      	mov	r3, r0
 80012aa:	461a      	mov	r2, r3
 80012ac:	4b6a      	ldr	r3, [pc, #424]	; (8001458 <main+0x348>)
 80012ae:	605a      	str	r2, [r3, #4]
    	  gyro_cal[2] += gyro_raw[2];
 80012b0:	4b69      	ldr	r3, [pc, #420]	; (8001458 <main+0x348>)
 80012b2:	689c      	ldr	r4, [r3, #8]
 80012b4:	4b67      	ldr	r3, [pc, #412]	; (8001454 <main+0x344>)
 80012b6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80012ba:	4618      	mov	r0, r3
 80012bc:	f7ff fce6 	bl	8000c8c <__aeabi_i2f>
 80012c0:	4603      	mov	r3, r0
 80012c2:	4619      	mov	r1, r3
 80012c4:	4620      	mov	r0, r4
 80012c6:	f7ff fc2d 	bl	8000b24 <__addsf3>
 80012ca:	4603      	mov	r3, r0
 80012cc:	461a      	mov	r2, r3
 80012ce:	4b62      	ldr	r3, [pc, #392]	; (8001458 <main+0x348>)
 80012d0:	609a      	str	r2, [r3, #8]

    	  HAL_Delay(3); // olcum aralıgı 4ms olarak belirlenip ustteki kod 1ms'de calıstıgı icin 3ms gecikme eklenir//
 80012d2:	2003      	movs	r0, #3
 80012d4:	f001 f802 	bl	80022dc <HAL_Delay>
      for(i=0; i<2000; i++)
 80012d8:	4b60      	ldr	r3, [pc, #384]	; (800145c <main+0x34c>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	3301      	adds	r3, #1
 80012de:	4a5f      	ldr	r2, [pc, #380]	; (800145c <main+0x34c>)
 80012e0:	6013      	str	r3, [r2, #0]
 80012e2:	4b5e      	ldr	r3, [pc, #376]	; (800145c <main+0x34c>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80012ea:	f6ff af6b 	blt.w	80011c4 <main+0xb4>

      }
// toplanmıs verilerin ortalama degeri alınır//
      gyro_cal[0] /= 2000;
 80012ee:	4b5a      	ldr	r3, [pc, #360]	; (8001458 <main+0x348>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	495b      	ldr	r1, [pc, #364]	; (8001460 <main+0x350>)
 80012f4:	4618      	mov	r0, r3
 80012f6:	f7ff fdd1 	bl	8000e9c <__aeabi_fdiv>
 80012fa:	4603      	mov	r3, r0
 80012fc:	461a      	mov	r2, r3
 80012fe:	4b56      	ldr	r3, [pc, #344]	; (8001458 <main+0x348>)
 8001300:	601a      	str	r2, [r3, #0]
      gyro_cal[1] /= 2000;
 8001302:	4b55      	ldr	r3, [pc, #340]	; (8001458 <main+0x348>)
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	4956      	ldr	r1, [pc, #344]	; (8001460 <main+0x350>)
 8001308:	4618      	mov	r0, r3
 800130a:	f7ff fdc7 	bl	8000e9c <__aeabi_fdiv>
 800130e:	4603      	mov	r3, r0
 8001310:	461a      	mov	r2, r3
 8001312:	4b51      	ldr	r3, [pc, #324]	; (8001458 <main+0x348>)
 8001314:	605a      	str	r2, [r3, #4]
      gyro_cal[2] /= 2000;
 8001316:	4b50      	ldr	r3, [pc, #320]	; (8001458 <main+0x348>)
 8001318:	689b      	ldr	r3, [r3, #8]
 800131a:	4951      	ldr	r1, [pc, #324]	; (8001460 <main+0x350>)
 800131c:	4618      	mov	r0, r3
 800131e:	f7ff fdbd 	bl	8000e9c <__aeabi_fdiv>
 8001322:	4603      	mov	r3, r0
 8001324:	461a      	mov	r2, r3
 8001326:	4b4c      	ldr	r3, [pc, #304]	; (8001458 <main+0x348>)
 8001328:	609a      	str	r2, [r3, #8]

      HAL_Delay(1000);
 800132a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800132e:	f000 ffd5 	bl	80022dc <HAL_Delay>
    /* USER CODE BEGIN 3 */

	  /*****************************************MPU6050 GYRO+ACC SENSOR***********************************************************/

	  // ustte gecmesı gereken 4ms'nin gecip gecmedigini anlamak icin kullanılır//
	  prevtime1 = time1;
 8001332:	4b4c      	ldr	r3, [pc, #304]	; (8001464 <main+0x354>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4a4c      	ldr	r2, [pc, #304]	; (8001468 <main+0x358>)
 8001338:	6013      	str	r3, [r2, #0]
	  time1 = HAL_GetTick();
 800133a:	f000 ffc5 	bl	80022c8 <HAL_GetTick>
 800133e:	4603      	mov	r3, r0
 8001340:	4618      	mov	r0, r3
 8001342:	f7ff fc9f 	bl	8000c84 <__aeabi_ui2f>
 8001346:	4603      	mov	r3, r0
 8001348:	4a46      	ldr	r2, [pc, #280]	; (8001464 <main+0x354>)
 800134a:	6013      	str	r3, [r2, #0]
	  elapsedtime1=(time1-prevtime1)*1000;
 800134c:	4b45      	ldr	r3, [pc, #276]	; (8001464 <main+0x354>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a45      	ldr	r2, [pc, #276]	; (8001468 <main+0x358>)
 8001352:	6812      	ldr	r2, [r2, #0]
 8001354:	4611      	mov	r1, r2
 8001356:	4618      	mov	r0, r3
 8001358:	f7ff fbe2 	bl	8000b20 <__aeabi_fsub>
 800135c:	4603      	mov	r3, r0
 800135e:	4939      	ldr	r1, [pc, #228]	; (8001444 <main+0x334>)
 8001360:	4618      	mov	r0, r3
 8001362:	f7ff fce7 	bl	8000d34 <__aeabi_fmul>
 8001366:	4603      	mov	r3, r0
 8001368:	461a      	mov	r2, r3
 800136a:	4b40      	ldr	r3, [pc, #256]	; (800146c <main+0x35c>)
 800136c:	601a      	str	r2, [r3, #0]

	 	 	  acc_buffer[0]=0x3B; //ACC OUTPUT REGISTER BASLANGIC ADRESI[0x3B-0x40]
 800136e:	4b40      	ldr	r3, [pc, #256]	; (8001470 <main+0x360>)
 8001370:	223b      	movs	r2, #59	; 0x3b
 8001372:	701a      	strb	r2, [r3, #0]
	 	 	  HAL_I2C_Master_Transmit(&hi2c1,MPU6050_ADDR,acc_buffer,1,HAL_MAX_DELAY);
 8001374:	f04f 33ff 	mov.w	r3, #4294967295
 8001378:	9300      	str	r3, [sp, #0]
 800137a:	2301      	movs	r3, #1
 800137c:	4a3c      	ldr	r2, [pc, #240]	; (8001470 <main+0x360>)
 800137e:	21d0      	movs	r1, #208	; 0xd0
 8001380:	4833      	ldr	r0, [pc, #204]	; (8001450 <main+0x340>)
 8001382:	f001 fb93 	bl	8002aac <HAL_I2C_Master_Transmit>
	 	 	  HAL_I2C_Master_Receive(&hi2c1,MPU6050_ADDR,acc_buffer,6,HAL_MAX_DELAY);
 8001386:	f04f 33ff 	mov.w	r3, #4294967295
 800138a:	9300      	str	r3, [sp, #0]
 800138c:	2306      	movs	r3, #6
 800138e:	4a38      	ldr	r2, [pc, #224]	; (8001470 <main+0x360>)
 8001390:	21d0      	movs	r1, #208	; 0xd0
 8001392:	482f      	ldr	r0, [pc, #188]	; (8001450 <main+0x340>)
 8001394:	f001 fc88 	bl	8002ca8 <HAL_I2C_Master_Receive>

	 	 	  // Acc Raw(ham) degerler)
	 	 	  acc_raw[0] = (acc_buffer[0] << 8 | acc_buffer[1]);
 8001398:	4b35      	ldr	r3, [pc, #212]	; (8001470 <main+0x360>)
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	021b      	lsls	r3, r3, #8
 800139e:	b21a      	sxth	r2, r3
 80013a0:	4b33      	ldr	r3, [pc, #204]	; (8001470 <main+0x360>)
 80013a2:	785b      	ldrb	r3, [r3, #1]
 80013a4:	b21b      	sxth	r3, r3
 80013a6:	4313      	orrs	r3, r2
 80013a8:	b21a      	sxth	r2, r3
 80013aa:	4b32      	ldr	r3, [pc, #200]	; (8001474 <main+0x364>)
 80013ac:	801a      	strh	r2, [r3, #0]
	 	 	  acc_raw[1] = (acc_buffer[2] << 8 | acc_buffer[3]);
 80013ae:	4b30      	ldr	r3, [pc, #192]	; (8001470 <main+0x360>)
 80013b0:	789b      	ldrb	r3, [r3, #2]
 80013b2:	021b      	lsls	r3, r3, #8
 80013b4:	b21a      	sxth	r2, r3
 80013b6:	4b2e      	ldr	r3, [pc, #184]	; (8001470 <main+0x360>)
 80013b8:	78db      	ldrb	r3, [r3, #3]
 80013ba:	b21b      	sxth	r3, r3
 80013bc:	4313      	orrs	r3, r2
 80013be:	b21a      	sxth	r2, r3
 80013c0:	4b2c      	ldr	r3, [pc, #176]	; (8001474 <main+0x364>)
 80013c2:	805a      	strh	r2, [r3, #2]
	 	 	  acc_raw[2] = (acc_buffer[4] << 8 | acc_buffer[5]);
 80013c4:	4b2a      	ldr	r3, [pc, #168]	; (8001470 <main+0x360>)
 80013c6:	791b      	ldrb	r3, [r3, #4]
 80013c8:	021b      	lsls	r3, r3, #8
 80013ca:	b21a      	sxth	r2, r3
 80013cc:	4b28      	ldr	r3, [pc, #160]	; (8001470 <main+0x360>)
 80013ce:	795b      	ldrb	r3, [r3, #5]
 80013d0:	b21b      	sxth	r3, r3
 80013d2:	4313      	orrs	r3, r2
 80013d4:	b21a      	sxth	r2, r3
 80013d6:	4b27      	ldr	r3, [pc, #156]	; (8001474 <main+0x364>)
 80013d8:	809a      	strh	r2, [r3, #4]


	 	 	  temp_buffer[0]=0x41;// TEMP OUTPUT REGISTER BASLANGIC ADRESI[0x41-0x42]//
 80013da:	4b27      	ldr	r3, [pc, #156]	; (8001478 <main+0x368>)
 80013dc:	2241      	movs	r2, #65	; 0x41
 80013de:	701a      	strb	r2, [r3, #0]
	 	 	  HAL_I2C_Master_Transmit(&hi2c1,MPU6050_ADDR,temp_buffer,1,HAL_MAX_DELAY);
 80013e0:	f04f 33ff 	mov.w	r3, #4294967295
 80013e4:	9300      	str	r3, [sp, #0]
 80013e6:	2301      	movs	r3, #1
 80013e8:	4a23      	ldr	r2, [pc, #140]	; (8001478 <main+0x368>)
 80013ea:	21d0      	movs	r1, #208	; 0xd0
 80013ec:	4818      	ldr	r0, [pc, #96]	; (8001450 <main+0x340>)
 80013ee:	f001 fb5d 	bl	8002aac <HAL_I2C_Master_Transmit>
	 	 	  HAL_I2C_Master_Receive(&hi2c1,MPU6050_ADDR,temp_buffer,2,HAL_MAX_DELAY);
 80013f2:	f04f 33ff 	mov.w	r3, #4294967295
 80013f6:	9300      	str	r3, [sp, #0]
 80013f8:	2302      	movs	r3, #2
 80013fa:	4a1f      	ldr	r2, [pc, #124]	; (8001478 <main+0x368>)
 80013fc:	21d0      	movs	r1, #208	; 0xd0
 80013fe:	4814      	ldr	r0, [pc, #80]	; (8001450 <main+0x340>)
 8001400:	f001 fc52 	bl	8002ca8 <HAL_I2C_Master_Receive>

	 	 	  // Temperature Values
	 	 	  raw_temp = (temp_buffer[0] << 8 | temp_buffer[1]);
 8001404:	4b1c      	ldr	r3, [pc, #112]	; (8001478 <main+0x368>)
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	021b      	lsls	r3, r3, #8
 800140a:	b21a      	sxth	r2, r3
 800140c:	4b1a      	ldr	r3, [pc, #104]	; (8001478 <main+0x368>)
 800140e:	785b      	ldrb	r3, [r3, #1]
 8001410:	b21b      	sxth	r3, r3
 8001412:	4313      	orrs	r3, r2
 8001414:	b21a      	sxth	r2, r3
 8001416:	4b19      	ldr	r3, [pc, #100]	; (800147c <main+0x36c>)
 8001418:	801a      	strh	r2, [r3, #0]
	 	 	  temp = (raw_temp / 340.0) + 32.53;
 800141a:	4b18      	ldr	r3, [pc, #96]	; (800147c <main+0x36c>)
 800141c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001420:	4618      	mov	r0, r3
 8001422:	f7fe ffe7 	bl	80003f4 <__aeabi_i2d>
 8001426:	f04f 0200 	mov.w	r2, #0
 800142a:	4b15      	ldr	r3, [pc, #84]	; (8001480 <main+0x370>)
 800142c:	f7ff f976 	bl	800071c <__aeabi_ddiv>
 8001430:	4602      	mov	r2, r0
 8001432:	460b      	mov	r3, r1
 8001434:	4610      	mov	r0, r2
 8001436:	4619      	mov	r1, r3
 8001438:	e024      	b.n	8001484 <main+0x374>
 800143a:	bf00      	nop
 800143c:	200003e8 	.word	0x200003e8
 8001440:	200001b4 	.word	0x200001b4
 8001444:	447a0000 	.word	0x447a0000
 8001448:	200000a8 	.word	0x200000a8
 800144c:	2000014c 	.word	0x2000014c
 8001450:	200000f4 	.word	0x200000f4
 8001454:	200000ac 	.word	0x200000ac
 8001458:	200000e8 	.word	0x200000e8
 800145c:	20000250 	.word	0x20000250
 8001460:	44fa0000 	.word	0x44fa0000
 8001464:	200002f0 	.word	0x200002f0
 8001468:	200003e0 	.word	0x200003e0
 800146c:	2000035c 	.word	0x2000035c
 8001470:	200000d4 	.word	0x200000d4
 8001474:	20000158 	.word	0x20000158
 8001478:	200003d4 	.word	0x200003d4
 800147c:	200003e4 	.word	0x200003e4
 8001480:	40754000 	.word	0x40754000
 8001484:	a3be      	add	r3, pc, #760	; (adr r3, 8001780 <main+0x670>)
 8001486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800148a:	f7fe fe67 	bl	800015c <__adddf3>
 800148e:	4602      	mov	r2, r0
 8001490:	460b      	mov	r3, r1
 8001492:	4610      	mov	r0, r2
 8001494:	4619      	mov	r1, r3
 8001496:	f7ff fac7 	bl	8000a28 <__aeabi_d2iz>
 800149a:	4603      	mov	r3, r0
 800149c:	4abe      	ldr	r2, [pc, #760]	; (8001798 <main+0x688>)
 800149e:	6013      	str	r3, [r2, #0]
	 	 	  //formul +36.53 gostermekte fakat 32.53'te daha iyi degerler elde edildi//


	 	 	  gyro_buffer[0]=0x43;
 80014a0:	4bbe      	ldr	r3, [pc, #760]	; (800179c <main+0x68c>)
 80014a2:	2243      	movs	r2, #67	; 0x43
 80014a4:	701a      	strb	r2, [r3, #0]
	 	 	  HAL_I2C_Master_Transmit(&hi2c1,MPU6050_ADDR,gyro_buffer,1,HAL_MAX_DELAY);
 80014a6:	f04f 33ff 	mov.w	r3, #4294967295
 80014aa:	9300      	str	r3, [sp, #0]
 80014ac:	2301      	movs	r3, #1
 80014ae:	4abb      	ldr	r2, [pc, #748]	; (800179c <main+0x68c>)
 80014b0:	21d0      	movs	r1, #208	; 0xd0
 80014b2:	48bb      	ldr	r0, [pc, #748]	; (80017a0 <main+0x690>)
 80014b4:	f001 fafa 	bl	8002aac <HAL_I2C_Master_Transmit>
	 	 	  HAL_I2C_Master_Receive(&hi2c1,MPU6050_ADDR,gyro_buffer,6,HAL_MAX_DELAY);
 80014b8:	f04f 33ff 	mov.w	r3, #4294967295
 80014bc:	9300      	str	r3, [sp, #0]
 80014be:	2306      	movs	r3, #6
 80014c0:	4ab6      	ldr	r2, [pc, #728]	; (800179c <main+0x68c>)
 80014c2:	21d0      	movs	r1, #208	; 0xd0
 80014c4:	48b6      	ldr	r0, [pc, #728]	; (80017a0 <main+0x690>)
 80014c6:	f001 fbef 	bl	8002ca8 <HAL_I2C_Master_Receive>

	 	 	  // Gyro Raw Values GYRO OUTPUT
	 	 	  gyro_raw[0] = (gyro_buffer[0] << 8 | gyro_buffer[1]);
 80014ca:	4bb4      	ldr	r3, [pc, #720]	; (800179c <main+0x68c>)
 80014cc:	781b      	ldrb	r3, [r3, #0]
 80014ce:	021b      	lsls	r3, r3, #8
 80014d0:	b21a      	sxth	r2, r3
 80014d2:	4bb2      	ldr	r3, [pc, #712]	; (800179c <main+0x68c>)
 80014d4:	785b      	ldrb	r3, [r3, #1]
 80014d6:	b21b      	sxth	r3, r3
 80014d8:	4313      	orrs	r3, r2
 80014da:	b21a      	sxth	r2, r3
 80014dc:	4bb1      	ldr	r3, [pc, #708]	; (80017a4 <main+0x694>)
 80014de:	801a      	strh	r2, [r3, #0]
	 	 	  gyro_raw[1] = (gyro_buffer[2] << 8 | gyro_buffer[3]);
 80014e0:	4bae      	ldr	r3, [pc, #696]	; (800179c <main+0x68c>)
 80014e2:	789b      	ldrb	r3, [r3, #2]
 80014e4:	021b      	lsls	r3, r3, #8
 80014e6:	b21a      	sxth	r2, r3
 80014e8:	4bac      	ldr	r3, [pc, #688]	; (800179c <main+0x68c>)
 80014ea:	78db      	ldrb	r3, [r3, #3]
 80014ec:	b21b      	sxth	r3, r3
 80014ee:	4313      	orrs	r3, r2
 80014f0:	b21a      	sxth	r2, r3
 80014f2:	4bac      	ldr	r3, [pc, #688]	; (80017a4 <main+0x694>)
 80014f4:	805a      	strh	r2, [r3, #2]
	 	 	  gyro_raw[2] = (gyro_buffer[4] << 8 | gyro_buffer[5]);
 80014f6:	4ba9      	ldr	r3, [pc, #676]	; (800179c <main+0x68c>)
 80014f8:	791b      	ldrb	r3, [r3, #4]
 80014fa:	021b      	lsls	r3, r3, #8
 80014fc:	b21a      	sxth	r2, r3
 80014fe:	4ba7      	ldr	r3, [pc, #668]	; (800179c <main+0x68c>)
 8001500:	795b      	ldrb	r3, [r3, #5]
 8001502:	b21b      	sxth	r3, r3
 8001504:	4313      	orrs	r3, r2
 8001506:	b21a      	sxth	r2, r3
 8001508:	4ba6      	ldr	r3, [pc, #664]	; (80017a4 <main+0x694>)
 800150a:	809a      	strh	r2, [r3, #4]

	 	 	  //Olculen veri kalibre veriden çıkarılacak raw(ham) veriden daha duzgun deger alınması saglanır//
	 	 	  gyro_raw[0] -= gyro_cal[0];
 800150c:	4ba5      	ldr	r3, [pc, #660]	; (80017a4 <main+0x694>)
 800150e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001512:	4618      	mov	r0, r3
 8001514:	f7ff fbba 	bl	8000c8c <__aeabi_i2f>
 8001518:	4602      	mov	r2, r0
 800151a:	4ba3      	ldr	r3, [pc, #652]	; (80017a8 <main+0x698>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4619      	mov	r1, r3
 8001520:	4610      	mov	r0, r2
 8001522:	f7ff fafd 	bl	8000b20 <__aeabi_fsub>
 8001526:	4603      	mov	r3, r0
 8001528:	4618      	mov	r0, r3
 800152a:	f7ff fdc9 	bl	80010c0 <__aeabi_f2iz>
 800152e:	4603      	mov	r3, r0
 8001530:	b21a      	sxth	r2, r3
 8001532:	4b9c      	ldr	r3, [pc, #624]	; (80017a4 <main+0x694>)
 8001534:	801a      	strh	r2, [r3, #0]
	 	 	  gyro_raw[1] -= gyro_cal[1];
 8001536:	4b9b      	ldr	r3, [pc, #620]	; (80017a4 <main+0x694>)
 8001538:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800153c:	4618      	mov	r0, r3
 800153e:	f7ff fba5 	bl	8000c8c <__aeabi_i2f>
 8001542:	4602      	mov	r2, r0
 8001544:	4b98      	ldr	r3, [pc, #608]	; (80017a8 <main+0x698>)
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	4619      	mov	r1, r3
 800154a:	4610      	mov	r0, r2
 800154c:	f7ff fae8 	bl	8000b20 <__aeabi_fsub>
 8001550:	4603      	mov	r3, r0
 8001552:	4618      	mov	r0, r3
 8001554:	f7ff fdb4 	bl	80010c0 <__aeabi_f2iz>
 8001558:	4603      	mov	r3, r0
 800155a:	b21a      	sxth	r2, r3
 800155c:	4b91      	ldr	r3, [pc, #580]	; (80017a4 <main+0x694>)
 800155e:	805a      	strh	r2, [r3, #2]
	 	 	  gyro_raw[2] -= gyro_cal[2];
 8001560:	4b90      	ldr	r3, [pc, #576]	; (80017a4 <main+0x694>)
 8001562:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001566:	4618      	mov	r0, r3
 8001568:	f7ff fb90 	bl	8000c8c <__aeabi_i2f>
 800156c:	4602      	mov	r2, r0
 800156e:	4b8e      	ldr	r3, [pc, #568]	; (80017a8 <main+0x698>)
 8001570:	689b      	ldr	r3, [r3, #8]
 8001572:	4619      	mov	r1, r3
 8001574:	4610      	mov	r0, r2
 8001576:	f7ff fad3 	bl	8000b20 <__aeabi_fsub>
 800157a:	4603      	mov	r3, r0
 800157c:	4618      	mov	r0, r3
 800157e:	f7ff fd9f 	bl	80010c0 <__aeabi_f2iz>
 8001582:	4603      	mov	r3, r0
 8001584:	b21a      	sxth	r2, r3
 8001586:	4b87      	ldr	r3, [pc, #540]	; (80017a4 <main+0x694>)
 8001588:	809a      	strh	r2, [r3, #4]

              // gyro integral islemine tabi tutulur, elde edilen degerle carpılır.
	 	 	  //0.00006154 = (1/65.5)*0.004
	 	 	  angle_roll_gyro += gyro_raw[0] * 0.00006154; // roll---> X Ekseni
 800158a:	4b88      	ldr	r3, [pc, #544]	; (80017ac <main+0x69c>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4618      	mov	r0, r3
 8001590:	f7fe ff42 	bl	8000418 <__aeabi_f2d>
 8001594:	4604      	mov	r4, r0
 8001596:	460d      	mov	r5, r1
 8001598:	4b82      	ldr	r3, [pc, #520]	; (80017a4 <main+0x694>)
 800159a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800159e:	4618      	mov	r0, r3
 80015a0:	f7fe ff28 	bl	80003f4 <__aeabi_i2d>
 80015a4:	a378      	add	r3, pc, #480	; (adr r3, 8001788 <main+0x678>)
 80015a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015aa:	f7fe ff8d 	bl	80004c8 <__aeabi_dmul>
 80015ae:	4602      	mov	r2, r0
 80015b0:	460b      	mov	r3, r1
 80015b2:	4620      	mov	r0, r4
 80015b4:	4629      	mov	r1, r5
 80015b6:	f7fe fdd1 	bl	800015c <__adddf3>
 80015ba:	4602      	mov	r2, r0
 80015bc:	460b      	mov	r3, r1
 80015be:	4610      	mov	r0, r2
 80015c0:	4619      	mov	r1, r3
 80015c2:	f7ff fa59 	bl	8000a78 <__aeabi_d2f>
 80015c6:	4603      	mov	r3, r0
 80015c8:	4a78      	ldr	r2, [pc, #480]	; (80017ac <main+0x69c>)
 80015ca:	6013      	str	r3, [r2, #0]
	 	 	  angle_pitch_gyro += gyro_raw[1] * 0.00006154; // pitch--> Y ekseni
 80015cc:	4b78      	ldr	r3, [pc, #480]	; (80017b0 <main+0x6a0>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4618      	mov	r0, r3
 80015d2:	f7fe ff21 	bl	8000418 <__aeabi_f2d>
 80015d6:	4604      	mov	r4, r0
 80015d8:	460d      	mov	r5, r1
 80015da:	4b72      	ldr	r3, [pc, #456]	; (80017a4 <main+0x694>)
 80015dc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80015e0:	4618      	mov	r0, r3
 80015e2:	f7fe ff07 	bl	80003f4 <__aeabi_i2d>
 80015e6:	a368      	add	r3, pc, #416	; (adr r3, 8001788 <main+0x678>)
 80015e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ec:	f7fe ff6c 	bl	80004c8 <__aeabi_dmul>
 80015f0:	4602      	mov	r2, r0
 80015f2:	460b      	mov	r3, r1
 80015f4:	4620      	mov	r0, r4
 80015f6:	4629      	mov	r1, r5
 80015f8:	f7fe fdb0 	bl	800015c <__adddf3>
 80015fc:	4602      	mov	r2, r0
 80015fe:	460b      	mov	r3, r1
 8001600:	4610      	mov	r0, r2
 8001602:	4619      	mov	r1, r3
 8001604:	f7ff fa38 	bl	8000a78 <__aeabi_d2f>
 8001608:	4603      	mov	r3, r0
 800160a:	4a69      	ldr	r2, [pc, #420]	; (80017b0 <main+0x6a0>)
 800160c:	6013      	str	r3, [r2, #0]
	 	 	  angle_yaw_gyro += gyro_raw[2] * 0.00006154; // yaw--> z ekseni
 800160e:	4b69      	ldr	r3, [pc, #420]	; (80017b4 <main+0x6a4>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4618      	mov	r0, r3
 8001614:	f7fe ff00 	bl	8000418 <__aeabi_f2d>
 8001618:	4604      	mov	r4, r0
 800161a:	460d      	mov	r5, r1
 800161c:	4b61      	ldr	r3, [pc, #388]	; (80017a4 <main+0x694>)
 800161e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001622:	4618      	mov	r0, r3
 8001624:	f7fe fee6 	bl	80003f4 <__aeabi_i2d>
 8001628:	a357      	add	r3, pc, #348	; (adr r3, 8001788 <main+0x678>)
 800162a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800162e:	f7fe ff4b 	bl	80004c8 <__aeabi_dmul>
 8001632:	4602      	mov	r2, r0
 8001634:	460b      	mov	r3, r1
 8001636:	4620      	mov	r0, r4
 8001638:	4629      	mov	r1, r5
 800163a:	f7fe fd8f 	bl	800015c <__adddf3>
 800163e:	4602      	mov	r2, r0
 8001640:	460b      	mov	r3, r1
 8001642:	4610      	mov	r0, r2
 8001644:	4619      	mov	r1, r3
 8001646:	f7ff fa17 	bl	8000a78 <__aeabi_d2f>
 800164a:	4603      	mov	r3, r0
 800164c:	4a59      	ldr	r2, [pc, #356]	; (80017b4 <main+0x6a4>)
 800164e:	6013      	str	r3, [r2, #0]


	 	 	  //Radyan Dereceye cevrilir Derece= 180/3.14 = 57.296 ---> 0.000001066 = (0.00006154/57.296)
	 	 	  // z ekseni ham verisi ile x ve y ekseni hesaplamaları yapılır//
	 //eksenler birbiri üzerinde arttırıcı/azaltıcı etkende oldukları için birbirlerinden toplanır/cıkarılır
	 	 	  angle_pitch_gyro += angle_roll_gyro * sin(gyro_raw[2] * 0.000001066);
 8001650:	4b57      	ldr	r3, [pc, #348]	; (80017b0 <main+0x6a0>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4618      	mov	r0, r3
 8001656:	f7fe fedf 	bl	8000418 <__aeabi_f2d>
 800165a:	4604      	mov	r4, r0
 800165c:	460d      	mov	r5, r1
 800165e:	4b53      	ldr	r3, [pc, #332]	; (80017ac <main+0x69c>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4618      	mov	r0, r3
 8001664:	f7fe fed8 	bl	8000418 <__aeabi_f2d>
 8001668:	4680      	mov	r8, r0
 800166a:	4689      	mov	r9, r1
 800166c:	4b4d      	ldr	r3, [pc, #308]	; (80017a4 <main+0x694>)
 800166e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001672:	4618      	mov	r0, r3
 8001674:	f7fe febe 	bl	80003f4 <__aeabi_i2d>
 8001678:	a345      	add	r3, pc, #276	; (adr r3, 8001790 <main+0x680>)
 800167a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800167e:	f7fe ff23 	bl	80004c8 <__aeabi_dmul>
 8001682:	4602      	mov	r2, r0
 8001684:	460b      	mov	r3, r1
 8001686:	4610      	mov	r0, r2
 8001688:	4619      	mov	r1, r3
 800168a:	f004 fc41 	bl	8005f10 <sin>
 800168e:	4602      	mov	r2, r0
 8001690:	460b      	mov	r3, r1
 8001692:	4640      	mov	r0, r8
 8001694:	4649      	mov	r1, r9
 8001696:	f7fe ff17 	bl	80004c8 <__aeabi_dmul>
 800169a:	4602      	mov	r2, r0
 800169c:	460b      	mov	r3, r1
 800169e:	4620      	mov	r0, r4
 80016a0:	4629      	mov	r1, r5
 80016a2:	f7fe fd5b 	bl	800015c <__adddf3>
 80016a6:	4602      	mov	r2, r0
 80016a8:	460b      	mov	r3, r1
 80016aa:	4610      	mov	r0, r2
 80016ac:	4619      	mov	r1, r3
 80016ae:	f7ff f9e3 	bl	8000a78 <__aeabi_d2f>
 80016b2:	4603      	mov	r3, r0
 80016b4:	4a3e      	ldr	r2, [pc, #248]	; (80017b0 <main+0x6a0>)
 80016b6:	6013      	str	r3, [r2, #0]
	 	 	  angle_roll_gyro -= angle_pitch_gyro * sin(gyro_raw[2] * 0.000001066);
 80016b8:	4b3c      	ldr	r3, [pc, #240]	; (80017ac <main+0x69c>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4618      	mov	r0, r3
 80016be:	f7fe feab 	bl	8000418 <__aeabi_f2d>
 80016c2:	4604      	mov	r4, r0
 80016c4:	460d      	mov	r5, r1
 80016c6:	4b3a      	ldr	r3, [pc, #232]	; (80017b0 <main+0x6a0>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4618      	mov	r0, r3
 80016cc:	f7fe fea4 	bl	8000418 <__aeabi_f2d>
 80016d0:	4680      	mov	r8, r0
 80016d2:	4689      	mov	r9, r1
 80016d4:	4b33      	ldr	r3, [pc, #204]	; (80017a4 <main+0x694>)
 80016d6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80016da:	4618      	mov	r0, r3
 80016dc:	f7fe fe8a 	bl	80003f4 <__aeabi_i2d>
 80016e0:	a32b      	add	r3, pc, #172	; (adr r3, 8001790 <main+0x680>)
 80016e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016e6:	f7fe feef 	bl	80004c8 <__aeabi_dmul>
 80016ea:	4602      	mov	r2, r0
 80016ec:	460b      	mov	r3, r1
 80016ee:	4610      	mov	r0, r2
 80016f0:	4619      	mov	r1, r3
 80016f2:	f004 fc0d 	bl	8005f10 <sin>
 80016f6:	4602      	mov	r2, r0
 80016f8:	460b      	mov	r3, r1
 80016fa:	4640      	mov	r0, r8
 80016fc:	4649      	mov	r1, r9
 80016fe:	f7fe fee3 	bl	80004c8 <__aeabi_dmul>
 8001702:	4602      	mov	r2, r0
 8001704:	460b      	mov	r3, r1
 8001706:	4620      	mov	r0, r4
 8001708:	4629      	mov	r1, r5
 800170a:	f7fe fd25 	bl	8000158 <__aeabi_dsub>
 800170e:	4602      	mov	r2, r0
 8001710:	460b      	mov	r3, r1
 8001712:	4610      	mov	r0, r2
 8001714:	4619      	mov	r1, r3
 8001716:	f7ff f9af 	bl	8000a78 <__aeabi_d2f>
 800171a:	4603      	mov	r3, r0
 800171c:	4a23      	ldr	r2, [pc, #140]	; (80017ac <main+0x69c>)
 800171e:	6013      	str	r3, [r2, #0]


              // acctotal=√x^2+y^2+z^2
	 	 	  acc_total_vector = sqrt((acc_raw[0]*acc_raw[0])+(acc_raw[1]*acc_raw[1])+(acc_raw[2]*acc_raw[2]));
 8001720:	4b25      	ldr	r3, [pc, #148]	; (80017b8 <main+0x6a8>)
 8001722:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001726:	461a      	mov	r2, r3
 8001728:	4b23      	ldr	r3, [pc, #140]	; (80017b8 <main+0x6a8>)
 800172a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800172e:	fb03 f202 	mul.w	r2, r3, r2
 8001732:	4b21      	ldr	r3, [pc, #132]	; (80017b8 <main+0x6a8>)
 8001734:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001738:	4619      	mov	r1, r3
 800173a:	4b1f      	ldr	r3, [pc, #124]	; (80017b8 <main+0x6a8>)
 800173c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001740:	fb03 f301 	mul.w	r3, r3, r1
 8001744:	441a      	add	r2, r3
 8001746:	4b1c      	ldr	r3, [pc, #112]	; (80017b8 <main+0x6a8>)
 8001748:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800174c:	4619      	mov	r1, r3
 800174e:	4b1a      	ldr	r3, [pc, #104]	; (80017b8 <main+0x6a8>)
 8001750:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001754:	fb03 f301 	mul.w	r3, r3, r1
 8001758:	4413      	add	r3, r2
 800175a:	4618      	mov	r0, r3
 800175c:	f7fe fe4a 	bl	80003f4 <__aeabi_i2d>
 8001760:	4602      	mov	r2, r0
 8001762:	460b      	mov	r3, r1
 8001764:	4610      	mov	r0, r2
 8001766:	4619      	mov	r1, r3
 8001768:	f004 fc46 	bl	8005ff8 <sqrt>
 800176c:	4602      	mov	r2, r0
 800176e:	460b      	mov	r3, r1
 8001770:	4610      	mov	r0, r2
 8001772:	4619      	mov	r1, r3
 8001774:	f7ff f958 	bl	8000a28 <__aeabi_d2iz>
 8001778:	4603      	mov	r3, r0
 800177a:	b21a      	sxth	r2, r3
 800177c:	e01e      	b.n	80017bc <main+0x6ac>
 800177e:	bf00      	nop
 8001780:	0a3d70a4 	.word	0x0a3d70a4
 8001784:	404043d7 	.word	0x404043d7
 8001788:	264b1857 	.word	0x264b1857
 800178c:	3f1021e1 	.word	0x3f1021e1
 8001790:	652c6e62 	.word	0x652c6e62
 8001794:	3eb1e26f 	.word	0x3eb1e26f
 8001798:	20000164 	.word	0x20000164
 800179c:	2000014c 	.word	0x2000014c
 80017a0:	200000f4 	.word	0x200000f4
 80017a4:	200000ac 	.word	0x200000ac
 80017a8:	200000e8 	.word	0x200000e8
 80017ac:	200003d8 	.word	0x200003d8
 80017b0:	200002f4 	.word	0x200002f4
 80017b4:	20000354 	.word	0x20000354
 80017b8:	20000158 	.word	0x20000158
 80017bc:	4b72      	ldr	r3, [pc, #456]	; (8001988 <main+0x878>)
 80017be:	801a      	strh	r2, [r3, #0]

	 	 	  // Radyan Dereceye cevrilir Derece= 180/3.14 = 57.296  57.296 = 1 / (3.14 / 180)
	 	 	  //angle_roll=arcsin(x/acctotal)
	 	 	  angle_roll_acc = asin((float)acc_raw[0]/acc_total_vector)* -57.296; // x ekseni
 80017c0:	4b72      	ldr	r3, [pc, #456]	; (800198c <main+0x87c>)
 80017c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017c6:	4618      	mov	r0, r3
 80017c8:	f7ff fa60 	bl	8000c8c <__aeabi_i2f>
 80017cc:	4604      	mov	r4, r0
 80017ce:	4b6e      	ldr	r3, [pc, #440]	; (8001988 <main+0x878>)
 80017d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017d4:	4618      	mov	r0, r3
 80017d6:	f7ff fa59 	bl	8000c8c <__aeabi_i2f>
 80017da:	4603      	mov	r3, r0
 80017dc:	4619      	mov	r1, r3
 80017de:	4620      	mov	r0, r4
 80017e0:	f7ff fb5c 	bl	8000e9c <__aeabi_fdiv>
 80017e4:	4603      	mov	r3, r0
 80017e6:	4618      	mov	r0, r3
 80017e8:	f7fe fe16 	bl	8000418 <__aeabi_f2d>
 80017ec:	4602      	mov	r2, r0
 80017ee:	460b      	mov	r3, r1
 80017f0:	4610      	mov	r0, r2
 80017f2:	4619      	mov	r1, r3
 80017f4:	f004 fbd2 	bl	8005f9c <asin>
 80017f8:	a35b      	add	r3, pc, #364	; (adr r3, 8001968 <main+0x858>)
 80017fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017fe:	f7fe fe63 	bl	80004c8 <__aeabi_dmul>
 8001802:	4602      	mov	r2, r0
 8001804:	460b      	mov	r3, r1
 8001806:	4610      	mov	r0, r2
 8001808:	4619      	mov	r1, r3
 800180a:	f7ff f935 	bl	8000a78 <__aeabi_d2f>
 800180e:	4603      	mov	r3, r0
 8001810:	4a5f      	ldr	r2, [pc, #380]	; (8001990 <main+0x880>)
 8001812:	6013      	str	r3, [r2, #0]

	 	 	  //angle_pitch=arcsin(y/acctotal)
	 	 	  angle_pitch_acc = asin((float)acc_raw[1]/acc_total_vector)* 57.296; // y ekseni
 8001814:	4b5d      	ldr	r3, [pc, #372]	; (800198c <main+0x87c>)
 8001816:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800181a:	4618      	mov	r0, r3
 800181c:	f7ff fa36 	bl	8000c8c <__aeabi_i2f>
 8001820:	4604      	mov	r4, r0
 8001822:	4b59      	ldr	r3, [pc, #356]	; (8001988 <main+0x878>)
 8001824:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001828:	4618      	mov	r0, r3
 800182a:	f7ff fa2f 	bl	8000c8c <__aeabi_i2f>
 800182e:	4603      	mov	r3, r0
 8001830:	4619      	mov	r1, r3
 8001832:	4620      	mov	r0, r4
 8001834:	f7ff fb32 	bl	8000e9c <__aeabi_fdiv>
 8001838:	4603      	mov	r3, r0
 800183a:	4618      	mov	r0, r3
 800183c:	f7fe fdec 	bl	8000418 <__aeabi_f2d>
 8001840:	4602      	mov	r2, r0
 8001842:	460b      	mov	r3, r1
 8001844:	4610      	mov	r0, r2
 8001846:	4619      	mov	r1, r3
 8001848:	f004 fba8 	bl	8005f9c <asin>
 800184c:	a348      	add	r3, pc, #288	; (adr r3, 8001970 <main+0x860>)
 800184e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001852:	f7fe fe39 	bl	80004c8 <__aeabi_dmul>
 8001856:	4602      	mov	r2, r0
 8001858:	460b      	mov	r3, r1
 800185a:	4610      	mov	r0, r2
 800185c:	4619      	mov	r1, r3
 800185e:	f7ff f90b 	bl	8000a78 <__aeabi_d2f>
 8001862:	4603      	mov	r3, r0
 8001864:	4a4b      	ldr	r2, [pc, #300]	; (8001994 <main+0x884>)
 8001866:	6013      	str	r3, [r2, #0]

	 	 	  //angle_yaw=arcsin(z/acctotal)
	 	 	  angle_yaw_acc = asin((float)acc_raw[2]/acc_total_vector)* 57.296; // z ekseni
 8001868:	4b48      	ldr	r3, [pc, #288]	; (800198c <main+0x87c>)
 800186a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800186e:	4618      	mov	r0, r3
 8001870:	f7ff fa0c 	bl	8000c8c <__aeabi_i2f>
 8001874:	4604      	mov	r4, r0
 8001876:	4b44      	ldr	r3, [pc, #272]	; (8001988 <main+0x878>)
 8001878:	f9b3 3000 	ldrsh.w	r3, [r3]
 800187c:	4618      	mov	r0, r3
 800187e:	f7ff fa05 	bl	8000c8c <__aeabi_i2f>
 8001882:	4603      	mov	r3, r0
 8001884:	4619      	mov	r1, r3
 8001886:	4620      	mov	r0, r4
 8001888:	f7ff fb08 	bl	8000e9c <__aeabi_fdiv>
 800188c:	4603      	mov	r3, r0
 800188e:	4618      	mov	r0, r3
 8001890:	f7fe fdc2 	bl	8000418 <__aeabi_f2d>
 8001894:	4602      	mov	r2, r0
 8001896:	460b      	mov	r3, r1
 8001898:	4610      	mov	r0, r2
 800189a:	4619      	mov	r1, r3
 800189c:	f004 fb7e 	bl	8005f9c <asin>
 80018a0:	a333      	add	r3, pc, #204	; (adr r3, 8001970 <main+0x860>)
 80018a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018a6:	f7fe fe0f 	bl	80004c8 <__aeabi_dmul>
 80018aa:	4602      	mov	r2, r0
 80018ac:	460b      	mov	r3, r1
 80018ae:	4610      	mov	r0, r2
 80018b0:	4619      	mov	r1, r3
 80018b2:	f7ff f8e1 	bl	8000a78 <__aeabi_d2f>
 80018b6:	4603      	mov	r3, r0
 80018b8:	4a37      	ldr	r2, [pc, #220]	; (8001998 <main+0x888>)
 80018ba:	6013      	str	r3, [r2, #0]




	 	 	  if(set_gyro){
 80018bc:	4b37      	ldr	r3, [pc, #220]	; (800199c <main+0x88c>)
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d075      	beq.n	80019b0 <main+0x8a0>
	 	 		  //LPF VE HPF Filtre islemleri gerceklestirilir.
	 	 		  // Gyro HPF, acc LPF filteden gectigi icin bu degerler kullanılmıstır
	 	 		  angle_roll = angle_roll_gyro * 0.9996 + angle_roll_acc * 0.0004;
 80018c4:	4b36      	ldr	r3, [pc, #216]	; (80019a0 <main+0x890>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4618      	mov	r0, r3
 80018ca:	f7fe fda5 	bl	8000418 <__aeabi_f2d>
 80018ce:	a32a      	add	r3, pc, #168	; (adr r3, 8001978 <main+0x868>)
 80018d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018d4:	f7fe fdf8 	bl	80004c8 <__aeabi_dmul>
 80018d8:	4602      	mov	r2, r0
 80018da:	460b      	mov	r3, r1
 80018dc:	4614      	mov	r4, r2
 80018de:	461d      	mov	r5, r3
 80018e0:	4b2b      	ldr	r3, [pc, #172]	; (8001990 <main+0x880>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4618      	mov	r0, r3
 80018e6:	f7fe fd97 	bl	8000418 <__aeabi_f2d>
 80018ea:	a325      	add	r3, pc, #148	; (adr r3, 8001980 <main+0x870>)
 80018ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018f0:	f7fe fdea 	bl	80004c8 <__aeabi_dmul>
 80018f4:	4602      	mov	r2, r0
 80018f6:	460b      	mov	r3, r1
 80018f8:	4620      	mov	r0, r4
 80018fa:	4629      	mov	r1, r5
 80018fc:	f7fe fc2e 	bl	800015c <__adddf3>
 8001900:	4602      	mov	r2, r0
 8001902:	460b      	mov	r3, r1
 8001904:	4610      	mov	r0, r2
 8001906:	4619      	mov	r1, r3
 8001908:	f7ff f8b6 	bl	8000a78 <__aeabi_d2f>
 800190c:	4603      	mov	r3, r0
 800190e:	4a25      	ldr	r2, [pc, #148]	; (80019a4 <main+0x894>)
 8001910:	6013      	str	r3, [r2, #0]
	 	 		  angle_pitch = angle_pitch_gyro * 0.9996 + angle_pitch_acc * 0.0004;
 8001912:	4b25      	ldr	r3, [pc, #148]	; (80019a8 <main+0x898>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4618      	mov	r0, r3
 8001918:	f7fe fd7e 	bl	8000418 <__aeabi_f2d>
 800191c:	a316      	add	r3, pc, #88	; (adr r3, 8001978 <main+0x868>)
 800191e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001922:	f7fe fdd1 	bl	80004c8 <__aeabi_dmul>
 8001926:	4602      	mov	r2, r0
 8001928:	460b      	mov	r3, r1
 800192a:	4614      	mov	r4, r2
 800192c:	461d      	mov	r5, r3
 800192e:	4b19      	ldr	r3, [pc, #100]	; (8001994 <main+0x884>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4618      	mov	r0, r3
 8001934:	f7fe fd70 	bl	8000418 <__aeabi_f2d>
 8001938:	a311      	add	r3, pc, #68	; (adr r3, 8001980 <main+0x870>)
 800193a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800193e:	f7fe fdc3 	bl	80004c8 <__aeabi_dmul>
 8001942:	4602      	mov	r2, r0
 8001944:	460b      	mov	r3, r1
 8001946:	4620      	mov	r0, r4
 8001948:	4629      	mov	r1, r5
 800194a:	f7fe fc07 	bl	800015c <__adddf3>
 800194e:	4602      	mov	r2, r0
 8001950:	460b      	mov	r3, r1
 8001952:	4610      	mov	r0, r2
 8001954:	4619      	mov	r1, r3
 8001956:	f7ff f88f 	bl	8000a78 <__aeabi_d2f>
 800195a:	4603      	mov	r3, r0
 800195c:	4a13      	ldr	r2, [pc, #76]	; (80019ac <main+0x89c>)
 800195e:	6013      	str	r3, [r2, #0]
 8001960:	e02d      	b.n	80019be <main+0x8ae>
 8001962:	bf00      	nop
 8001964:	f3af 8000 	nop.w
 8001968:	53f7ced9 	.word	0x53f7ced9
 800196c:	c04ca5e3 	.word	0xc04ca5e3
 8001970:	53f7ced9 	.word	0x53f7ced9
 8001974:	404ca5e3 	.word	0x404ca5e3
 8001978:	23a29c78 	.word	0x23a29c78
 800197c:	3feffcb9 	.word	0x3feffcb9
 8001980:	eb1c432d 	.word	0xeb1c432d
 8001984:	3f3a36e2 	.word	0x3f3a36e2
 8001988:	20000358 	.word	0x20000358
 800198c:	20000158 	.word	0x20000158
 8001990:	200003dc 	.word	0x200003dc
 8001994:	200000e4 	.word	0x200000e4
 8001998:	200000e0 	.word	0x200000e0
 800199c:	2000030c 	.word	0x2000030c
 80019a0:	200003d8 	.word	0x200003d8
 80019a4:	2000018c 	.word	0x2000018c
 80019a8:	200002f4 	.word	0x200002f4
 80019ac:	200000dc 	.word	0x200000dc

	 	 		}
	 	 	  else
	 	 	  {
	 	 		  angle_pitch = angle_pitch_acc;
 80019b0:	4b94      	ldr	r3, [pc, #592]	; (8001c04 <main+0xaf4>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a94      	ldr	r2, [pc, #592]	; (8001c08 <main+0xaf8>)
 80019b6:	6013      	str	r3, [r2, #0]
	 	 		  set_gyro = true;
 80019b8:	4b94      	ldr	r3, [pc, #592]	; (8001c0c <main+0xafc>)
 80019ba:	2201      	movs	r2, #1
 80019bc:	701a      	strb	r2, [r3, #0]
	 	 		}

	 	 	  //dongunun 4ms surmesi icin  yazılmıstır
	 	 	  while((HAL_GetTick() - prevtime)*1000 < 4000);
 80019be:	bf00      	nop
 80019c0:	f000 fc82 	bl	80022c8 <HAL_GetTick>
 80019c4:	4603      	mov	r3, r0
 80019c6:	4618      	mov	r0, r3
 80019c8:	f7ff f95c 	bl	8000c84 <__aeabi_ui2f>
 80019cc:	4602      	mov	r2, r0
 80019ce:	4b90      	ldr	r3, [pc, #576]	; (8001c10 <main+0xb00>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4619      	mov	r1, r3
 80019d4:	4610      	mov	r0, r2
 80019d6:	f7ff f8a3 	bl	8000b20 <__aeabi_fsub>
 80019da:	4603      	mov	r3, r0
 80019dc:	498d      	ldr	r1, [pc, #564]	; (8001c14 <main+0xb04>)
 80019de:	4618      	mov	r0, r3
 80019e0:	f7ff f9a8 	bl	8000d34 <__aeabi_fmul>
 80019e4:	4603      	mov	r3, r0
 80019e6:	498c      	ldr	r1, [pc, #560]	; (8001c18 <main+0xb08>)
 80019e8:	4618      	mov	r0, r3
 80019ea:	f7ff fb41 	bl	8001070 <__aeabi_fcmplt>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d1e5      	bne.n	80019c0 <main+0x8b0>
	 	 	  prevtime = HAL_GetTick();
 80019f4:	f000 fc68 	bl	80022c8 <HAL_GetTick>
 80019f8:	4603      	mov	r3, r0
 80019fa:	4618      	mov	r0, r3
 80019fc:	f7ff f942 	bl	8000c84 <__aeabi_ui2f>
 8001a00:	4603      	mov	r3, r0
 8001a02:	4a83      	ldr	r2, [pc, #524]	; (8001c10 <main+0xb00>)
 8001a04:	6013      	str	r3, [r2, #0]
	 	 	  /*****************************************MPU6050 GYRO+ACC SENSOR***********************************************************/


	 	 	          /****************************************RTC******************************************/
	 	 	      HAL_RTC_GetTime(&hrtc , &sTime , RTC_FORMAT_BIN);
 8001a06:	2200      	movs	r2, #0
 8001a08:	4984      	ldr	r1, [pc, #528]	; (8001c1c <main+0xb0c>)
 8001a0a:	4885      	ldr	r0, [pc, #532]	; (8001c20 <main+0xb10>)
 8001a0c:	f002 ff36 	bl	800487c <HAL_RTC_GetTime>
	 	 		  HAL_RTC_GetDate(&hrtc , &DateToUpdate , RTC_FORMAT_BIN);
 8001a10:	2200      	movs	r2, #0
 8001a12:	4984      	ldr	r1, [pc, #528]	; (8001c24 <main+0xb14>)
 8001a14:	4882      	ldr	r0, [pc, #520]	; (8001c20 <main+0xb10>)
 8001a16:	f003 f8bf 	bl	8004b98 <HAL_RTC_GetDate>

	 	 		  saat = sTime.Hours;
 8001a1a:	4b80      	ldr	r3, [pc, #512]	; (8001c1c <main+0xb0c>)
 8001a1c:	781b      	ldrb	r3, [r3, #0]
 8001a1e:	b29a      	uxth	r2, r3
 8001a20:	4b81      	ldr	r3, [pc, #516]	; (8001c28 <main+0xb18>)
 8001a22:	801a      	strh	r2, [r3, #0]
	 	 		  dakika = sTime.Minutes;
 8001a24:	4b7d      	ldr	r3, [pc, #500]	; (8001c1c <main+0xb0c>)
 8001a26:	785b      	ldrb	r3, [r3, #1]
 8001a28:	b29a      	uxth	r2, r3
 8001a2a:	4b80      	ldr	r3, [pc, #512]	; (8001c2c <main+0xb1c>)
 8001a2c:	801a      	strh	r2, [r3, #0]
	 	 		  saniye = sTime.Seconds;
 8001a2e:	4b7b      	ldr	r3, [pc, #492]	; (8001c1c <main+0xb0c>)
 8001a30:	789b      	ldrb	r3, [r3, #2]
 8001a32:	b29a      	uxth	r2, r3
 8001a34:	4b7e      	ldr	r3, [pc, #504]	; (8001c30 <main+0xb20>)
 8001a36:	801a      	strh	r2, [r3, #0]

	 	 		  gun = DateToUpdate.Date;
 8001a38:	4b7a      	ldr	r3, [pc, #488]	; (8001c24 <main+0xb14>)
 8001a3a:	789b      	ldrb	r3, [r3, #2]
 8001a3c:	b29a      	uxth	r2, r3
 8001a3e:	4b7d      	ldr	r3, [pc, #500]	; (8001c34 <main+0xb24>)
 8001a40:	801a      	strh	r2, [r3, #0]
	 	 		  ay = DateToUpdate.Month;
 8001a42:	4b78      	ldr	r3, [pc, #480]	; (8001c24 <main+0xb14>)
 8001a44:	785b      	ldrb	r3, [r3, #1]
 8001a46:	b29a      	uxth	r2, r3
 8001a48:	4b7b      	ldr	r3, [pc, #492]	; (8001c38 <main+0xb28>)
 8001a4a:	801a      	strh	r2, [r3, #0]
	 	 		  yil = DateToUpdate.Year;
 8001a4c:	4b75      	ldr	r3, [pc, #468]	; (8001c24 <main+0xb14>)
 8001a4e:	78db      	ldrb	r3, [r3, #3]
 8001a50:	b29a      	uxth	r2, r3
 8001a52:	4b7a      	ldr	r3, [pc, #488]	; (8001c3c <main+0xb2c>)
 8001a54:	801a      	strh	r2, [r3, #0]

	 	 		  sprintf(line1, "%d:%d:%d",saat,dakika,saniye);
 8001a56:	4b74      	ldr	r3, [pc, #464]	; (8001c28 <main+0xb18>)
 8001a58:	881b      	ldrh	r3, [r3, #0]
 8001a5a:	461a      	mov	r2, r3
 8001a5c:	4b73      	ldr	r3, [pc, #460]	; (8001c2c <main+0xb1c>)
 8001a5e:	881b      	ldrh	r3, [r3, #0]
 8001a60:	4619      	mov	r1, r3
 8001a62:	4b73      	ldr	r3, [pc, #460]	; (8001c30 <main+0xb20>)
 8001a64:	881b      	ldrh	r3, [r3, #0]
 8001a66:	9300      	str	r3, [sp, #0]
 8001a68:	460b      	mov	r3, r1
 8001a6a:	4975      	ldr	r1, [pc, #468]	; (8001c40 <main+0xb30>)
 8001a6c:	4875      	ldr	r0, [pc, #468]	; (8001c44 <main+0xb34>)
 8001a6e:	f003 fe15 	bl	800569c <siprintf>
	 	 		  sprintf(line2, "%d:%d:%d",gun,ay,yil);
 8001a72:	4b70      	ldr	r3, [pc, #448]	; (8001c34 <main+0xb24>)
 8001a74:	881b      	ldrh	r3, [r3, #0]
 8001a76:	461a      	mov	r2, r3
 8001a78:	4b6f      	ldr	r3, [pc, #444]	; (8001c38 <main+0xb28>)
 8001a7a:	881b      	ldrh	r3, [r3, #0]
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	4b6f      	ldr	r3, [pc, #444]	; (8001c3c <main+0xb2c>)
 8001a80:	881b      	ldrh	r3, [r3, #0]
 8001a82:	9300      	str	r3, [sp, #0]
 8001a84:	460b      	mov	r3, r1
 8001a86:	496e      	ldr	r1, [pc, #440]	; (8001c40 <main+0xb30>)
 8001a88:	486f      	ldr	r0, [pc, #444]	; (8001c48 <main+0xb38>)
 8001a8a:	f003 fe07 	bl	800569c <siprintf>

	 	 		  HAL_Delay(250);
 8001a8e:	20fa      	movs	r0, #250	; 0xfa
 8001a90:	f000 fc24 	bl	80022dc <HAL_Delay>
	 	 	HAL_UART_Transmit(&huart2, (uint8_t*) "AT+CIFSR\r\n", 100, 100);
	 	 	HAL_UART_Receive(&huart2, (uint8_t*) rxdata, sizeof(rxdata), 100);
	 	 	HAL_Delay(100); */


	 	 	HAL_UART_Transmit(&huart2, (uint8_t*) "AT+CIPMUX=1\r\n", 100, 100);
 8001a94:	2364      	movs	r3, #100	; 0x64
 8001a96:	2264      	movs	r2, #100	; 0x64
 8001a98:	496c      	ldr	r1, [pc, #432]	; (8001c4c <main+0xb3c>)
 8001a9a:	486d      	ldr	r0, [pc, #436]	; (8001c50 <main+0xb40>)
 8001a9c:	f003 fbbf 	bl	800521e <HAL_UART_Transmit>
	 	 	HAL_UART_Receive(&huart2, (uint8_t*) rxdata, sizeof(rxdata), 100);
 8001aa0:	2364      	movs	r3, #100	; 0x64
 8001aa2:	2296      	movs	r2, #150	; 0x96
 8001aa4:	496b      	ldr	r1, [pc, #428]	; (8001c54 <main+0xb44>)
 8001aa6:	486a      	ldr	r0, [pc, #424]	; (8001c50 <main+0xb40>)
 8001aa8:	f003 fc4b 	bl	8005342 <HAL_UART_Receive>
	 	 	HAL_Delay(400);
 8001aac:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001ab0:	f000 fc14 	bl	80022dc <HAL_Delay>


	 	 	HAL_UART_Transmit(&huart2, (uint8_t*) "AT+CIPSERVER=1,80\r\n", 100, 100);
 8001ab4:	2364      	movs	r3, #100	; 0x64
 8001ab6:	2264      	movs	r2, #100	; 0x64
 8001ab8:	4967      	ldr	r1, [pc, #412]	; (8001c58 <main+0xb48>)
 8001aba:	4865      	ldr	r0, [pc, #404]	; (8001c50 <main+0xb40>)
 8001abc:	f003 fbaf 	bl	800521e <HAL_UART_Transmit>
	 	 	HAL_UART_Receive(&huart2, (uint8_t*) rxdata, sizeof(rxdata), 100);
 8001ac0:	2364      	movs	r3, #100	; 0x64
 8001ac2:	2296      	movs	r2, #150	; 0x96
 8001ac4:	4963      	ldr	r1, [pc, #396]	; (8001c54 <main+0xb44>)
 8001ac6:	4862      	ldr	r0, [pc, #392]	; (8001c50 <main+0xb40>)
 8001ac8:	f003 fc3b 	bl	8005342 <HAL_UART_Receive>
	 	 	HAL_Delay(400);
 8001acc:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001ad0:	f000 fc04 	bl	80022dc <HAL_Delay>


	 	 	HAL_UART_Transmit(&huart2, (uint8_t*) "AT+CIPSEND=0,31\r\n", 100, 100);
 8001ad4:	2364      	movs	r3, #100	; 0x64
 8001ad6:	2264      	movs	r2, #100	; 0x64
 8001ad8:	4960      	ldr	r1, [pc, #384]	; (8001c5c <main+0xb4c>)
 8001ada:	485d      	ldr	r0, [pc, #372]	; (8001c50 <main+0xb40>)
 8001adc:	f003 fb9f 	bl	800521e <HAL_UART_Transmit>
	 	    HAL_UART_Receive(&huart2, (uint8_t*) rxdata, sizeof(rxdata), 100);
 8001ae0:	2364      	movs	r3, #100	; 0x64
 8001ae2:	2296      	movs	r2, #150	; 0x96
 8001ae4:	495b      	ldr	r1, [pc, #364]	; (8001c54 <main+0xb44>)
 8001ae6:	485a      	ldr	r0, [pc, #360]	; (8001c50 <main+0xb40>)
 8001ae8:	f003 fc2b 	bl	8005342 <HAL_UART_Receive>
	 	 	HAL_Delay(400);
 8001aec:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001af0:	f000 fbf4 	bl	80022dc <HAL_Delay>
	 	 	sprintf(txdata1,"saat=%3d,dk=%3d,sn=%3d,temp=%3d",saat,dakika,saniye,temp);
 8001af4:	4b4c      	ldr	r3, [pc, #304]	; (8001c28 <main+0xb18>)
 8001af6:	881b      	ldrh	r3, [r3, #0]
 8001af8:	4619      	mov	r1, r3
 8001afa:	4b4c      	ldr	r3, [pc, #304]	; (8001c2c <main+0xb1c>)
 8001afc:	881b      	ldrh	r3, [r3, #0]
 8001afe:	4618      	mov	r0, r3
 8001b00:	4b4b      	ldr	r3, [pc, #300]	; (8001c30 <main+0xb20>)
 8001b02:	881b      	ldrh	r3, [r3, #0]
 8001b04:	461a      	mov	r2, r3
 8001b06:	4b56      	ldr	r3, [pc, #344]	; (8001c60 <main+0xb50>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	9301      	str	r3, [sp, #4]
 8001b0c:	9200      	str	r2, [sp, #0]
 8001b0e:	4603      	mov	r3, r0
 8001b10:	460a      	mov	r2, r1
 8001b12:	4954      	ldr	r1, [pc, #336]	; (8001c64 <main+0xb54>)
 8001b14:	4854      	ldr	r0, [pc, #336]	; (8001c68 <main+0xb58>)
 8001b16:	f003 fdc1 	bl	800569c <siprintf>
	 	 	HAL_UART_Transmit(&huart2, (uint8_t*) txdata1, 100, 100);
 8001b1a:	2364      	movs	r3, #100	; 0x64
 8001b1c:	2264      	movs	r2, #100	; 0x64
 8001b1e:	4952      	ldr	r1, [pc, #328]	; (8001c68 <main+0xb58>)
 8001b20:	484b      	ldr	r0, [pc, #300]	; (8001c50 <main+0xb40>)
 8001b22:	f003 fb7c 	bl	800521e <HAL_UART_Transmit>
	 	 	HAL_UART_Receive(&huart2, (uint8_t*) rxdata, sizeof(rxdata), 100);
 8001b26:	2364      	movs	r3, #100	; 0x64
 8001b28:	2296      	movs	r2, #150	; 0x96
 8001b2a:	494a      	ldr	r1, [pc, #296]	; (8001c54 <main+0xb44>)
 8001b2c:	4848      	ldr	r0, [pc, #288]	; (8001c50 <main+0xb40>)
 8001b2e:	f003 fc08 	bl	8005342 <HAL_UART_Receive>
	 	 	HAL_Delay(800);
 8001b32:	f44f 7048 	mov.w	r0, #800	; 0x320
 8001b36:	f000 fbd1 	bl	80022dc <HAL_Delay>


	 	 	HAL_UART_Transmit(&huart2, (uint8_t*) "AT+CIPSEND=0,29\r\n", 100, 100);
 8001b3a:	2364      	movs	r3, #100	; 0x64
 8001b3c:	2264      	movs	r2, #100	; 0x64
 8001b3e:	494b      	ldr	r1, [pc, #300]	; (8001c6c <main+0xb5c>)
 8001b40:	4843      	ldr	r0, [pc, #268]	; (8001c50 <main+0xb40>)
 8001b42:	f003 fb6c 	bl	800521e <HAL_UART_Transmit>
	 	 	HAL_UART_Receive(&huart2, (uint8_t*) rxdata, sizeof(rxdata), 100);
 8001b46:	2364      	movs	r3, #100	; 0x64
 8001b48:	2296      	movs	r2, #150	; 0x96
 8001b4a:	4942      	ldr	r1, [pc, #264]	; (8001c54 <main+0xb44>)
 8001b4c:	4840      	ldr	r0, [pc, #256]	; (8001c50 <main+0xb40>)
 8001b4e:	f003 fbf8 	bl	8005342 <HAL_UART_Receive>
	 	 	HAL_Delay(400);
 8001b52:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001b56:	f000 fbc1 	bl	80022dc <HAL_Delay>
	 	 	sprintf(txdata2,"accX=%3d,accY=%3d,accZ=%3d\r\n",acc_raw[0],acc_raw[1],acc_raw[2]);
 8001b5a:	4b45      	ldr	r3, [pc, #276]	; (8001c70 <main+0xb60>)
 8001b5c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b60:	461a      	mov	r2, r3
 8001b62:	4b43      	ldr	r3, [pc, #268]	; (8001c70 <main+0xb60>)
 8001b64:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001b68:	4619      	mov	r1, r3
 8001b6a:	4b41      	ldr	r3, [pc, #260]	; (8001c70 <main+0xb60>)
 8001b6c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001b70:	9300      	str	r3, [sp, #0]
 8001b72:	460b      	mov	r3, r1
 8001b74:	493f      	ldr	r1, [pc, #252]	; (8001c74 <main+0xb64>)
 8001b76:	4840      	ldr	r0, [pc, #256]	; (8001c78 <main+0xb68>)
 8001b78:	f003 fd90 	bl	800569c <siprintf>
	 	 	HAL_UART_Transmit(&huart2, (uint8_t*) txdata2, 100, 100);
 8001b7c:	2364      	movs	r3, #100	; 0x64
 8001b7e:	2264      	movs	r2, #100	; 0x64
 8001b80:	493d      	ldr	r1, [pc, #244]	; (8001c78 <main+0xb68>)
 8001b82:	4833      	ldr	r0, [pc, #204]	; (8001c50 <main+0xb40>)
 8001b84:	f003 fb4b 	bl	800521e <HAL_UART_Transmit>
	 	 	HAL_UART_Receive(&huart2, (uint8_t*) rxdata, sizeof(rxdata), 100);
 8001b88:	2364      	movs	r3, #100	; 0x64
 8001b8a:	2296      	movs	r2, #150	; 0x96
 8001b8c:	4931      	ldr	r1, [pc, #196]	; (8001c54 <main+0xb44>)
 8001b8e:	4830      	ldr	r0, [pc, #192]	; (8001c50 <main+0xb40>)
 8001b90:	f003 fbd7 	bl	8005342 <HAL_UART_Receive>
	 	 	HAL_Delay(800);
 8001b94:	f44f 7048 	mov.w	r0, #800	; 0x320
 8001b98:	f000 fba0 	bl	80022dc <HAL_Delay>


	 		HAL_UART_Transmit(&huart2, (uint8_t*) "AT+CIPSEND=0,32\r\n", 100, 100);
 8001b9c:	2364      	movs	r3, #100	; 0x64
 8001b9e:	2264      	movs	r2, #100	; 0x64
 8001ba0:	4936      	ldr	r1, [pc, #216]	; (8001c7c <main+0xb6c>)
 8001ba2:	482b      	ldr	r0, [pc, #172]	; (8001c50 <main+0xb40>)
 8001ba4:	f003 fb3b 	bl	800521e <HAL_UART_Transmit>
	 		HAL_UART_Receive(&huart2, (uint8_t*) rxdata, sizeof(rxdata), 100);
 8001ba8:	2364      	movs	r3, #100	; 0x64
 8001baa:	2296      	movs	r2, #150	; 0x96
 8001bac:	4929      	ldr	r1, [pc, #164]	; (8001c54 <main+0xb44>)
 8001bae:	4828      	ldr	r0, [pc, #160]	; (8001c50 <main+0xb40>)
 8001bb0:	f003 fbc7 	bl	8005342 <HAL_UART_Receive>
	 		HAL_Delay(400);
 8001bb4:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001bb8:	f000 fb90 	bl	80022dc <HAL_Delay>
	 		sprintf(txdata3,"gyroX=%3d,gyroY=%3d,gyroZ=%3d\r\n",gyro_raw[0],gyro_raw[1],gyro_raw[2]);
 8001bbc:	4b30      	ldr	r3, [pc, #192]	; (8001c80 <main+0xb70>)
 8001bbe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bc2:	461a      	mov	r2, r3
 8001bc4:	4b2e      	ldr	r3, [pc, #184]	; (8001c80 <main+0xb70>)
 8001bc6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001bca:	4619      	mov	r1, r3
 8001bcc:	4b2c      	ldr	r3, [pc, #176]	; (8001c80 <main+0xb70>)
 8001bce:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001bd2:	9300      	str	r3, [sp, #0]
 8001bd4:	460b      	mov	r3, r1
 8001bd6:	492b      	ldr	r1, [pc, #172]	; (8001c84 <main+0xb74>)
 8001bd8:	482b      	ldr	r0, [pc, #172]	; (8001c88 <main+0xb78>)
 8001bda:	f003 fd5f 	bl	800569c <siprintf>
	 		HAL_UART_Transmit(&huart2, (uint8_t*) txdata3, 100, 100);
 8001bde:	2364      	movs	r3, #100	; 0x64
 8001be0:	2264      	movs	r2, #100	; 0x64
 8001be2:	4929      	ldr	r1, [pc, #164]	; (8001c88 <main+0xb78>)
 8001be4:	481a      	ldr	r0, [pc, #104]	; (8001c50 <main+0xb40>)
 8001be6:	f003 fb1a 	bl	800521e <HAL_UART_Transmit>
	 		HAL_UART_Receive(&huart2, (uint8_t*) rxdata, sizeof(rxdata), 100);
 8001bea:	2364      	movs	r3, #100	; 0x64
 8001bec:	2296      	movs	r2, #150	; 0x96
 8001bee:	4919      	ldr	r1, [pc, #100]	; (8001c54 <main+0xb44>)
 8001bf0:	4817      	ldr	r0, [pc, #92]	; (8001c50 <main+0xb40>)
 8001bf2:	f003 fba6 	bl	8005342 <HAL_UART_Receive>
	 		HAL_Delay(800);
 8001bf6:	f44f 7048 	mov.w	r0, #800	; 0x320
 8001bfa:	f000 fb6f 	bl	80022dc <HAL_Delay>
	  prevtime1 = time1;
 8001bfe:	f7ff bb98 	b.w	8001332 <main+0x222>
 8001c02:	bf00      	nop
 8001c04:	200000e4 	.word	0x200000e4
 8001c08:	200000dc 	.word	0x200000dc
 8001c0c:	2000030c 	.word	0x2000030c
 8001c10:	20000160 	.word	0x20000160
 8001c14:	447a0000 	.word	0x447a0000
 8001c18:	457a0000 	.word	0x457a0000
 8001c1c:	20000148 	.word	0x20000148
 8001c20:	200002f8 	.word	0x200002f8
 8001c24:	200001b0 	.word	0x200001b0
 8001c28:	200002ea 	.word	0x200002ea
 8001c2c:	20000154 	.word	0x20000154
 8001c30:	20000152 	.word	0x20000152
 8001c34:	20000360 	.word	0x20000360
 8001c38:	200003ec 	.word	0x200003ec
 8001c3c:	20000388 	.word	0x20000388
 8001c40:	08007540 	.word	0x08007540
 8001c44:	20000330 	.word	0x20000330
 8001c48:	20000368 	.word	0x20000368
 8001c4c:	0800754c 	.word	0x0800754c
 8001c50:	20000390 	.word	0x20000390
 8001c54:	200001b8 	.word	0x200001b8
 8001c58:	0800755c 	.word	0x0800755c
 8001c5c:	08007570 	.word	0x08007570
 8001c60:	20000164 	.word	0x20000164
 8001c64:	08007584 	.word	0x08007584
 8001c68:	200000b4 	.word	0x200000b4
 8001c6c:	080075a4 	.word	0x080075a4
 8001c70:	20000158 	.word	0x20000158
 8001c74:	080075b8 	.word	0x080075b8
 8001c78:	20000190 	.word	0x20000190
 8001c7c:	080075d8 	.word	0x080075d8
 8001c80:	200000ac 	.word	0x200000ac
 8001c84:	080075ec 	.word	0x080075ec
 8001c88:	20000310 	.word	0x20000310

08001c8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b094      	sub	sp, #80	; 0x50
 8001c90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c92:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c96:	2228      	movs	r2, #40	; 0x28
 8001c98:	2100      	movs	r1, #0
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f003 fcf6 	bl	800568c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ca0:	f107 0314 	add.w	r3, r7, #20
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	601a      	str	r2, [r3, #0]
 8001ca8:	605a      	str	r2, [r3, #4]
 8001caa:	609a      	str	r2, [r3, #8]
 8001cac:	60da      	str	r2, [r3, #12]
 8001cae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001cb0:	1d3b      	adds	r3, r7, #4
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	601a      	str	r2, [r3, #0]
 8001cb6:	605a      	str	r2, [r3, #4]
 8001cb8:	609a      	str	r2, [r3, #8]
 8001cba:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001cbc:	2309      	movs	r3, #9
 8001cbe:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001cc0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001cc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001cd2:	2302      	movs	r3, #2
 8001cd4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001cd6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001cda:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001cdc:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001ce0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ce2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f001 ff06 	bl	8003af8 <HAL_RCC_OscConfig>
 8001cec:	4603      	mov	r3, r0
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d001      	beq.n	8001cf6 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8001cf2:	f000 f923 	bl	8001f3c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001cf6:	230f      	movs	r3, #15
 8001cf8:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001cfa:	2302      	movs	r3, #2
 8001cfc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001d02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d06:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001d0c:	f107 0314 	add.w	r3, r7, #20
 8001d10:	2102      	movs	r1, #2
 8001d12:	4618      	mov	r0, r3
 8001d14:	f002 f970 	bl	8003ff8 <HAL_RCC_ClockConfig>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d001      	beq.n	8001d22 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001d1e:	f000 f90d 	bl	8001f3c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001d22:	2301      	movs	r3, #1
 8001d24:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001d26:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d2a:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d2c:	1d3b      	adds	r3, r7, #4
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f002 fafc 	bl	800432c <HAL_RCCEx_PeriphCLKConfig>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d001      	beq.n	8001d3e <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8001d3a:	f000 f8ff 	bl	8001f3c <Error_Handler>
  }
}
 8001d3e:	bf00      	nop
 8001d40:	3750      	adds	r7, #80	; 0x50
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
	...

08001d48 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001d4c:	4b12      	ldr	r3, [pc, #72]	; (8001d98 <MX_I2C1_Init+0x50>)
 8001d4e:	4a13      	ldr	r2, [pc, #76]	; (8001d9c <MX_I2C1_Init+0x54>)
 8001d50:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001d52:	4b11      	ldr	r3, [pc, #68]	; (8001d98 <MX_I2C1_Init+0x50>)
 8001d54:	4a12      	ldr	r2, [pc, #72]	; (8001da0 <MX_I2C1_Init+0x58>)
 8001d56:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001d58:	4b0f      	ldr	r3, [pc, #60]	; (8001d98 <MX_I2C1_Init+0x50>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001d5e:	4b0e      	ldr	r3, [pc, #56]	; (8001d98 <MX_I2C1_Init+0x50>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d64:	4b0c      	ldr	r3, [pc, #48]	; (8001d98 <MX_I2C1_Init+0x50>)
 8001d66:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001d6a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d6c:	4b0a      	ldr	r3, [pc, #40]	; (8001d98 <MX_I2C1_Init+0x50>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001d72:	4b09      	ldr	r3, [pc, #36]	; (8001d98 <MX_I2C1_Init+0x50>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d78:	4b07      	ldr	r3, [pc, #28]	; (8001d98 <MX_I2C1_Init+0x50>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d7e:	4b06      	ldr	r3, [pc, #24]	; (8001d98 <MX_I2C1_Init+0x50>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001d84:	4804      	ldr	r0, [pc, #16]	; (8001d98 <MX_I2C1_Init+0x50>)
 8001d86:	f000 fd4d 	bl	8002824 <HAL_I2C_Init>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d001      	beq.n	8001d94 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001d90:	f000 f8d4 	bl	8001f3c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001d94:	bf00      	nop
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	200000f4 	.word	0x200000f4
 8001d9c:	40005400 	.word	0x40005400
 8001da0:	00061a80 	.word	0x00061a80

08001da4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b082      	sub	sp, #8
 8001da8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001daa:	1d3b      	adds	r3, r7, #4
 8001dac:	2100      	movs	r1, #0
 8001dae:	460a      	mov	r2, r1
 8001db0:	801a      	strh	r2, [r3, #0]
 8001db2:	460a      	mov	r2, r1
 8001db4:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 8001db6:	2300      	movs	r3, #0
 8001db8:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001dba:	4b1d      	ldr	r3, [pc, #116]	; (8001e30 <MX_RTC_Init+0x8c>)
 8001dbc:	4a1d      	ldr	r2, [pc, #116]	; (8001e34 <MX_RTC_Init+0x90>)
 8001dbe:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8001dc0:	4b1b      	ldr	r3, [pc, #108]	; (8001e30 <MX_RTC_Init+0x8c>)
 8001dc2:	f04f 32ff 	mov.w	r2, #4294967295
 8001dc6:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8001dc8:	4b19      	ldr	r3, [pc, #100]	; (8001e30 <MX_RTC_Init+0x8c>)
 8001dca:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001dce:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001dd0:	4817      	ldr	r0, [pc, #92]	; (8001e30 <MX_RTC_Init+0x8c>)
 8001dd2:	f002 fc25 	bl	8004620 <HAL_RTC_Init>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d001      	beq.n	8001de0 <MX_RTC_Init+0x3c>
  {
    Error_Handler();
 8001ddc:	f000 f8ae 	bl	8001f3c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x21;
 8001de0:	2321      	movs	r3, #33	; 0x21
 8001de2:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x25;
 8001de4:	2325      	movs	r3, #37	; 0x25
 8001de6:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8001de8:	2300      	movs	r3, #0
 8001dea:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001dec:	1d3b      	adds	r3, r7, #4
 8001dee:	2201      	movs	r2, #1
 8001df0:	4619      	mov	r1, r3
 8001df2:	480f      	ldr	r0, [pc, #60]	; (8001e30 <MX_RTC_Init+0x8c>)
 8001df4:	f002 fcaa 	bl	800474c <HAL_RTC_SetTime>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d001      	beq.n	8001e02 <MX_RTC_Init+0x5e>
  {
    Error_Handler();
 8001dfe:	f000 f89d 	bl	8001f3c <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_THURSDAY;
 8001e02:	2304      	movs	r3, #4
 8001e04:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_MAY;
 8001e06:	2305      	movs	r3, #5
 8001e08:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 0x12;
 8001e0a:	2312      	movs	r3, #18
 8001e0c:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0x21;
 8001e0e:	2321      	movs	r3, #33	; 0x21
 8001e10:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 8001e12:	463b      	mov	r3, r7
 8001e14:	2201      	movs	r2, #1
 8001e16:	4619      	mov	r1, r3
 8001e18:	4805      	ldr	r0, [pc, #20]	; (8001e30 <MX_RTC_Init+0x8c>)
 8001e1a:	f002 fe07 	bl	8004a2c <HAL_RTC_SetDate>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d001      	beq.n	8001e28 <MX_RTC_Init+0x84>
  {
    Error_Handler();
 8001e24:	f000 f88a 	bl	8001f3c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001e28:	bf00      	nop
 8001e2a:	3708      	adds	r7, #8
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	200002f8 	.word	0x200002f8
 8001e34:	40002800 	.word	0x40002800

08001e38 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001e3c:	4b11      	ldr	r3, [pc, #68]	; (8001e84 <MX_USART2_UART_Init+0x4c>)
 8001e3e:	4a12      	ldr	r2, [pc, #72]	; (8001e88 <MX_USART2_UART_Init+0x50>)
 8001e40:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001e42:	4b10      	ldr	r3, [pc, #64]	; (8001e84 <MX_USART2_UART_Init+0x4c>)
 8001e44:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e48:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001e4a:	4b0e      	ldr	r3, [pc, #56]	; (8001e84 <MX_USART2_UART_Init+0x4c>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001e50:	4b0c      	ldr	r3, [pc, #48]	; (8001e84 <MX_USART2_UART_Init+0x4c>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001e56:	4b0b      	ldr	r3, [pc, #44]	; (8001e84 <MX_USART2_UART_Init+0x4c>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001e5c:	4b09      	ldr	r3, [pc, #36]	; (8001e84 <MX_USART2_UART_Init+0x4c>)
 8001e5e:	220c      	movs	r2, #12
 8001e60:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e62:	4b08      	ldr	r3, [pc, #32]	; (8001e84 <MX_USART2_UART_Init+0x4c>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e68:	4b06      	ldr	r3, [pc, #24]	; (8001e84 <MX_USART2_UART_Init+0x4c>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001e6e:	4805      	ldr	r0, [pc, #20]	; (8001e84 <MX_USART2_UART_Init+0x4c>)
 8001e70:	f003 f988 	bl	8005184 <HAL_UART_Init>
 8001e74:	4603      	mov	r3, r0
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d001      	beq.n	8001e7e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001e7a:	f000 f85f 	bl	8001f3c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001e7e:	bf00      	nop
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	20000390 	.word	0x20000390
 8001e88:	40004400 	.word	0x40004400

08001e8c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b088      	sub	sp, #32
 8001e90:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e92:	f107 0310 	add.w	r3, r7, #16
 8001e96:	2200      	movs	r2, #0
 8001e98:	601a      	str	r2, [r3, #0]
 8001e9a:	605a      	str	r2, [r3, #4]
 8001e9c:	609a      	str	r2, [r3, #8]
 8001e9e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ea0:	4b24      	ldr	r3, [pc, #144]	; (8001f34 <MX_GPIO_Init+0xa8>)
 8001ea2:	699b      	ldr	r3, [r3, #24]
 8001ea4:	4a23      	ldr	r2, [pc, #140]	; (8001f34 <MX_GPIO_Init+0xa8>)
 8001ea6:	f043 0310 	orr.w	r3, r3, #16
 8001eaa:	6193      	str	r3, [r2, #24]
 8001eac:	4b21      	ldr	r3, [pc, #132]	; (8001f34 <MX_GPIO_Init+0xa8>)
 8001eae:	699b      	ldr	r3, [r3, #24]
 8001eb0:	f003 0310 	and.w	r3, r3, #16
 8001eb4:	60fb      	str	r3, [r7, #12]
 8001eb6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001eb8:	4b1e      	ldr	r3, [pc, #120]	; (8001f34 <MX_GPIO_Init+0xa8>)
 8001eba:	699b      	ldr	r3, [r3, #24]
 8001ebc:	4a1d      	ldr	r2, [pc, #116]	; (8001f34 <MX_GPIO_Init+0xa8>)
 8001ebe:	f043 0320 	orr.w	r3, r3, #32
 8001ec2:	6193      	str	r3, [r2, #24]
 8001ec4:	4b1b      	ldr	r3, [pc, #108]	; (8001f34 <MX_GPIO_Init+0xa8>)
 8001ec6:	699b      	ldr	r3, [r3, #24]
 8001ec8:	f003 0320 	and.w	r3, r3, #32
 8001ecc:	60bb      	str	r3, [r7, #8]
 8001ece:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ed0:	4b18      	ldr	r3, [pc, #96]	; (8001f34 <MX_GPIO_Init+0xa8>)
 8001ed2:	699b      	ldr	r3, [r3, #24]
 8001ed4:	4a17      	ldr	r2, [pc, #92]	; (8001f34 <MX_GPIO_Init+0xa8>)
 8001ed6:	f043 0304 	orr.w	r3, r3, #4
 8001eda:	6193      	str	r3, [r2, #24]
 8001edc:	4b15      	ldr	r3, [pc, #84]	; (8001f34 <MX_GPIO_Init+0xa8>)
 8001ede:	699b      	ldr	r3, [r3, #24]
 8001ee0:	f003 0304 	and.w	r3, r3, #4
 8001ee4:	607b      	str	r3, [r7, #4]
 8001ee6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ee8:	4b12      	ldr	r3, [pc, #72]	; (8001f34 <MX_GPIO_Init+0xa8>)
 8001eea:	699b      	ldr	r3, [r3, #24]
 8001eec:	4a11      	ldr	r2, [pc, #68]	; (8001f34 <MX_GPIO_Init+0xa8>)
 8001eee:	f043 0308 	orr.w	r3, r3, #8
 8001ef2:	6193      	str	r3, [r2, #24]
 8001ef4:	4b0f      	ldr	r3, [pc, #60]	; (8001f34 <MX_GPIO_Init+0xa8>)
 8001ef6:	699b      	ldr	r3, [r3, #24]
 8001ef8:	f003 0308 	and.w	r3, r3, #8
 8001efc:	603b      	str	r3, [r7, #0]
 8001efe:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001f00:	2200      	movs	r2, #0
 8001f02:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f06:	480c      	ldr	r0, [pc, #48]	; (8001f38 <MX_GPIO_Init+0xac>)
 8001f08:	f000 fc74 	bl	80027f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001f0c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f10:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f12:	2301      	movs	r3, #1
 8001f14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f16:	2300      	movs	r3, #0
 8001f18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f1a:	2302      	movs	r3, #2
 8001f1c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f1e:	f107 0310 	add.w	r3, r7, #16
 8001f22:	4619      	mov	r1, r3
 8001f24:	4804      	ldr	r0, [pc, #16]	; (8001f38 <MX_GPIO_Init+0xac>)
 8001f26:	f000 fae1 	bl	80024ec <HAL_GPIO_Init>

}
 8001f2a:	bf00      	nop
 8001f2c:	3720      	adds	r7, #32
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	40021000 	.word	0x40021000
 8001f38:	40011000 	.word	0x40011000

08001f3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f40:	b672      	cpsid	i
}
 8001f42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f44:	e7fe      	b.n	8001f44 <Error_Handler+0x8>
	...

08001f48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b085      	sub	sp, #20
 8001f4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001f4e:	4b15      	ldr	r3, [pc, #84]	; (8001fa4 <HAL_MspInit+0x5c>)
 8001f50:	699b      	ldr	r3, [r3, #24]
 8001f52:	4a14      	ldr	r2, [pc, #80]	; (8001fa4 <HAL_MspInit+0x5c>)
 8001f54:	f043 0301 	orr.w	r3, r3, #1
 8001f58:	6193      	str	r3, [r2, #24]
 8001f5a:	4b12      	ldr	r3, [pc, #72]	; (8001fa4 <HAL_MspInit+0x5c>)
 8001f5c:	699b      	ldr	r3, [r3, #24]
 8001f5e:	f003 0301 	and.w	r3, r3, #1
 8001f62:	60bb      	str	r3, [r7, #8]
 8001f64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f66:	4b0f      	ldr	r3, [pc, #60]	; (8001fa4 <HAL_MspInit+0x5c>)
 8001f68:	69db      	ldr	r3, [r3, #28]
 8001f6a:	4a0e      	ldr	r2, [pc, #56]	; (8001fa4 <HAL_MspInit+0x5c>)
 8001f6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f70:	61d3      	str	r3, [r2, #28]
 8001f72:	4b0c      	ldr	r3, [pc, #48]	; (8001fa4 <HAL_MspInit+0x5c>)
 8001f74:	69db      	ldr	r3, [r3, #28]
 8001f76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f7a:	607b      	str	r3, [r7, #4]
 8001f7c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001f7e:	4b0a      	ldr	r3, [pc, #40]	; (8001fa8 <HAL_MspInit+0x60>)
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	60fb      	str	r3, [r7, #12]
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001f8a:	60fb      	str	r3, [r7, #12]
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001f92:	60fb      	str	r3, [r7, #12]
 8001f94:	4a04      	ldr	r2, [pc, #16]	; (8001fa8 <HAL_MspInit+0x60>)
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f9a:	bf00      	nop
 8001f9c:	3714      	adds	r7, #20
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bc80      	pop	{r7}
 8001fa2:	4770      	bx	lr
 8001fa4:	40021000 	.word	0x40021000
 8001fa8:	40010000 	.word	0x40010000

08001fac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b088      	sub	sp, #32
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fb4:	f107 0310 	add.w	r3, r7, #16
 8001fb8:	2200      	movs	r2, #0
 8001fba:	601a      	str	r2, [r3, #0]
 8001fbc:	605a      	str	r2, [r3, #4]
 8001fbe:	609a      	str	r2, [r3, #8]
 8001fc0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a15      	ldr	r2, [pc, #84]	; (800201c <HAL_I2C_MspInit+0x70>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d123      	bne.n	8002014 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fcc:	4b14      	ldr	r3, [pc, #80]	; (8002020 <HAL_I2C_MspInit+0x74>)
 8001fce:	699b      	ldr	r3, [r3, #24]
 8001fd0:	4a13      	ldr	r2, [pc, #76]	; (8002020 <HAL_I2C_MspInit+0x74>)
 8001fd2:	f043 0308 	orr.w	r3, r3, #8
 8001fd6:	6193      	str	r3, [r2, #24]
 8001fd8:	4b11      	ldr	r3, [pc, #68]	; (8002020 <HAL_I2C_MspInit+0x74>)
 8001fda:	699b      	ldr	r3, [r3, #24]
 8001fdc:	f003 0308 	and.w	r3, r3, #8
 8001fe0:	60fb      	str	r3, [r7, #12]
 8001fe2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001fe4:	23c0      	movs	r3, #192	; 0xc0
 8001fe6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001fe8:	2312      	movs	r3, #18
 8001fea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001fec:	2303      	movs	r3, #3
 8001fee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ff0:	f107 0310 	add.w	r3, r7, #16
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	480b      	ldr	r0, [pc, #44]	; (8002024 <HAL_I2C_MspInit+0x78>)
 8001ff8:	f000 fa78 	bl	80024ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ffc:	4b08      	ldr	r3, [pc, #32]	; (8002020 <HAL_I2C_MspInit+0x74>)
 8001ffe:	69db      	ldr	r3, [r3, #28]
 8002000:	4a07      	ldr	r2, [pc, #28]	; (8002020 <HAL_I2C_MspInit+0x74>)
 8002002:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002006:	61d3      	str	r3, [r2, #28]
 8002008:	4b05      	ldr	r3, [pc, #20]	; (8002020 <HAL_I2C_MspInit+0x74>)
 800200a:	69db      	ldr	r3, [r3, #28]
 800200c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002010:	60bb      	str	r3, [r7, #8]
 8002012:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002014:	bf00      	nop
 8002016:	3720      	adds	r7, #32
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}
 800201c:	40005400 	.word	0x40005400
 8002020:	40021000 	.word	0x40021000
 8002024:	40010c00 	.word	0x40010c00

08002028 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b084      	sub	sp, #16
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a0b      	ldr	r2, [pc, #44]	; (8002064 <HAL_RTC_MspInit+0x3c>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d110      	bne.n	800205c <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 800203a:	f001 fd51 	bl	8003ae0 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 800203e:	4b0a      	ldr	r3, [pc, #40]	; (8002068 <HAL_RTC_MspInit+0x40>)
 8002040:	69db      	ldr	r3, [r3, #28]
 8002042:	4a09      	ldr	r2, [pc, #36]	; (8002068 <HAL_RTC_MspInit+0x40>)
 8002044:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002048:	61d3      	str	r3, [r2, #28]
 800204a:	4b07      	ldr	r3, [pc, #28]	; (8002068 <HAL_RTC_MspInit+0x40>)
 800204c:	69db      	ldr	r3, [r3, #28]
 800204e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002052:	60fb      	str	r3, [r7, #12]
 8002054:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002056:	4b05      	ldr	r3, [pc, #20]	; (800206c <HAL_RTC_MspInit+0x44>)
 8002058:	2201      	movs	r2, #1
 800205a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800205c:	bf00      	nop
 800205e:	3710      	adds	r7, #16
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}
 8002064:	40002800 	.word	0x40002800
 8002068:	40021000 	.word	0x40021000
 800206c:	4242043c 	.word	0x4242043c

08002070 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b088      	sub	sp, #32
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002078:	f107 0310 	add.w	r3, r7, #16
 800207c:	2200      	movs	r2, #0
 800207e:	601a      	str	r2, [r3, #0]
 8002080:	605a      	str	r2, [r3, #4]
 8002082:	609a      	str	r2, [r3, #8]
 8002084:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a1b      	ldr	r2, [pc, #108]	; (80020f8 <HAL_UART_MspInit+0x88>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d12f      	bne.n	80020f0 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002090:	4b1a      	ldr	r3, [pc, #104]	; (80020fc <HAL_UART_MspInit+0x8c>)
 8002092:	69db      	ldr	r3, [r3, #28]
 8002094:	4a19      	ldr	r2, [pc, #100]	; (80020fc <HAL_UART_MspInit+0x8c>)
 8002096:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800209a:	61d3      	str	r3, [r2, #28]
 800209c:	4b17      	ldr	r3, [pc, #92]	; (80020fc <HAL_UART_MspInit+0x8c>)
 800209e:	69db      	ldr	r3, [r3, #28]
 80020a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020a4:	60fb      	str	r3, [r7, #12]
 80020a6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020a8:	4b14      	ldr	r3, [pc, #80]	; (80020fc <HAL_UART_MspInit+0x8c>)
 80020aa:	699b      	ldr	r3, [r3, #24]
 80020ac:	4a13      	ldr	r2, [pc, #76]	; (80020fc <HAL_UART_MspInit+0x8c>)
 80020ae:	f043 0304 	orr.w	r3, r3, #4
 80020b2:	6193      	str	r3, [r2, #24]
 80020b4:	4b11      	ldr	r3, [pc, #68]	; (80020fc <HAL_UART_MspInit+0x8c>)
 80020b6:	699b      	ldr	r3, [r3, #24]
 80020b8:	f003 0304 	and.w	r3, r3, #4
 80020bc:	60bb      	str	r3, [r7, #8]
 80020be:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80020c0:	2304      	movs	r3, #4
 80020c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020c4:	2302      	movs	r3, #2
 80020c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80020c8:	2303      	movs	r3, #3
 80020ca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020cc:	f107 0310 	add.w	r3, r7, #16
 80020d0:	4619      	mov	r1, r3
 80020d2:	480b      	ldr	r0, [pc, #44]	; (8002100 <HAL_UART_MspInit+0x90>)
 80020d4:	f000 fa0a 	bl	80024ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80020d8:	2308      	movs	r3, #8
 80020da:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020dc:	2300      	movs	r3, #0
 80020de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e0:	2300      	movs	r3, #0
 80020e2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020e4:	f107 0310 	add.w	r3, r7, #16
 80020e8:	4619      	mov	r1, r3
 80020ea:	4805      	ldr	r0, [pc, #20]	; (8002100 <HAL_UART_MspInit+0x90>)
 80020ec:	f000 f9fe 	bl	80024ec <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80020f0:	bf00      	nop
 80020f2:	3720      	adds	r7, #32
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	40004400 	.word	0x40004400
 80020fc:	40021000 	.word	0x40021000
 8002100:	40010800 	.word	0x40010800

08002104 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002104:	b480      	push	{r7}
 8002106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002108:	e7fe      	b.n	8002108 <NMI_Handler+0x4>

0800210a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800210a:	b480      	push	{r7}
 800210c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800210e:	e7fe      	b.n	800210e <HardFault_Handler+0x4>

08002110 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002110:	b480      	push	{r7}
 8002112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002114:	e7fe      	b.n	8002114 <MemManage_Handler+0x4>

08002116 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002116:	b480      	push	{r7}
 8002118:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800211a:	e7fe      	b.n	800211a <BusFault_Handler+0x4>

0800211c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800211c:	b480      	push	{r7}
 800211e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002120:	e7fe      	b.n	8002120 <UsageFault_Handler+0x4>

08002122 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002122:	b480      	push	{r7}
 8002124:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002126:	bf00      	nop
 8002128:	46bd      	mov	sp, r7
 800212a:	bc80      	pop	{r7}
 800212c:	4770      	bx	lr

0800212e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800212e:	b480      	push	{r7}
 8002130:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002132:	bf00      	nop
 8002134:	46bd      	mov	sp, r7
 8002136:	bc80      	pop	{r7}
 8002138:	4770      	bx	lr

0800213a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800213a:	b480      	push	{r7}
 800213c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800213e:	bf00      	nop
 8002140:	46bd      	mov	sp, r7
 8002142:	bc80      	pop	{r7}
 8002144:	4770      	bx	lr

08002146 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002146:	b580      	push	{r7, lr}
 8002148:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800214a:	f000 f8ab 	bl	80022a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800214e:	bf00      	nop
 8002150:	bd80      	pop	{r7, pc}
	...

08002154 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b086      	sub	sp, #24
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800215c:	4a14      	ldr	r2, [pc, #80]	; (80021b0 <_sbrk+0x5c>)
 800215e:	4b15      	ldr	r3, [pc, #84]	; (80021b4 <_sbrk+0x60>)
 8002160:	1ad3      	subs	r3, r2, r3
 8002162:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002168:	4b13      	ldr	r3, [pc, #76]	; (80021b8 <_sbrk+0x64>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d102      	bne.n	8002176 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002170:	4b11      	ldr	r3, [pc, #68]	; (80021b8 <_sbrk+0x64>)
 8002172:	4a12      	ldr	r2, [pc, #72]	; (80021bc <_sbrk+0x68>)
 8002174:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002176:	4b10      	ldr	r3, [pc, #64]	; (80021b8 <_sbrk+0x64>)
 8002178:	681a      	ldr	r2, [r3, #0]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	4413      	add	r3, r2
 800217e:	693a      	ldr	r2, [r7, #16]
 8002180:	429a      	cmp	r2, r3
 8002182:	d207      	bcs.n	8002194 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002184:	f003 fa58 	bl	8005638 <__errno>
 8002188:	4603      	mov	r3, r0
 800218a:	220c      	movs	r2, #12
 800218c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800218e:	f04f 33ff 	mov.w	r3, #4294967295
 8002192:	e009      	b.n	80021a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002194:	4b08      	ldr	r3, [pc, #32]	; (80021b8 <_sbrk+0x64>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800219a:	4b07      	ldr	r3, [pc, #28]	; (80021b8 <_sbrk+0x64>)
 800219c:	681a      	ldr	r2, [r3, #0]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	4413      	add	r3, r2
 80021a2:	4a05      	ldr	r2, [pc, #20]	; (80021b8 <_sbrk+0x64>)
 80021a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021a6:	68fb      	ldr	r3, [r7, #12]
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	3718      	adds	r7, #24
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}
 80021b0:	20005000 	.word	0x20005000
 80021b4:	00000400 	.word	0x00000400
 80021b8:	20000090 	.word	0x20000090
 80021bc:	20000408 	.word	0x20000408

080021c0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80021c0:	b480      	push	{r7}
 80021c2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021c4:	bf00      	nop
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bc80      	pop	{r7}
 80021ca:	4770      	bx	lr

080021cc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80021cc:	480c      	ldr	r0, [pc, #48]	; (8002200 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80021ce:	490d      	ldr	r1, [pc, #52]	; (8002204 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80021d0:	4a0d      	ldr	r2, [pc, #52]	; (8002208 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80021d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021d4:	e002      	b.n	80021dc <LoopCopyDataInit>

080021d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021da:	3304      	adds	r3, #4

080021dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021e0:	d3f9      	bcc.n	80021d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021e2:	4a0a      	ldr	r2, [pc, #40]	; (800220c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80021e4:	4c0a      	ldr	r4, [pc, #40]	; (8002210 <LoopFillZerobss+0x22>)
  movs r3, #0
 80021e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021e8:	e001      	b.n	80021ee <LoopFillZerobss>

080021ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021ec:	3204      	adds	r2, #4

080021ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021f0:	d3fb      	bcc.n	80021ea <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80021f2:	f7ff ffe5 	bl	80021c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80021f6:	f003 fa25 	bl	8005644 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80021fa:	f7fe ff89 	bl	8001110 <main>
  bx lr
 80021fe:	4770      	bx	lr
  ldr r0, =_sdata
 8002200:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002204:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8002208:	08007858 	.word	0x08007858
  ldr r2, =_sbss
 800220c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8002210:	20000404 	.word	0x20000404

08002214 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002214:	e7fe      	b.n	8002214 <ADC1_2_IRQHandler>
	...

08002218 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800221c:	4b08      	ldr	r3, [pc, #32]	; (8002240 <HAL_Init+0x28>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a07      	ldr	r2, [pc, #28]	; (8002240 <HAL_Init+0x28>)
 8002222:	f043 0310 	orr.w	r3, r3, #16
 8002226:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002228:	2003      	movs	r0, #3
 800222a:	f000 f92b 	bl	8002484 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800222e:	200f      	movs	r0, #15
 8002230:	f000 f808 	bl	8002244 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002234:	f7ff fe88 	bl	8001f48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002238:	2300      	movs	r3, #0
}
 800223a:	4618      	mov	r0, r3
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	40022000 	.word	0x40022000

08002244 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b082      	sub	sp, #8
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800224c:	4b12      	ldr	r3, [pc, #72]	; (8002298 <HAL_InitTick+0x54>)
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	4b12      	ldr	r3, [pc, #72]	; (800229c <HAL_InitTick+0x58>)
 8002252:	781b      	ldrb	r3, [r3, #0]
 8002254:	4619      	mov	r1, r3
 8002256:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800225a:	fbb3 f3f1 	udiv	r3, r3, r1
 800225e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002262:	4618      	mov	r0, r3
 8002264:	f000 f935 	bl	80024d2 <HAL_SYSTICK_Config>
 8002268:	4603      	mov	r3, r0
 800226a:	2b00      	cmp	r3, #0
 800226c:	d001      	beq.n	8002272 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800226e:	2301      	movs	r3, #1
 8002270:	e00e      	b.n	8002290 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2b0f      	cmp	r3, #15
 8002276:	d80a      	bhi.n	800228e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002278:	2200      	movs	r2, #0
 800227a:	6879      	ldr	r1, [r7, #4]
 800227c:	f04f 30ff 	mov.w	r0, #4294967295
 8002280:	f000 f90b 	bl	800249a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002284:	4a06      	ldr	r2, [pc, #24]	; (80022a0 <HAL_InitTick+0x5c>)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800228a:	2300      	movs	r3, #0
 800228c:	e000      	b.n	8002290 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
}
 8002290:	4618      	mov	r0, r3
 8002292:	3708      	adds	r7, #8
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}
 8002298:	20000000 	.word	0x20000000
 800229c:	20000008 	.word	0x20000008
 80022a0:	20000004 	.word	0x20000004

080022a4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022a4:	b480      	push	{r7}
 80022a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022a8:	4b05      	ldr	r3, [pc, #20]	; (80022c0 <HAL_IncTick+0x1c>)
 80022aa:	781b      	ldrb	r3, [r3, #0]
 80022ac:	461a      	mov	r2, r3
 80022ae:	4b05      	ldr	r3, [pc, #20]	; (80022c4 <HAL_IncTick+0x20>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4413      	add	r3, r2
 80022b4:	4a03      	ldr	r2, [pc, #12]	; (80022c4 <HAL_IncTick+0x20>)
 80022b6:	6013      	str	r3, [r2, #0]
}
 80022b8:	bf00      	nop
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bc80      	pop	{r7}
 80022be:	4770      	bx	lr
 80022c0:	20000008 	.word	0x20000008
 80022c4:	200003f0 	.word	0x200003f0

080022c8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022c8:	b480      	push	{r7}
 80022ca:	af00      	add	r7, sp, #0
  return uwTick;
 80022cc:	4b02      	ldr	r3, [pc, #8]	; (80022d8 <HAL_GetTick+0x10>)
 80022ce:	681b      	ldr	r3, [r3, #0]
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bc80      	pop	{r7}
 80022d6:	4770      	bx	lr
 80022d8:	200003f0 	.word	0x200003f0

080022dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b084      	sub	sp, #16
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022e4:	f7ff fff0 	bl	80022c8 <HAL_GetTick>
 80022e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022f4:	d005      	beq.n	8002302 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022f6:	4b0a      	ldr	r3, [pc, #40]	; (8002320 <HAL_Delay+0x44>)
 80022f8:	781b      	ldrb	r3, [r3, #0]
 80022fa:	461a      	mov	r2, r3
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	4413      	add	r3, r2
 8002300:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002302:	bf00      	nop
 8002304:	f7ff ffe0 	bl	80022c8 <HAL_GetTick>
 8002308:	4602      	mov	r2, r0
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	1ad3      	subs	r3, r2, r3
 800230e:	68fa      	ldr	r2, [r7, #12]
 8002310:	429a      	cmp	r2, r3
 8002312:	d8f7      	bhi.n	8002304 <HAL_Delay+0x28>
  {
  }
}
 8002314:	bf00      	nop
 8002316:	bf00      	nop
 8002318:	3710      	adds	r7, #16
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	20000008 	.word	0x20000008

08002324 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002324:	b480      	push	{r7}
 8002326:	b085      	sub	sp, #20
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	f003 0307 	and.w	r3, r3, #7
 8002332:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002334:	4b0c      	ldr	r3, [pc, #48]	; (8002368 <__NVIC_SetPriorityGrouping+0x44>)
 8002336:	68db      	ldr	r3, [r3, #12]
 8002338:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800233a:	68ba      	ldr	r2, [r7, #8]
 800233c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002340:	4013      	ands	r3, r2
 8002342:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800234c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002350:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002354:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002356:	4a04      	ldr	r2, [pc, #16]	; (8002368 <__NVIC_SetPriorityGrouping+0x44>)
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	60d3      	str	r3, [r2, #12]
}
 800235c:	bf00      	nop
 800235e:	3714      	adds	r7, #20
 8002360:	46bd      	mov	sp, r7
 8002362:	bc80      	pop	{r7}
 8002364:	4770      	bx	lr
 8002366:	bf00      	nop
 8002368:	e000ed00 	.word	0xe000ed00

0800236c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800236c:	b480      	push	{r7}
 800236e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002370:	4b04      	ldr	r3, [pc, #16]	; (8002384 <__NVIC_GetPriorityGrouping+0x18>)
 8002372:	68db      	ldr	r3, [r3, #12]
 8002374:	0a1b      	lsrs	r3, r3, #8
 8002376:	f003 0307 	and.w	r3, r3, #7
}
 800237a:	4618      	mov	r0, r3
 800237c:	46bd      	mov	sp, r7
 800237e:	bc80      	pop	{r7}
 8002380:	4770      	bx	lr
 8002382:	bf00      	nop
 8002384:	e000ed00 	.word	0xe000ed00

08002388 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002388:	b480      	push	{r7}
 800238a:	b083      	sub	sp, #12
 800238c:	af00      	add	r7, sp, #0
 800238e:	4603      	mov	r3, r0
 8002390:	6039      	str	r1, [r7, #0]
 8002392:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002394:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002398:	2b00      	cmp	r3, #0
 800239a:	db0a      	blt.n	80023b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	b2da      	uxtb	r2, r3
 80023a0:	490c      	ldr	r1, [pc, #48]	; (80023d4 <__NVIC_SetPriority+0x4c>)
 80023a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023a6:	0112      	lsls	r2, r2, #4
 80023a8:	b2d2      	uxtb	r2, r2
 80023aa:	440b      	add	r3, r1
 80023ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023b0:	e00a      	b.n	80023c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	b2da      	uxtb	r2, r3
 80023b6:	4908      	ldr	r1, [pc, #32]	; (80023d8 <__NVIC_SetPriority+0x50>)
 80023b8:	79fb      	ldrb	r3, [r7, #7]
 80023ba:	f003 030f 	and.w	r3, r3, #15
 80023be:	3b04      	subs	r3, #4
 80023c0:	0112      	lsls	r2, r2, #4
 80023c2:	b2d2      	uxtb	r2, r2
 80023c4:	440b      	add	r3, r1
 80023c6:	761a      	strb	r2, [r3, #24]
}
 80023c8:	bf00      	nop
 80023ca:	370c      	adds	r7, #12
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bc80      	pop	{r7}
 80023d0:	4770      	bx	lr
 80023d2:	bf00      	nop
 80023d4:	e000e100 	.word	0xe000e100
 80023d8:	e000ed00 	.word	0xe000ed00

080023dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023dc:	b480      	push	{r7}
 80023de:	b089      	sub	sp, #36	; 0x24
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	60f8      	str	r0, [r7, #12]
 80023e4:	60b9      	str	r1, [r7, #8]
 80023e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	f003 0307 	and.w	r3, r3, #7
 80023ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023f0:	69fb      	ldr	r3, [r7, #28]
 80023f2:	f1c3 0307 	rsb	r3, r3, #7
 80023f6:	2b04      	cmp	r3, #4
 80023f8:	bf28      	it	cs
 80023fa:	2304      	movcs	r3, #4
 80023fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023fe:	69fb      	ldr	r3, [r7, #28]
 8002400:	3304      	adds	r3, #4
 8002402:	2b06      	cmp	r3, #6
 8002404:	d902      	bls.n	800240c <NVIC_EncodePriority+0x30>
 8002406:	69fb      	ldr	r3, [r7, #28]
 8002408:	3b03      	subs	r3, #3
 800240a:	e000      	b.n	800240e <NVIC_EncodePriority+0x32>
 800240c:	2300      	movs	r3, #0
 800240e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002410:	f04f 32ff 	mov.w	r2, #4294967295
 8002414:	69bb      	ldr	r3, [r7, #24]
 8002416:	fa02 f303 	lsl.w	r3, r2, r3
 800241a:	43da      	mvns	r2, r3
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	401a      	ands	r2, r3
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002424:	f04f 31ff 	mov.w	r1, #4294967295
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	fa01 f303 	lsl.w	r3, r1, r3
 800242e:	43d9      	mvns	r1, r3
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002434:	4313      	orrs	r3, r2
         );
}
 8002436:	4618      	mov	r0, r3
 8002438:	3724      	adds	r7, #36	; 0x24
 800243a:	46bd      	mov	sp, r7
 800243c:	bc80      	pop	{r7}
 800243e:	4770      	bx	lr

08002440 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b082      	sub	sp, #8
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	3b01      	subs	r3, #1
 800244c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002450:	d301      	bcc.n	8002456 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002452:	2301      	movs	r3, #1
 8002454:	e00f      	b.n	8002476 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002456:	4a0a      	ldr	r2, [pc, #40]	; (8002480 <SysTick_Config+0x40>)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	3b01      	subs	r3, #1
 800245c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800245e:	210f      	movs	r1, #15
 8002460:	f04f 30ff 	mov.w	r0, #4294967295
 8002464:	f7ff ff90 	bl	8002388 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002468:	4b05      	ldr	r3, [pc, #20]	; (8002480 <SysTick_Config+0x40>)
 800246a:	2200      	movs	r2, #0
 800246c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800246e:	4b04      	ldr	r3, [pc, #16]	; (8002480 <SysTick_Config+0x40>)
 8002470:	2207      	movs	r2, #7
 8002472:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002474:	2300      	movs	r3, #0
}
 8002476:	4618      	mov	r0, r3
 8002478:	3708      	adds	r7, #8
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	e000e010 	.word	0xe000e010

08002484 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b082      	sub	sp, #8
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800248c:	6878      	ldr	r0, [r7, #4]
 800248e:	f7ff ff49 	bl	8002324 <__NVIC_SetPriorityGrouping>
}
 8002492:	bf00      	nop
 8002494:	3708      	adds	r7, #8
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}

0800249a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800249a:	b580      	push	{r7, lr}
 800249c:	b086      	sub	sp, #24
 800249e:	af00      	add	r7, sp, #0
 80024a0:	4603      	mov	r3, r0
 80024a2:	60b9      	str	r1, [r7, #8]
 80024a4:	607a      	str	r2, [r7, #4]
 80024a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80024a8:	2300      	movs	r3, #0
 80024aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024ac:	f7ff ff5e 	bl	800236c <__NVIC_GetPriorityGrouping>
 80024b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024b2:	687a      	ldr	r2, [r7, #4]
 80024b4:	68b9      	ldr	r1, [r7, #8]
 80024b6:	6978      	ldr	r0, [r7, #20]
 80024b8:	f7ff ff90 	bl	80023dc <NVIC_EncodePriority>
 80024bc:	4602      	mov	r2, r0
 80024be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024c2:	4611      	mov	r1, r2
 80024c4:	4618      	mov	r0, r3
 80024c6:	f7ff ff5f 	bl	8002388 <__NVIC_SetPriority>
}
 80024ca:	bf00      	nop
 80024cc:	3718      	adds	r7, #24
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}

080024d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024d2:	b580      	push	{r7, lr}
 80024d4:	b082      	sub	sp, #8
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024da:	6878      	ldr	r0, [r7, #4]
 80024dc:	f7ff ffb0 	bl	8002440 <SysTick_Config>
 80024e0:	4603      	mov	r3, r0
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	3708      	adds	r7, #8
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}
	...

080024ec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b08b      	sub	sp, #44	; 0x2c
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
 80024f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80024f6:	2300      	movs	r3, #0
 80024f8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80024fa:	2300      	movs	r3, #0
 80024fc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024fe:	e169      	b.n	80027d4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002500:	2201      	movs	r2, #1
 8002502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002504:	fa02 f303 	lsl.w	r3, r2, r3
 8002508:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	69fa      	ldr	r2, [r7, #28]
 8002510:	4013      	ands	r3, r2
 8002512:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002514:	69ba      	ldr	r2, [r7, #24]
 8002516:	69fb      	ldr	r3, [r7, #28]
 8002518:	429a      	cmp	r2, r3
 800251a:	f040 8158 	bne.w	80027ce <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	4a9a      	ldr	r2, [pc, #616]	; (800278c <HAL_GPIO_Init+0x2a0>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d05e      	beq.n	80025e6 <HAL_GPIO_Init+0xfa>
 8002528:	4a98      	ldr	r2, [pc, #608]	; (800278c <HAL_GPIO_Init+0x2a0>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d875      	bhi.n	800261a <HAL_GPIO_Init+0x12e>
 800252e:	4a98      	ldr	r2, [pc, #608]	; (8002790 <HAL_GPIO_Init+0x2a4>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d058      	beq.n	80025e6 <HAL_GPIO_Init+0xfa>
 8002534:	4a96      	ldr	r2, [pc, #600]	; (8002790 <HAL_GPIO_Init+0x2a4>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d86f      	bhi.n	800261a <HAL_GPIO_Init+0x12e>
 800253a:	4a96      	ldr	r2, [pc, #600]	; (8002794 <HAL_GPIO_Init+0x2a8>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d052      	beq.n	80025e6 <HAL_GPIO_Init+0xfa>
 8002540:	4a94      	ldr	r2, [pc, #592]	; (8002794 <HAL_GPIO_Init+0x2a8>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d869      	bhi.n	800261a <HAL_GPIO_Init+0x12e>
 8002546:	4a94      	ldr	r2, [pc, #592]	; (8002798 <HAL_GPIO_Init+0x2ac>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d04c      	beq.n	80025e6 <HAL_GPIO_Init+0xfa>
 800254c:	4a92      	ldr	r2, [pc, #584]	; (8002798 <HAL_GPIO_Init+0x2ac>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d863      	bhi.n	800261a <HAL_GPIO_Init+0x12e>
 8002552:	4a92      	ldr	r2, [pc, #584]	; (800279c <HAL_GPIO_Init+0x2b0>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d046      	beq.n	80025e6 <HAL_GPIO_Init+0xfa>
 8002558:	4a90      	ldr	r2, [pc, #576]	; (800279c <HAL_GPIO_Init+0x2b0>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d85d      	bhi.n	800261a <HAL_GPIO_Init+0x12e>
 800255e:	2b12      	cmp	r3, #18
 8002560:	d82a      	bhi.n	80025b8 <HAL_GPIO_Init+0xcc>
 8002562:	2b12      	cmp	r3, #18
 8002564:	d859      	bhi.n	800261a <HAL_GPIO_Init+0x12e>
 8002566:	a201      	add	r2, pc, #4	; (adr r2, 800256c <HAL_GPIO_Init+0x80>)
 8002568:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800256c:	080025e7 	.word	0x080025e7
 8002570:	080025c1 	.word	0x080025c1
 8002574:	080025d3 	.word	0x080025d3
 8002578:	08002615 	.word	0x08002615
 800257c:	0800261b 	.word	0x0800261b
 8002580:	0800261b 	.word	0x0800261b
 8002584:	0800261b 	.word	0x0800261b
 8002588:	0800261b 	.word	0x0800261b
 800258c:	0800261b 	.word	0x0800261b
 8002590:	0800261b 	.word	0x0800261b
 8002594:	0800261b 	.word	0x0800261b
 8002598:	0800261b 	.word	0x0800261b
 800259c:	0800261b 	.word	0x0800261b
 80025a0:	0800261b 	.word	0x0800261b
 80025a4:	0800261b 	.word	0x0800261b
 80025a8:	0800261b 	.word	0x0800261b
 80025ac:	0800261b 	.word	0x0800261b
 80025b0:	080025c9 	.word	0x080025c9
 80025b4:	080025dd 	.word	0x080025dd
 80025b8:	4a79      	ldr	r2, [pc, #484]	; (80027a0 <HAL_GPIO_Init+0x2b4>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d013      	beq.n	80025e6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80025be:	e02c      	b.n	800261a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	68db      	ldr	r3, [r3, #12]
 80025c4:	623b      	str	r3, [r7, #32]
          break;
 80025c6:	e029      	b.n	800261c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	68db      	ldr	r3, [r3, #12]
 80025cc:	3304      	adds	r3, #4
 80025ce:	623b      	str	r3, [r7, #32]
          break;
 80025d0:	e024      	b.n	800261c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	68db      	ldr	r3, [r3, #12]
 80025d6:	3308      	adds	r3, #8
 80025d8:	623b      	str	r3, [r7, #32]
          break;
 80025da:	e01f      	b.n	800261c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	68db      	ldr	r3, [r3, #12]
 80025e0:	330c      	adds	r3, #12
 80025e2:	623b      	str	r3, [r7, #32]
          break;
 80025e4:	e01a      	b.n	800261c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d102      	bne.n	80025f4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80025ee:	2304      	movs	r3, #4
 80025f0:	623b      	str	r3, [r7, #32]
          break;
 80025f2:	e013      	b.n	800261c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	689b      	ldr	r3, [r3, #8]
 80025f8:	2b01      	cmp	r3, #1
 80025fa:	d105      	bne.n	8002608 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80025fc:	2308      	movs	r3, #8
 80025fe:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	69fa      	ldr	r2, [r7, #28]
 8002604:	611a      	str	r2, [r3, #16]
          break;
 8002606:	e009      	b.n	800261c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002608:	2308      	movs	r3, #8
 800260a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	69fa      	ldr	r2, [r7, #28]
 8002610:	615a      	str	r2, [r3, #20]
          break;
 8002612:	e003      	b.n	800261c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002614:	2300      	movs	r3, #0
 8002616:	623b      	str	r3, [r7, #32]
          break;
 8002618:	e000      	b.n	800261c <HAL_GPIO_Init+0x130>
          break;
 800261a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800261c:	69bb      	ldr	r3, [r7, #24]
 800261e:	2bff      	cmp	r3, #255	; 0xff
 8002620:	d801      	bhi.n	8002626 <HAL_GPIO_Init+0x13a>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	e001      	b.n	800262a <HAL_GPIO_Init+0x13e>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	3304      	adds	r3, #4
 800262a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800262c:	69bb      	ldr	r3, [r7, #24]
 800262e:	2bff      	cmp	r3, #255	; 0xff
 8002630:	d802      	bhi.n	8002638 <HAL_GPIO_Init+0x14c>
 8002632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002634:	009b      	lsls	r3, r3, #2
 8002636:	e002      	b.n	800263e <HAL_GPIO_Init+0x152>
 8002638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800263a:	3b08      	subs	r3, #8
 800263c:	009b      	lsls	r3, r3, #2
 800263e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	681a      	ldr	r2, [r3, #0]
 8002644:	210f      	movs	r1, #15
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	fa01 f303 	lsl.w	r3, r1, r3
 800264c:	43db      	mvns	r3, r3
 800264e:	401a      	ands	r2, r3
 8002650:	6a39      	ldr	r1, [r7, #32]
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	fa01 f303 	lsl.w	r3, r1, r3
 8002658:	431a      	orrs	r2, r3
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002666:	2b00      	cmp	r3, #0
 8002668:	f000 80b1 	beq.w	80027ce <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800266c:	4b4d      	ldr	r3, [pc, #308]	; (80027a4 <HAL_GPIO_Init+0x2b8>)
 800266e:	699b      	ldr	r3, [r3, #24]
 8002670:	4a4c      	ldr	r2, [pc, #304]	; (80027a4 <HAL_GPIO_Init+0x2b8>)
 8002672:	f043 0301 	orr.w	r3, r3, #1
 8002676:	6193      	str	r3, [r2, #24]
 8002678:	4b4a      	ldr	r3, [pc, #296]	; (80027a4 <HAL_GPIO_Init+0x2b8>)
 800267a:	699b      	ldr	r3, [r3, #24]
 800267c:	f003 0301 	and.w	r3, r3, #1
 8002680:	60bb      	str	r3, [r7, #8]
 8002682:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002684:	4a48      	ldr	r2, [pc, #288]	; (80027a8 <HAL_GPIO_Init+0x2bc>)
 8002686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002688:	089b      	lsrs	r3, r3, #2
 800268a:	3302      	adds	r3, #2
 800268c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002690:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002694:	f003 0303 	and.w	r3, r3, #3
 8002698:	009b      	lsls	r3, r3, #2
 800269a:	220f      	movs	r2, #15
 800269c:	fa02 f303 	lsl.w	r3, r2, r3
 80026a0:	43db      	mvns	r3, r3
 80026a2:	68fa      	ldr	r2, [r7, #12]
 80026a4:	4013      	ands	r3, r2
 80026a6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	4a40      	ldr	r2, [pc, #256]	; (80027ac <HAL_GPIO_Init+0x2c0>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d013      	beq.n	80026d8 <HAL_GPIO_Init+0x1ec>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	4a3f      	ldr	r2, [pc, #252]	; (80027b0 <HAL_GPIO_Init+0x2c4>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d00d      	beq.n	80026d4 <HAL_GPIO_Init+0x1e8>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	4a3e      	ldr	r2, [pc, #248]	; (80027b4 <HAL_GPIO_Init+0x2c8>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d007      	beq.n	80026d0 <HAL_GPIO_Init+0x1e4>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	4a3d      	ldr	r2, [pc, #244]	; (80027b8 <HAL_GPIO_Init+0x2cc>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d101      	bne.n	80026cc <HAL_GPIO_Init+0x1e0>
 80026c8:	2303      	movs	r3, #3
 80026ca:	e006      	b.n	80026da <HAL_GPIO_Init+0x1ee>
 80026cc:	2304      	movs	r3, #4
 80026ce:	e004      	b.n	80026da <HAL_GPIO_Init+0x1ee>
 80026d0:	2302      	movs	r3, #2
 80026d2:	e002      	b.n	80026da <HAL_GPIO_Init+0x1ee>
 80026d4:	2301      	movs	r3, #1
 80026d6:	e000      	b.n	80026da <HAL_GPIO_Init+0x1ee>
 80026d8:	2300      	movs	r3, #0
 80026da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026dc:	f002 0203 	and.w	r2, r2, #3
 80026e0:	0092      	lsls	r2, r2, #2
 80026e2:	4093      	lsls	r3, r2
 80026e4:	68fa      	ldr	r2, [r7, #12]
 80026e6:	4313      	orrs	r3, r2
 80026e8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80026ea:	492f      	ldr	r1, [pc, #188]	; (80027a8 <HAL_GPIO_Init+0x2bc>)
 80026ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ee:	089b      	lsrs	r3, r3, #2
 80026f0:	3302      	adds	r3, #2
 80026f2:	68fa      	ldr	r2, [r7, #12]
 80026f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002700:	2b00      	cmp	r3, #0
 8002702:	d006      	beq.n	8002712 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002704:	4b2d      	ldr	r3, [pc, #180]	; (80027bc <HAL_GPIO_Init+0x2d0>)
 8002706:	681a      	ldr	r2, [r3, #0]
 8002708:	492c      	ldr	r1, [pc, #176]	; (80027bc <HAL_GPIO_Init+0x2d0>)
 800270a:	69bb      	ldr	r3, [r7, #24]
 800270c:	4313      	orrs	r3, r2
 800270e:	600b      	str	r3, [r1, #0]
 8002710:	e006      	b.n	8002720 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002712:	4b2a      	ldr	r3, [pc, #168]	; (80027bc <HAL_GPIO_Init+0x2d0>)
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	69bb      	ldr	r3, [r7, #24]
 8002718:	43db      	mvns	r3, r3
 800271a:	4928      	ldr	r1, [pc, #160]	; (80027bc <HAL_GPIO_Init+0x2d0>)
 800271c:	4013      	ands	r3, r2
 800271e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002728:	2b00      	cmp	r3, #0
 800272a:	d006      	beq.n	800273a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800272c:	4b23      	ldr	r3, [pc, #140]	; (80027bc <HAL_GPIO_Init+0x2d0>)
 800272e:	685a      	ldr	r2, [r3, #4]
 8002730:	4922      	ldr	r1, [pc, #136]	; (80027bc <HAL_GPIO_Init+0x2d0>)
 8002732:	69bb      	ldr	r3, [r7, #24]
 8002734:	4313      	orrs	r3, r2
 8002736:	604b      	str	r3, [r1, #4]
 8002738:	e006      	b.n	8002748 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800273a:	4b20      	ldr	r3, [pc, #128]	; (80027bc <HAL_GPIO_Init+0x2d0>)
 800273c:	685a      	ldr	r2, [r3, #4]
 800273e:	69bb      	ldr	r3, [r7, #24]
 8002740:	43db      	mvns	r3, r3
 8002742:	491e      	ldr	r1, [pc, #120]	; (80027bc <HAL_GPIO_Init+0x2d0>)
 8002744:	4013      	ands	r3, r2
 8002746:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002750:	2b00      	cmp	r3, #0
 8002752:	d006      	beq.n	8002762 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002754:	4b19      	ldr	r3, [pc, #100]	; (80027bc <HAL_GPIO_Init+0x2d0>)
 8002756:	689a      	ldr	r2, [r3, #8]
 8002758:	4918      	ldr	r1, [pc, #96]	; (80027bc <HAL_GPIO_Init+0x2d0>)
 800275a:	69bb      	ldr	r3, [r7, #24]
 800275c:	4313      	orrs	r3, r2
 800275e:	608b      	str	r3, [r1, #8]
 8002760:	e006      	b.n	8002770 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002762:	4b16      	ldr	r3, [pc, #88]	; (80027bc <HAL_GPIO_Init+0x2d0>)
 8002764:	689a      	ldr	r2, [r3, #8]
 8002766:	69bb      	ldr	r3, [r7, #24]
 8002768:	43db      	mvns	r3, r3
 800276a:	4914      	ldr	r1, [pc, #80]	; (80027bc <HAL_GPIO_Init+0x2d0>)
 800276c:	4013      	ands	r3, r2
 800276e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002778:	2b00      	cmp	r3, #0
 800277a:	d021      	beq.n	80027c0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800277c:	4b0f      	ldr	r3, [pc, #60]	; (80027bc <HAL_GPIO_Init+0x2d0>)
 800277e:	68da      	ldr	r2, [r3, #12]
 8002780:	490e      	ldr	r1, [pc, #56]	; (80027bc <HAL_GPIO_Init+0x2d0>)
 8002782:	69bb      	ldr	r3, [r7, #24]
 8002784:	4313      	orrs	r3, r2
 8002786:	60cb      	str	r3, [r1, #12]
 8002788:	e021      	b.n	80027ce <HAL_GPIO_Init+0x2e2>
 800278a:	bf00      	nop
 800278c:	10320000 	.word	0x10320000
 8002790:	10310000 	.word	0x10310000
 8002794:	10220000 	.word	0x10220000
 8002798:	10210000 	.word	0x10210000
 800279c:	10120000 	.word	0x10120000
 80027a0:	10110000 	.word	0x10110000
 80027a4:	40021000 	.word	0x40021000
 80027a8:	40010000 	.word	0x40010000
 80027ac:	40010800 	.word	0x40010800
 80027b0:	40010c00 	.word	0x40010c00
 80027b4:	40011000 	.word	0x40011000
 80027b8:	40011400 	.word	0x40011400
 80027bc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80027c0:	4b0b      	ldr	r3, [pc, #44]	; (80027f0 <HAL_GPIO_Init+0x304>)
 80027c2:	68da      	ldr	r2, [r3, #12]
 80027c4:	69bb      	ldr	r3, [r7, #24]
 80027c6:	43db      	mvns	r3, r3
 80027c8:	4909      	ldr	r1, [pc, #36]	; (80027f0 <HAL_GPIO_Init+0x304>)
 80027ca:	4013      	ands	r3, r2
 80027cc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80027ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d0:	3301      	adds	r3, #1
 80027d2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	681a      	ldr	r2, [r3, #0]
 80027d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027da:	fa22 f303 	lsr.w	r3, r2, r3
 80027de:	2b00      	cmp	r3, #0
 80027e0:	f47f ae8e 	bne.w	8002500 <HAL_GPIO_Init+0x14>
  }
}
 80027e4:	bf00      	nop
 80027e6:	bf00      	nop
 80027e8:	372c      	adds	r7, #44	; 0x2c
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bc80      	pop	{r7}
 80027ee:	4770      	bx	lr
 80027f0:	40010400 	.word	0x40010400

080027f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b083      	sub	sp, #12
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
 80027fc:	460b      	mov	r3, r1
 80027fe:	807b      	strh	r3, [r7, #2]
 8002800:	4613      	mov	r3, r2
 8002802:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002804:	787b      	ldrb	r3, [r7, #1]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d003      	beq.n	8002812 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800280a:	887a      	ldrh	r2, [r7, #2]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002810:	e003      	b.n	800281a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002812:	887b      	ldrh	r3, [r7, #2]
 8002814:	041a      	lsls	r2, r3, #16
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	611a      	str	r2, [r3, #16]
}
 800281a:	bf00      	nop
 800281c:	370c      	adds	r7, #12
 800281e:	46bd      	mov	sp, r7
 8002820:	bc80      	pop	{r7}
 8002822:	4770      	bx	lr

08002824 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b084      	sub	sp, #16
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d101      	bne.n	8002836 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	e12b      	b.n	8002a8e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800283c:	b2db      	uxtb	r3, r3
 800283e:	2b00      	cmp	r3, #0
 8002840:	d106      	bne.n	8002850 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2200      	movs	r2, #0
 8002846:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800284a:	6878      	ldr	r0, [r7, #4]
 800284c:	f7ff fbae 	bl	8001fac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2224      	movs	r2, #36	; 0x24
 8002854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f022 0201 	bic.w	r2, r2, #1
 8002866:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002876:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	681a      	ldr	r2, [r3, #0]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002886:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002888:	f001 fd0a 	bl	80042a0 <HAL_RCC_GetPCLK1Freq>
 800288c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	4a81      	ldr	r2, [pc, #516]	; (8002a98 <HAL_I2C_Init+0x274>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d807      	bhi.n	80028a8 <HAL_I2C_Init+0x84>
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	4a80      	ldr	r2, [pc, #512]	; (8002a9c <HAL_I2C_Init+0x278>)
 800289c:	4293      	cmp	r3, r2
 800289e:	bf94      	ite	ls
 80028a0:	2301      	movls	r3, #1
 80028a2:	2300      	movhi	r3, #0
 80028a4:	b2db      	uxtb	r3, r3
 80028a6:	e006      	b.n	80028b6 <HAL_I2C_Init+0x92>
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	4a7d      	ldr	r2, [pc, #500]	; (8002aa0 <HAL_I2C_Init+0x27c>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	bf94      	ite	ls
 80028b0:	2301      	movls	r3, #1
 80028b2:	2300      	movhi	r3, #0
 80028b4:	b2db      	uxtb	r3, r3
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d001      	beq.n	80028be <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	e0e7      	b.n	8002a8e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	4a78      	ldr	r2, [pc, #480]	; (8002aa4 <HAL_I2C_Init+0x280>)
 80028c2:	fba2 2303 	umull	r2, r3, r2, r3
 80028c6:	0c9b      	lsrs	r3, r3, #18
 80028c8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	68ba      	ldr	r2, [r7, #8]
 80028da:	430a      	orrs	r2, r1
 80028dc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	6a1b      	ldr	r3, [r3, #32]
 80028e4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	4a6a      	ldr	r2, [pc, #424]	; (8002a98 <HAL_I2C_Init+0x274>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d802      	bhi.n	80028f8 <HAL_I2C_Init+0xd4>
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	3301      	adds	r3, #1
 80028f6:	e009      	b.n	800290c <HAL_I2C_Init+0xe8>
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80028fe:	fb02 f303 	mul.w	r3, r2, r3
 8002902:	4a69      	ldr	r2, [pc, #420]	; (8002aa8 <HAL_I2C_Init+0x284>)
 8002904:	fba2 2303 	umull	r2, r3, r2, r3
 8002908:	099b      	lsrs	r3, r3, #6
 800290a:	3301      	adds	r3, #1
 800290c:	687a      	ldr	r2, [r7, #4]
 800290e:	6812      	ldr	r2, [r2, #0]
 8002910:	430b      	orrs	r3, r1
 8002912:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	69db      	ldr	r3, [r3, #28]
 800291a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800291e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	495c      	ldr	r1, [pc, #368]	; (8002a98 <HAL_I2C_Init+0x274>)
 8002928:	428b      	cmp	r3, r1
 800292a:	d819      	bhi.n	8002960 <HAL_I2C_Init+0x13c>
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	1e59      	subs	r1, r3, #1
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	005b      	lsls	r3, r3, #1
 8002936:	fbb1 f3f3 	udiv	r3, r1, r3
 800293a:	1c59      	adds	r1, r3, #1
 800293c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002940:	400b      	ands	r3, r1
 8002942:	2b00      	cmp	r3, #0
 8002944:	d00a      	beq.n	800295c <HAL_I2C_Init+0x138>
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	1e59      	subs	r1, r3, #1
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	005b      	lsls	r3, r3, #1
 8002950:	fbb1 f3f3 	udiv	r3, r1, r3
 8002954:	3301      	adds	r3, #1
 8002956:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800295a:	e051      	b.n	8002a00 <HAL_I2C_Init+0x1dc>
 800295c:	2304      	movs	r3, #4
 800295e:	e04f      	b.n	8002a00 <HAL_I2C_Init+0x1dc>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d111      	bne.n	800298c <HAL_I2C_Init+0x168>
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	1e58      	subs	r0, r3, #1
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6859      	ldr	r1, [r3, #4]
 8002970:	460b      	mov	r3, r1
 8002972:	005b      	lsls	r3, r3, #1
 8002974:	440b      	add	r3, r1
 8002976:	fbb0 f3f3 	udiv	r3, r0, r3
 800297a:	3301      	adds	r3, #1
 800297c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002980:	2b00      	cmp	r3, #0
 8002982:	bf0c      	ite	eq
 8002984:	2301      	moveq	r3, #1
 8002986:	2300      	movne	r3, #0
 8002988:	b2db      	uxtb	r3, r3
 800298a:	e012      	b.n	80029b2 <HAL_I2C_Init+0x18e>
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	1e58      	subs	r0, r3, #1
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6859      	ldr	r1, [r3, #4]
 8002994:	460b      	mov	r3, r1
 8002996:	009b      	lsls	r3, r3, #2
 8002998:	440b      	add	r3, r1
 800299a:	0099      	lsls	r1, r3, #2
 800299c:	440b      	add	r3, r1
 800299e:	fbb0 f3f3 	udiv	r3, r0, r3
 80029a2:	3301      	adds	r3, #1
 80029a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	bf0c      	ite	eq
 80029ac:	2301      	moveq	r3, #1
 80029ae:	2300      	movne	r3, #0
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d001      	beq.n	80029ba <HAL_I2C_Init+0x196>
 80029b6:	2301      	movs	r3, #1
 80029b8:	e022      	b.n	8002a00 <HAL_I2C_Init+0x1dc>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d10e      	bne.n	80029e0 <HAL_I2C_Init+0x1bc>
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	1e58      	subs	r0, r3, #1
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6859      	ldr	r1, [r3, #4]
 80029ca:	460b      	mov	r3, r1
 80029cc:	005b      	lsls	r3, r3, #1
 80029ce:	440b      	add	r3, r1
 80029d0:	fbb0 f3f3 	udiv	r3, r0, r3
 80029d4:	3301      	adds	r3, #1
 80029d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029de:	e00f      	b.n	8002a00 <HAL_I2C_Init+0x1dc>
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	1e58      	subs	r0, r3, #1
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6859      	ldr	r1, [r3, #4]
 80029e8:	460b      	mov	r3, r1
 80029ea:	009b      	lsls	r3, r3, #2
 80029ec:	440b      	add	r3, r1
 80029ee:	0099      	lsls	r1, r3, #2
 80029f0:	440b      	add	r3, r1
 80029f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80029f6:	3301      	adds	r3, #1
 80029f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029fc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a00:	6879      	ldr	r1, [r7, #4]
 8002a02:	6809      	ldr	r1, [r1, #0]
 8002a04:	4313      	orrs	r3, r2
 8002a06:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	69da      	ldr	r2, [r3, #28]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6a1b      	ldr	r3, [r3, #32]
 8002a1a:	431a      	orrs	r2, r3
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	430a      	orrs	r2, r1
 8002a22:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002a2e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002a32:	687a      	ldr	r2, [r7, #4]
 8002a34:	6911      	ldr	r1, [r2, #16]
 8002a36:	687a      	ldr	r2, [r7, #4]
 8002a38:	68d2      	ldr	r2, [r2, #12]
 8002a3a:	4311      	orrs	r1, r2
 8002a3c:	687a      	ldr	r2, [r7, #4]
 8002a3e:	6812      	ldr	r2, [r2, #0]
 8002a40:	430b      	orrs	r3, r1
 8002a42:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	68db      	ldr	r3, [r3, #12]
 8002a4a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	695a      	ldr	r2, [r3, #20]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	699b      	ldr	r3, [r3, #24]
 8002a56:	431a      	orrs	r2, r3
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	430a      	orrs	r2, r1
 8002a5e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f042 0201 	orr.w	r2, r2, #1
 8002a6e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2200      	movs	r2, #0
 8002a74:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2220      	movs	r2, #32
 8002a7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2200      	movs	r2, #0
 8002a82:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2200      	movs	r2, #0
 8002a88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002a8c:	2300      	movs	r3, #0
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	3710      	adds	r7, #16
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}
 8002a96:	bf00      	nop
 8002a98:	000186a0 	.word	0x000186a0
 8002a9c:	001e847f 	.word	0x001e847f
 8002aa0:	003d08ff 	.word	0x003d08ff
 8002aa4:	431bde83 	.word	0x431bde83
 8002aa8:	10624dd3 	.word	0x10624dd3

08002aac <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b088      	sub	sp, #32
 8002ab0:	af02      	add	r7, sp, #8
 8002ab2:	60f8      	str	r0, [r7, #12]
 8002ab4:	607a      	str	r2, [r7, #4]
 8002ab6:	461a      	mov	r2, r3
 8002ab8:	460b      	mov	r3, r1
 8002aba:	817b      	strh	r3, [r7, #10]
 8002abc:	4613      	mov	r3, r2
 8002abe:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002ac0:	f7ff fc02 	bl	80022c8 <HAL_GetTick>
 8002ac4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002acc:	b2db      	uxtb	r3, r3
 8002ace:	2b20      	cmp	r3, #32
 8002ad0:	f040 80e0 	bne.w	8002c94 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	9300      	str	r3, [sp, #0]
 8002ad8:	2319      	movs	r3, #25
 8002ada:	2201      	movs	r2, #1
 8002adc:	4970      	ldr	r1, [pc, #448]	; (8002ca0 <HAL_I2C_Master_Transmit+0x1f4>)
 8002ade:	68f8      	ldr	r0, [r7, #12]
 8002ae0:	f000 fe22 	bl	8003728 <I2C_WaitOnFlagUntilTimeout>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d001      	beq.n	8002aee <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002aea:	2302      	movs	r3, #2
 8002aec:	e0d3      	b.n	8002c96 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002af4:	2b01      	cmp	r3, #1
 8002af6:	d101      	bne.n	8002afc <HAL_I2C_Master_Transmit+0x50>
 8002af8:	2302      	movs	r3, #2
 8002afa:	e0cc      	b.n	8002c96 <HAL_I2C_Master_Transmit+0x1ea>
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	2201      	movs	r2, #1
 8002b00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 0301 	and.w	r3, r3, #1
 8002b0e:	2b01      	cmp	r3, #1
 8002b10:	d007      	beq.n	8002b22 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	681a      	ldr	r2, [r3, #0]
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f042 0201 	orr.w	r2, r2, #1
 8002b20:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b30:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	2221      	movs	r2, #33	; 0x21
 8002b36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	2210      	movs	r2, #16
 8002b3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	2200      	movs	r2, #0
 8002b46:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	687a      	ldr	r2, [r7, #4]
 8002b4c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	893a      	ldrh	r2, [r7, #8]
 8002b52:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b58:	b29a      	uxth	r2, r3
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	4a50      	ldr	r2, [pc, #320]	; (8002ca4 <HAL_I2C_Master_Transmit+0x1f8>)
 8002b62:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002b64:	8979      	ldrh	r1, [r7, #10]
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	6a3a      	ldr	r2, [r7, #32]
 8002b6a:	68f8      	ldr	r0, [r7, #12]
 8002b6c:	f000 fbf6 	bl	800335c <I2C_MasterRequestWrite>
 8002b70:	4603      	mov	r3, r0
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d001      	beq.n	8002b7a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	e08d      	b.n	8002c96 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	613b      	str	r3, [r7, #16]
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	695b      	ldr	r3, [r3, #20]
 8002b84:	613b      	str	r3, [r7, #16]
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	699b      	ldr	r3, [r3, #24]
 8002b8c:	613b      	str	r3, [r7, #16]
 8002b8e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002b90:	e066      	b.n	8002c60 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b92:	697a      	ldr	r2, [r7, #20]
 8002b94:	6a39      	ldr	r1, [r7, #32]
 8002b96:	68f8      	ldr	r0, [r7, #12]
 8002b98:	f000 fe9c 	bl	80038d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d00d      	beq.n	8002bbe <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba6:	2b04      	cmp	r3, #4
 8002ba8:	d107      	bne.n	8002bba <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	681a      	ldr	r2, [r3, #0]
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bb8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e06b      	b.n	8002c96 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc2:	781a      	ldrb	r2, [r3, #0]
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bce:	1c5a      	adds	r2, r3, #1
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bd8:	b29b      	uxth	r3, r3
 8002bda:	3b01      	subs	r3, #1
 8002bdc:	b29a      	uxth	r2, r3
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002be6:	3b01      	subs	r3, #1
 8002be8:	b29a      	uxth	r2, r3
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	695b      	ldr	r3, [r3, #20]
 8002bf4:	f003 0304 	and.w	r3, r3, #4
 8002bf8:	2b04      	cmp	r3, #4
 8002bfa:	d11b      	bne.n	8002c34 <HAL_I2C_Master_Transmit+0x188>
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d017      	beq.n	8002c34 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c08:	781a      	ldrb	r2, [r3, #0]
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c14:	1c5a      	adds	r2, r3, #1
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c1e:	b29b      	uxth	r3, r3
 8002c20:	3b01      	subs	r3, #1
 8002c22:	b29a      	uxth	r2, r3
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c2c:	3b01      	subs	r3, #1
 8002c2e:	b29a      	uxth	r2, r3
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c34:	697a      	ldr	r2, [r7, #20]
 8002c36:	6a39      	ldr	r1, [r7, #32]
 8002c38:	68f8      	ldr	r0, [r7, #12]
 8002c3a:	f000 fe8c 	bl	8003956 <I2C_WaitOnBTFFlagUntilTimeout>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d00d      	beq.n	8002c60 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c48:	2b04      	cmp	r3, #4
 8002c4a:	d107      	bne.n	8002c5c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	681a      	ldr	r2, [r3, #0]
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c5a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	e01a      	b.n	8002c96 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d194      	bne.n	8002b92 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c76:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	2220      	movs	r2, #32
 8002c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	2200      	movs	r2, #0
 8002c84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002c90:	2300      	movs	r3, #0
 8002c92:	e000      	b.n	8002c96 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002c94:	2302      	movs	r3, #2
  }
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	3718      	adds	r7, #24
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	bf00      	nop
 8002ca0:	00100002 	.word	0x00100002
 8002ca4:	ffff0000 	.word	0xffff0000

08002ca8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b08c      	sub	sp, #48	; 0x30
 8002cac:	af02      	add	r7, sp, #8
 8002cae:	60f8      	str	r0, [r7, #12]
 8002cb0:	607a      	str	r2, [r7, #4]
 8002cb2:	461a      	mov	r2, r3
 8002cb4:	460b      	mov	r3, r1
 8002cb6:	817b      	strh	r3, [r7, #10]
 8002cb8:	4613      	mov	r3, r2
 8002cba:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002cc0:	f7ff fb02 	bl	80022c8 <HAL_GetTick>
 8002cc4:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ccc:	b2db      	uxtb	r3, r3
 8002cce:	2b20      	cmp	r3, #32
 8002cd0:	f040 823f 	bne.w	8003152 <HAL_I2C_Master_Receive+0x4aa>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd6:	9300      	str	r3, [sp, #0]
 8002cd8:	2319      	movs	r3, #25
 8002cda:	2201      	movs	r2, #1
 8002cdc:	497f      	ldr	r1, [pc, #508]	; (8002edc <HAL_I2C_Master_Receive+0x234>)
 8002cde:	68f8      	ldr	r0, [r7, #12]
 8002ce0:	f000 fd22 	bl	8003728 <I2C_WaitOnFlagUntilTimeout>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d001      	beq.n	8002cee <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8002cea:	2302      	movs	r3, #2
 8002cec:	e232      	b.n	8003154 <HAL_I2C_Master_Receive+0x4ac>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cf4:	2b01      	cmp	r3, #1
 8002cf6:	d101      	bne.n	8002cfc <HAL_I2C_Master_Receive+0x54>
 8002cf8:	2302      	movs	r3, #2
 8002cfa:	e22b      	b.n	8003154 <HAL_I2C_Master_Receive+0x4ac>
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	2201      	movs	r2, #1
 8002d00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f003 0301 	and.w	r3, r3, #1
 8002d0e:	2b01      	cmp	r3, #1
 8002d10:	d007      	beq.n	8002d22 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f042 0201 	orr.w	r2, r2, #1
 8002d20:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	681a      	ldr	r2, [r3, #0]
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d30:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	2222      	movs	r2, #34	; 0x22
 8002d36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	2210      	movs	r2, #16
 8002d3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	2200      	movs	r2, #0
 8002d46:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	687a      	ldr	r2, [r7, #4]
 8002d4c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	893a      	ldrh	r2, [r7, #8]
 8002d52:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d58:	b29a      	uxth	r2, r3
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	4a5f      	ldr	r2, [pc, #380]	; (8002ee0 <HAL_I2C_Master_Receive+0x238>)
 8002d62:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002d64:	8979      	ldrh	r1, [r7, #10]
 8002d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d6a:	68f8      	ldr	r0, [r7, #12]
 8002d6c:	f000 fb78 	bl	8003460 <I2C_MasterRequestRead>
 8002d70:	4603      	mov	r3, r0
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d001      	beq.n	8002d7a <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	e1ec      	b.n	8003154 <HAL_I2C_Master_Receive+0x4ac>
    }

    if (hi2c->XferSize == 0U)
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d113      	bne.n	8002daa <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d82:	2300      	movs	r3, #0
 8002d84:	61fb      	str	r3, [r7, #28]
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	695b      	ldr	r3, [r3, #20]
 8002d8c:	61fb      	str	r3, [r7, #28]
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	699b      	ldr	r3, [r3, #24]
 8002d94:	61fb      	str	r3, [r7, #28]
 8002d96:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	681a      	ldr	r2, [r3, #0]
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002da6:	601a      	str	r2, [r3, #0]
 8002da8:	e1c0      	b.n	800312c <HAL_I2C_Master_Receive+0x484>
    }
    else if (hi2c->XferSize == 1U)
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dae:	2b01      	cmp	r3, #1
 8002db0:	d11e      	bne.n	8002df0 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002dc0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002dc2:	b672      	cpsid	i
}
 8002dc4:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	61bb      	str	r3, [r7, #24]
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	695b      	ldr	r3, [r3, #20]
 8002dd0:	61bb      	str	r3, [r7, #24]
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	699b      	ldr	r3, [r3, #24]
 8002dd8:	61bb      	str	r3, [r7, #24]
 8002dda:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	681a      	ldr	r2, [r3, #0]
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002dea:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002dec:	b662      	cpsie	i
}
 8002dee:	e035      	b.n	8002e5c <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002df4:	2b02      	cmp	r3, #2
 8002df6:	d11e      	bne.n	8002e36 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	681a      	ldr	r2, [r3, #0]
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e06:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002e08:	b672      	cpsid	i
}
 8002e0a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	617b      	str	r3, [r7, #20]
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	695b      	ldr	r3, [r3, #20]
 8002e16:	617b      	str	r3, [r7, #20]
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	699b      	ldr	r3, [r3, #24]
 8002e1e:	617b      	str	r3, [r7, #20]
 8002e20:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	681a      	ldr	r2, [r3, #0]
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e30:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002e32:	b662      	cpsie	i
}
 8002e34:	e012      	b.n	8002e5c <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	681a      	ldr	r2, [r3, #0]
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002e44:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e46:	2300      	movs	r3, #0
 8002e48:	613b      	str	r3, [r7, #16]
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	695b      	ldr	r3, [r3, #20]
 8002e50:	613b      	str	r3, [r7, #16]
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	699b      	ldr	r3, [r3, #24]
 8002e58:	613b      	str	r3, [r7, #16]
 8002e5a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002e5c:	e166      	b.n	800312c <HAL_I2C_Master_Receive+0x484>
    {
      if (hi2c->XferSize <= 3U)
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e62:	2b03      	cmp	r3, #3
 8002e64:	f200 811f 	bhi.w	80030a6 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e6c:	2b01      	cmp	r3, #1
 8002e6e:	d123      	bne.n	8002eb8 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e72:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002e74:	68f8      	ldr	r0, [r7, #12]
 8002e76:	f000 fdaf 	bl	80039d8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d001      	beq.n	8002e84 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8002e80:	2301      	movs	r3, #1
 8002e82:	e167      	b.n	8003154 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	691a      	ldr	r2, [r3, #16]
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e8e:	b2d2      	uxtb	r2, r2
 8002e90:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e96:	1c5a      	adds	r2, r3, #1
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ea0:	3b01      	subs	r3, #1
 8002ea2:	b29a      	uxth	r2, r3
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eac:	b29b      	uxth	r3, r3
 8002eae:	3b01      	subs	r3, #1
 8002eb0:	b29a      	uxth	r2, r3
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002eb6:	e139      	b.n	800312c <HAL_I2C_Master_Receive+0x484>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ebc:	2b02      	cmp	r3, #2
 8002ebe:	d152      	bne.n	8002f66 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec2:	9300      	str	r3, [sp, #0]
 8002ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	4906      	ldr	r1, [pc, #24]	; (8002ee4 <HAL_I2C_Master_Receive+0x23c>)
 8002eca:	68f8      	ldr	r0, [r7, #12]
 8002ecc:	f000 fc2c 	bl	8003728 <I2C_WaitOnFlagUntilTimeout>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d008      	beq.n	8002ee8 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e13c      	b.n	8003154 <HAL_I2C_Master_Receive+0x4ac>
 8002eda:	bf00      	nop
 8002edc:	00100002 	.word	0x00100002
 8002ee0:	ffff0000 	.word	0xffff0000
 8002ee4:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002ee8:	b672      	cpsid	i
}
 8002eea:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	681a      	ldr	r2, [r3, #0]
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002efa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	691a      	ldr	r2, [r3, #16]
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f06:	b2d2      	uxtb	r2, r2
 8002f08:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f0e:	1c5a      	adds	r2, r3, #1
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f18:	3b01      	subs	r3, #1
 8002f1a:	b29a      	uxth	r2, r3
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f24:	b29b      	uxth	r3, r3
 8002f26:	3b01      	subs	r3, #1
 8002f28:	b29a      	uxth	r2, r3
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002f2e:	b662      	cpsie	i
}
 8002f30:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	691a      	ldr	r2, [r3, #16]
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f3c:	b2d2      	uxtb	r2, r2
 8002f3e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f44:	1c5a      	adds	r2, r3, #1
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f4e:	3b01      	subs	r3, #1
 8002f50:	b29a      	uxth	r2, r3
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f5a:	b29b      	uxth	r3, r3
 8002f5c:	3b01      	subs	r3, #1
 8002f5e:	b29a      	uxth	r2, r3
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002f64:	e0e2      	b.n	800312c <HAL_I2C_Master_Receive+0x484>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f68:	9300      	str	r3, [sp, #0]
 8002f6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	497b      	ldr	r1, [pc, #492]	; (800315c <HAL_I2C_Master_Receive+0x4b4>)
 8002f70:	68f8      	ldr	r0, [r7, #12]
 8002f72:	f000 fbd9 	bl	8003728 <I2C_WaitOnFlagUntilTimeout>
 8002f76:	4603      	mov	r3, r0
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d001      	beq.n	8002f80 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	e0e9      	b.n	8003154 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	681a      	ldr	r2, [r3, #0]
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f8e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002f90:	b672      	cpsid	i
}
 8002f92:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	691a      	ldr	r2, [r3, #16]
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f9e:	b2d2      	uxtb	r2, r2
 8002fa0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa6:	1c5a      	adds	r2, r3, #1
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fb0:	3b01      	subs	r3, #1
 8002fb2:	b29a      	uxth	r2, r3
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fbc:	b29b      	uxth	r3, r3
 8002fbe:	3b01      	subs	r3, #1
 8002fc0:	b29a      	uxth	r2, r3
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002fc6:	4b66      	ldr	r3, [pc, #408]	; (8003160 <HAL_I2C_Master_Receive+0x4b8>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	08db      	lsrs	r3, r3, #3
 8002fcc:	4a65      	ldr	r2, [pc, #404]	; (8003164 <HAL_I2C_Master_Receive+0x4bc>)
 8002fce:	fba2 2303 	umull	r2, r3, r2, r3
 8002fd2:	0a1a      	lsrs	r2, r3, #8
 8002fd4:	4613      	mov	r3, r2
 8002fd6:	009b      	lsls	r3, r3, #2
 8002fd8:	4413      	add	r3, r2
 8002fda:	00da      	lsls	r2, r3, #3
 8002fdc:	1ad3      	subs	r3, r2, r3
 8002fde:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002fe0:	6a3b      	ldr	r3, [r7, #32]
 8002fe2:	3b01      	subs	r3, #1
 8002fe4:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002fe6:	6a3b      	ldr	r3, [r7, #32]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d118      	bne.n	800301e <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	2220      	movs	r2, #32
 8002ff6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003006:	f043 0220 	orr.w	r2, r3, #32
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800300e:	b662      	cpsie	i
}
 8003010:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	2200      	movs	r2, #0
 8003016:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e09a      	b.n	8003154 <HAL_I2C_Master_Receive+0x4ac>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	695b      	ldr	r3, [r3, #20]
 8003024:	f003 0304 	and.w	r3, r3, #4
 8003028:	2b04      	cmp	r3, #4
 800302a:	d1d9      	bne.n	8002fe0 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	681a      	ldr	r2, [r3, #0]
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800303a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	691a      	ldr	r2, [r3, #16]
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003046:	b2d2      	uxtb	r2, r2
 8003048:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800304e:	1c5a      	adds	r2, r3, #1
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003058:	3b01      	subs	r3, #1
 800305a:	b29a      	uxth	r2, r3
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003064:	b29b      	uxth	r3, r3
 8003066:	3b01      	subs	r3, #1
 8003068:	b29a      	uxth	r2, r3
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800306e:	b662      	cpsie	i
}
 8003070:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	691a      	ldr	r2, [r3, #16]
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800307c:	b2d2      	uxtb	r2, r2
 800307e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003084:	1c5a      	adds	r2, r3, #1
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800308e:	3b01      	subs	r3, #1
 8003090:	b29a      	uxth	r2, r3
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800309a:	b29b      	uxth	r3, r3
 800309c:	3b01      	subs	r3, #1
 800309e:	b29a      	uxth	r2, r3
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80030a4:	e042      	b.n	800312c <HAL_I2C_Master_Receive+0x484>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030a8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80030aa:	68f8      	ldr	r0, [r7, #12]
 80030ac:	f000 fc94 	bl	80039d8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80030b0:	4603      	mov	r3, r0
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d001      	beq.n	80030ba <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	e04c      	b.n	8003154 <HAL_I2C_Master_Receive+0x4ac>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	691a      	ldr	r2, [r3, #16]
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c4:	b2d2      	uxtb	r2, r2
 80030c6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030cc:	1c5a      	adds	r2, r3, #1
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030d6:	3b01      	subs	r3, #1
 80030d8:	b29a      	uxth	r2, r3
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030e2:	b29b      	uxth	r3, r3
 80030e4:	3b01      	subs	r3, #1
 80030e6:	b29a      	uxth	r2, r3
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	695b      	ldr	r3, [r3, #20]
 80030f2:	f003 0304 	and.w	r3, r3, #4
 80030f6:	2b04      	cmp	r3, #4
 80030f8:	d118      	bne.n	800312c <HAL_I2C_Master_Receive+0x484>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	691a      	ldr	r2, [r3, #16]
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003104:	b2d2      	uxtb	r2, r2
 8003106:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800310c:	1c5a      	adds	r2, r3, #1
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003116:	3b01      	subs	r3, #1
 8003118:	b29a      	uxth	r2, r3
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003122:	b29b      	uxth	r3, r3
 8003124:	3b01      	subs	r3, #1
 8003126:	b29a      	uxth	r2, r3
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003130:	2b00      	cmp	r3, #0
 8003132:	f47f ae94 	bne.w	8002e5e <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	2220      	movs	r2, #32
 800313a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	2200      	movs	r2, #0
 8003142:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	2200      	movs	r2, #0
 800314a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800314e:	2300      	movs	r3, #0
 8003150:	e000      	b.n	8003154 <HAL_I2C_Master_Receive+0x4ac>
  }
  else
  {
    return HAL_BUSY;
 8003152:	2302      	movs	r3, #2
  }
}
 8003154:	4618      	mov	r0, r3
 8003156:	3728      	adds	r7, #40	; 0x28
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}
 800315c:	00010004 	.word	0x00010004
 8003160:	20000000 	.word	0x20000000
 8003164:	14f8b589 	.word	0x14f8b589

08003168 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b088      	sub	sp, #32
 800316c:	af02      	add	r7, sp, #8
 800316e:	60f8      	str	r0, [r7, #12]
 8003170:	4608      	mov	r0, r1
 8003172:	4611      	mov	r1, r2
 8003174:	461a      	mov	r2, r3
 8003176:	4603      	mov	r3, r0
 8003178:	817b      	strh	r3, [r7, #10]
 800317a:	460b      	mov	r3, r1
 800317c:	813b      	strh	r3, [r7, #8]
 800317e:	4613      	mov	r3, r2
 8003180:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003182:	f7ff f8a1 	bl	80022c8 <HAL_GetTick>
 8003186:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800318e:	b2db      	uxtb	r3, r3
 8003190:	2b20      	cmp	r3, #32
 8003192:	f040 80d9 	bne.w	8003348 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003196:	697b      	ldr	r3, [r7, #20]
 8003198:	9300      	str	r3, [sp, #0]
 800319a:	2319      	movs	r3, #25
 800319c:	2201      	movs	r2, #1
 800319e:	496d      	ldr	r1, [pc, #436]	; (8003354 <HAL_I2C_Mem_Write+0x1ec>)
 80031a0:	68f8      	ldr	r0, [r7, #12]
 80031a2:	f000 fac1 	bl	8003728 <I2C_WaitOnFlagUntilTimeout>
 80031a6:	4603      	mov	r3, r0
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d001      	beq.n	80031b0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80031ac:	2302      	movs	r3, #2
 80031ae:	e0cc      	b.n	800334a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031b6:	2b01      	cmp	r3, #1
 80031b8:	d101      	bne.n	80031be <HAL_I2C_Mem_Write+0x56>
 80031ba:	2302      	movs	r3, #2
 80031bc:	e0c5      	b.n	800334a <HAL_I2C_Mem_Write+0x1e2>
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	2201      	movs	r2, #1
 80031c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f003 0301 	and.w	r3, r3, #1
 80031d0:	2b01      	cmp	r3, #1
 80031d2:	d007      	beq.n	80031e4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f042 0201 	orr.w	r2, r2, #1
 80031e2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	681a      	ldr	r2, [r3, #0]
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031f2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	2221      	movs	r2, #33	; 0x21
 80031f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	2240      	movs	r2, #64	; 0x40
 8003200:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	2200      	movs	r2, #0
 8003208:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	6a3a      	ldr	r2, [r7, #32]
 800320e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003214:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800321a:	b29a      	uxth	r2, r3
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	4a4d      	ldr	r2, [pc, #308]	; (8003358 <HAL_I2C_Mem_Write+0x1f0>)
 8003224:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003226:	88f8      	ldrh	r0, [r7, #6]
 8003228:	893a      	ldrh	r2, [r7, #8]
 800322a:	8979      	ldrh	r1, [r7, #10]
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	9301      	str	r3, [sp, #4]
 8003230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003232:	9300      	str	r3, [sp, #0]
 8003234:	4603      	mov	r3, r0
 8003236:	68f8      	ldr	r0, [r7, #12]
 8003238:	f000 f9e0 	bl	80035fc <I2C_RequestMemoryWrite>
 800323c:	4603      	mov	r3, r0
 800323e:	2b00      	cmp	r3, #0
 8003240:	d052      	beq.n	80032e8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	e081      	b.n	800334a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003246:	697a      	ldr	r2, [r7, #20]
 8003248:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800324a:	68f8      	ldr	r0, [r7, #12]
 800324c:	f000 fb42 	bl	80038d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003250:	4603      	mov	r3, r0
 8003252:	2b00      	cmp	r3, #0
 8003254:	d00d      	beq.n	8003272 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800325a:	2b04      	cmp	r3, #4
 800325c:	d107      	bne.n	800326e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	681a      	ldr	r2, [r3, #0]
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800326c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	e06b      	b.n	800334a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003276:	781a      	ldrb	r2, [r3, #0]
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003282:	1c5a      	adds	r2, r3, #1
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800328c:	3b01      	subs	r3, #1
 800328e:	b29a      	uxth	r2, r3
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003298:	b29b      	uxth	r3, r3
 800329a:	3b01      	subs	r3, #1
 800329c:	b29a      	uxth	r2, r3
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	695b      	ldr	r3, [r3, #20]
 80032a8:	f003 0304 	and.w	r3, r3, #4
 80032ac:	2b04      	cmp	r3, #4
 80032ae:	d11b      	bne.n	80032e8 <HAL_I2C_Mem_Write+0x180>
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d017      	beq.n	80032e8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032bc:	781a      	ldrb	r2, [r3, #0]
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c8:	1c5a      	adds	r2, r3, #1
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032d2:	3b01      	subs	r3, #1
 80032d4:	b29a      	uxth	r2, r3
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032de:	b29b      	uxth	r3, r3
 80032e0:	3b01      	subs	r3, #1
 80032e2:	b29a      	uxth	r2, r3
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d1aa      	bne.n	8003246 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032f0:	697a      	ldr	r2, [r7, #20]
 80032f2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80032f4:	68f8      	ldr	r0, [r7, #12]
 80032f6:	f000 fb2e 	bl	8003956 <I2C_WaitOnBTFFlagUntilTimeout>
 80032fa:	4603      	mov	r3, r0
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d00d      	beq.n	800331c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003304:	2b04      	cmp	r3, #4
 8003306:	d107      	bne.n	8003318 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	681a      	ldr	r2, [r3, #0]
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003316:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003318:	2301      	movs	r3, #1
 800331a:	e016      	b.n	800334a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	681a      	ldr	r2, [r3, #0]
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800332a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	2220      	movs	r2, #32
 8003330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	2200      	movs	r2, #0
 8003338:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	2200      	movs	r2, #0
 8003340:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003344:	2300      	movs	r3, #0
 8003346:	e000      	b.n	800334a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003348:	2302      	movs	r3, #2
  }
}
 800334a:	4618      	mov	r0, r3
 800334c:	3718      	adds	r7, #24
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}
 8003352:	bf00      	nop
 8003354:	00100002 	.word	0x00100002
 8003358:	ffff0000 	.word	0xffff0000

0800335c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b088      	sub	sp, #32
 8003360:	af02      	add	r7, sp, #8
 8003362:	60f8      	str	r0, [r7, #12]
 8003364:	607a      	str	r2, [r7, #4]
 8003366:	603b      	str	r3, [r7, #0]
 8003368:	460b      	mov	r3, r1
 800336a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003370:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	2b08      	cmp	r3, #8
 8003376:	d006      	beq.n	8003386 <I2C_MasterRequestWrite+0x2a>
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	2b01      	cmp	r3, #1
 800337c:	d003      	beq.n	8003386 <I2C_MasterRequestWrite+0x2a>
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003384:	d108      	bne.n	8003398 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	681a      	ldr	r2, [r3, #0]
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003394:	601a      	str	r2, [r3, #0]
 8003396:	e00b      	b.n	80033b0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800339c:	2b12      	cmp	r3, #18
 800339e:	d107      	bne.n	80033b0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	681a      	ldr	r2, [r3, #0]
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033ae:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	9300      	str	r3, [sp, #0]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2200      	movs	r2, #0
 80033b8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80033bc:	68f8      	ldr	r0, [r7, #12]
 80033be:	f000 f9b3 	bl	8003728 <I2C_WaitOnFlagUntilTimeout>
 80033c2:	4603      	mov	r3, r0
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d00d      	beq.n	80033e4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033d6:	d103      	bne.n	80033e0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80033de:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80033e0:	2303      	movs	r3, #3
 80033e2:	e035      	b.n	8003450 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	691b      	ldr	r3, [r3, #16]
 80033e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80033ec:	d108      	bne.n	8003400 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80033ee:	897b      	ldrh	r3, [r7, #10]
 80033f0:	b2db      	uxtb	r3, r3
 80033f2:	461a      	mov	r2, r3
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80033fc:	611a      	str	r2, [r3, #16]
 80033fe:	e01b      	b.n	8003438 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003400:	897b      	ldrh	r3, [r7, #10]
 8003402:	11db      	asrs	r3, r3, #7
 8003404:	b2db      	uxtb	r3, r3
 8003406:	f003 0306 	and.w	r3, r3, #6
 800340a:	b2db      	uxtb	r3, r3
 800340c:	f063 030f 	orn	r3, r3, #15
 8003410:	b2da      	uxtb	r2, r3
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	687a      	ldr	r2, [r7, #4]
 800341c:	490e      	ldr	r1, [pc, #56]	; (8003458 <I2C_MasterRequestWrite+0xfc>)
 800341e:	68f8      	ldr	r0, [r7, #12]
 8003420:	f000 f9d9 	bl	80037d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003424:	4603      	mov	r3, r0
 8003426:	2b00      	cmp	r3, #0
 8003428:	d001      	beq.n	800342e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800342a:	2301      	movs	r3, #1
 800342c:	e010      	b.n	8003450 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800342e:	897b      	ldrh	r3, [r7, #10]
 8003430:	b2da      	uxtb	r2, r3
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	687a      	ldr	r2, [r7, #4]
 800343c:	4907      	ldr	r1, [pc, #28]	; (800345c <I2C_MasterRequestWrite+0x100>)
 800343e:	68f8      	ldr	r0, [r7, #12]
 8003440:	f000 f9c9 	bl	80037d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003444:	4603      	mov	r3, r0
 8003446:	2b00      	cmp	r3, #0
 8003448:	d001      	beq.n	800344e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	e000      	b.n	8003450 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800344e:	2300      	movs	r3, #0
}
 8003450:	4618      	mov	r0, r3
 8003452:	3718      	adds	r7, #24
 8003454:	46bd      	mov	sp, r7
 8003456:	bd80      	pop	{r7, pc}
 8003458:	00010008 	.word	0x00010008
 800345c:	00010002 	.word	0x00010002

08003460 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b088      	sub	sp, #32
 8003464:	af02      	add	r7, sp, #8
 8003466:	60f8      	str	r0, [r7, #12]
 8003468:	607a      	str	r2, [r7, #4]
 800346a:	603b      	str	r3, [r7, #0]
 800346c:	460b      	mov	r3, r1
 800346e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003474:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	681a      	ldr	r2, [r3, #0]
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003484:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	2b08      	cmp	r3, #8
 800348a:	d006      	beq.n	800349a <I2C_MasterRequestRead+0x3a>
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	2b01      	cmp	r3, #1
 8003490:	d003      	beq.n	800349a <I2C_MasterRequestRead+0x3a>
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003498:	d108      	bne.n	80034ac <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	681a      	ldr	r2, [r3, #0]
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80034a8:	601a      	str	r2, [r3, #0]
 80034aa:	e00b      	b.n	80034c4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034b0:	2b11      	cmp	r3, #17
 80034b2:	d107      	bne.n	80034c4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	681a      	ldr	r2, [r3, #0]
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80034c2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	9300      	str	r3, [sp, #0]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2200      	movs	r2, #0
 80034cc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80034d0:	68f8      	ldr	r0, [r7, #12]
 80034d2:	f000 f929 	bl	8003728 <I2C_WaitOnFlagUntilTimeout>
 80034d6:	4603      	mov	r3, r0
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d00d      	beq.n	80034f8 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034ea:	d103      	bne.n	80034f4 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80034f2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80034f4:	2303      	movs	r3, #3
 80034f6:	e079      	b.n	80035ec <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	691b      	ldr	r3, [r3, #16]
 80034fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003500:	d108      	bne.n	8003514 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003502:	897b      	ldrh	r3, [r7, #10]
 8003504:	b2db      	uxtb	r3, r3
 8003506:	f043 0301 	orr.w	r3, r3, #1
 800350a:	b2da      	uxtb	r2, r3
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	611a      	str	r2, [r3, #16]
 8003512:	e05f      	b.n	80035d4 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003514:	897b      	ldrh	r3, [r7, #10]
 8003516:	11db      	asrs	r3, r3, #7
 8003518:	b2db      	uxtb	r3, r3
 800351a:	f003 0306 	and.w	r3, r3, #6
 800351e:	b2db      	uxtb	r3, r3
 8003520:	f063 030f 	orn	r3, r3, #15
 8003524:	b2da      	uxtb	r2, r3
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	687a      	ldr	r2, [r7, #4]
 8003530:	4930      	ldr	r1, [pc, #192]	; (80035f4 <I2C_MasterRequestRead+0x194>)
 8003532:	68f8      	ldr	r0, [r7, #12]
 8003534:	f000 f94f 	bl	80037d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003538:	4603      	mov	r3, r0
 800353a:	2b00      	cmp	r3, #0
 800353c:	d001      	beq.n	8003542 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	e054      	b.n	80035ec <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003542:	897b      	ldrh	r3, [r7, #10]
 8003544:	b2da      	uxtb	r2, r3
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	687a      	ldr	r2, [r7, #4]
 8003550:	4929      	ldr	r1, [pc, #164]	; (80035f8 <I2C_MasterRequestRead+0x198>)
 8003552:	68f8      	ldr	r0, [r7, #12]
 8003554:	f000 f93f 	bl	80037d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003558:	4603      	mov	r3, r0
 800355a:	2b00      	cmp	r3, #0
 800355c:	d001      	beq.n	8003562 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	e044      	b.n	80035ec <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003562:	2300      	movs	r3, #0
 8003564:	613b      	str	r3, [r7, #16]
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	695b      	ldr	r3, [r3, #20]
 800356c:	613b      	str	r3, [r7, #16]
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	699b      	ldr	r3, [r3, #24]
 8003574:	613b      	str	r3, [r7, #16]
 8003576:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	681a      	ldr	r2, [r3, #0]
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003586:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	9300      	str	r3, [sp, #0]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2200      	movs	r2, #0
 8003590:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003594:	68f8      	ldr	r0, [r7, #12]
 8003596:	f000 f8c7 	bl	8003728 <I2C_WaitOnFlagUntilTimeout>
 800359a:	4603      	mov	r3, r0
 800359c:	2b00      	cmp	r3, #0
 800359e:	d00d      	beq.n	80035bc <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035ae:	d103      	bne.n	80035b8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035b6:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80035b8:	2303      	movs	r3, #3
 80035ba:	e017      	b.n	80035ec <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80035bc:	897b      	ldrh	r3, [r7, #10]
 80035be:	11db      	asrs	r3, r3, #7
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	f003 0306 	and.w	r3, r3, #6
 80035c6:	b2db      	uxtb	r3, r3
 80035c8:	f063 030e 	orn	r3, r3, #14
 80035cc:	b2da      	uxtb	r2, r3
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	687a      	ldr	r2, [r7, #4]
 80035d8:	4907      	ldr	r1, [pc, #28]	; (80035f8 <I2C_MasterRequestRead+0x198>)
 80035da:	68f8      	ldr	r0, [r7, #12]
 80035dc:	f000 f8fb 	bl	80037d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80035e0:	4603      	mov	r3, r0
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d001      	beq.n	80035ea <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	e000      	b.n	80035ec <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80035ea:	2300      	movs	r3, #0
}
 80035ec:	4618      	mov	r0, r3
 80035ee:	3718      	adds	r7, #24
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bd80      	pop	{r7, pc}
 80035f4:	00010008 	.word	0x00010008
 80035f8:	00010002 	.word	0x00010002

080035fc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b088      	sub	sp, #32
 8003600:	af02      	add	r7, sp, #8
 8003602:	60f8      	str	r0, [r7, #12]
 8003604:	4608      	mov	r0, r1
 8003606:	4611      	mov	r1, r2
 8003608:	461a      	mov	r2, r3
 800360a:	4603      	mov	r3, r0
 800360c:	817b      	strh	r3, [r7, #10]
 800360e:	460b      	mov	r3, r1
 8003610:	813b      	strh	r3, [r7, #8]
 8003612:	4613      	mov	r3, r2
 8003614:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	681a      	ldr	r2, [r3, #0]
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003624:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003628:	9300      	str	r3, [sp, #0]
 800362a:	6a3b      	ldr	r3, [r7, #32]
 800362c:	2200      	movs	r2, #0
 800362e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003632:	68f8      	ldr	r0, [r7, #12]
 8003634:	f000 f878 	bl	8003728 <I2C_WaitOnFlagUntilTimeout>
 8003638:	4603      	mov	r3, r0
 800363a:	2b00      	cmp	r3, #0
 800363c:	d00d      	beq.n	800365a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003648:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800364c:	d103      	bne.n	8003656 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003654:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003656:	2303      	movs	r3, #3
 8003658:	e05f      	b.n	800371a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800365a:	897b      	ldrh	r3, [r7, #10]
 800365c:	b2db      	uxtb	r3, r3
 800365e:	461a      	mov	r2, r3
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003668:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800366a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800366c:	6a3a      	ldr	r2, [r7, #32]
 800366e:	492d      	ldr	r1, [pc, #180]	; (8003724 <I2C_RequestMemoryWrite+0x128>)
 8003670:	68f8      	ldr	r0, [r7, #12]
 8003672:	f000 f8b0 	bl	80037d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003676:	4603      	mov	r3, r0
 8003678:	2b00      	cmp	r3, #0
 800367a:	d001      	beq.n	8003680 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800367c:	2301      	movs	r3, #1
 800367e:	e04c      	b.n	800371a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003680:	2300      	movs	r3, #0
 8003682:	617b      	str	r3, [r7, #20]
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	695b      	ldr	r3, [r3, #20]
 800368a:	617b      	str	r3, [r7, #20]
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	699b      	ldr	r3, [r3, #24]
 8003692:	617b      	str	r3, [r7, #20]
 8003694:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003696:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003698:	6a39      	ldr	r1, [r7, #32]
 800369a:	68f8      	ldr	r0, [r7, #12]
 800369c:	f000 f91a 	bl	80038d4 <I2C_WaitOnTXEFlagUntilTimeout>
 80036a0:	4603      	mov	r3, r0
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d00d      	beq.n	80036c2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036aa:	2b04      	cmp	r3, #4
 80036ac:	d107      	bne.n	80036be <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	681a      	ldr	r2, [r3, #0]
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036bc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80036be:	2301      	movs	r3, #1
 80036c0:	e02b      	b.n	800371a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80036c2:	88fb      	ldrh	r3, [r7, #6]
 80036c4:	2b01      	cmp	r3, #1
 80036c6:	d105      	bne.n	80036d4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80036c8:	893b      	ldrh	r3, [r7, #8]
 80036ca:	b2da      	uxtb	r2, r3
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	611a      	str	r2, [r3, #16]
 80036d2:	e021      	b.n	8003718 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80036d4:	893b      	ldrh	r3, [r7, #8]
 80036d6:	0a1b      	lsrs	r3, r3, #8
 80036d8:	b29b      	uxth	r3, r3
 80036da:	b2da      	uxtb	r2, r3
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80036e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036e4:	6a39      	ldr	r1, [r7, #32]
 80036e6:	68f8      	ldr	r0, [r7, #12]
 80036e8:	f000 f8f4 	bl	80038d4 <I2C_WaitOnTXEFlagUntilTimeout>
 80036ec:	4603      	mov	r3, r0
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d00d      	beq.n	800370e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f6:	2b04      	cmp	r3, #4
 80036f8:	d107      	bne.n	800370a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	681a      	ldr	r2, [r3, #0]
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003708:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	e005      	b.n	800371a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800370e:	893b      	ldrh	r3, [r7, #8]
 8003710:	b2da      	uxtb	r2, r3
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003718:	2300      	movs	r3, #0
}
 800371a:	4618      	mov	r0, r3
 800371c:	3718      	adds	r7, #24
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}
 8003722:	bf00      	nop
 8003724:	00010002 	.word	0x00010002

08003728 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b084      	sub	sp, #16
 800372c:	af00      	add	r7, sp, #0
 800372e:	60f8      	str	r0, [r7, #12]
 8003730:	60b9      	str	r1, [r7, #8]
 8003732:	603b      	str	r3, [r7, #0]
 8003734:	4613      	mov	r3, r2
 8003736:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003738:	e025      	b.n	8003786 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003740:	d021      	beq.n	8003786 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003742:	f7fe fdc1 	bl	80022c8 <HAL_GetTick>
 8003746:	4602      	mov	r2, r0
 8003748:	69bb      	ldr	r3, [r7, #24]
 800374a:	1ad3      	subs	r3, r2, r3
 800374c:	683a      	ldr	r2, [r7, #0]
 800374e:	429a      	cmp	r2, r3
 8003750:	d302      	bcc.n	8003758 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d116      	bne.n	8003786 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	2200      	movs	r2, #0
 800375c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	2220      	movs	r2, #32
 8003762:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	2200      	movs	r2, #0
 800376a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003772:	f043 0220 	orr.w	r2, r3, #32
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	2200      	movs	r2, #0
 800377e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	e023      	b.n	80037ce <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	0c1b      	lsrs	r3, r3, #16
 800378a:	b2db      	uxtb	r3, r3
 800378c:	2b01      	cmp	r3, #1
 800378e:	d10d      	bne.n	80037ac <I2C_WaitOnFlagUntilTimeout+0x84>
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	695b      	ldr	r3, [r3, #20]
 8003796:	43da      	mvns	r2, r3
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	4013      	ands	r3, r2
 800379c:	b29b      	uxth	r3, r3
 800379e:	2b00      	cmp	r3, #0
 80037a0:	bf0c      	ite	eq
 80037a2:	2301      	moveq	r3, #1
 80037a4:	2300      	movne	r3, #0
 80037a6:	b2db      	uxtb	r3, r3
 80037a8:	461a      	mov	r2, r3
 80037aa:	e00c      	b.n	80037c6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	699b      	ldr	r3, [r3, #24]
 80037b2:	43da      	mvns	r2, r3
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	4013      	ands	r3, r2
 80037b8:	b29b      	uxth	r3, r3
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	bf0c      	ite	eq
 80037be:	2301      	moveq	r3, #1
 80037c0:	2300      	movne	r3, #0
 80037c2:	b2db      	uxtb	r3, r3
 80037c4:	461a      	mov	r2, r3
 80037c6:	79fb      	ldrb	r3, [r7, #7]
 80037c8:	429a      	cmp	r2, r3
 80037ca:	d0b6      	beq.n	800373a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80037cc:	2300      	movs	r3, #0
}
 80037ce:	4618      	mov	r0, r3
 80037d0:	3710      	adds	r7, #16
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}

080037d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80037d6:	b580      	push	{r7, lr}
 80037d8:	b084      	sub	sp, #16
 80037da:	af00      	add	r7, sp, #0
 80037dc:	60f8      	str	r0, [r7, #12]
 80037de:	60b9      	str	r1, [r7, #8]
 80037e0:	607a      	str	r2, [r7, #4]
 80037e2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80037e4:	e051      	b.n	800388a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	695b      	ldr	r3, [r3, #20]
 80037ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037f4:	d123      	bne.n	800383e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	681a      	ldr	r2, [r3, #0]
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003804:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800380e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2200      	movs	r2, #0
 8003814:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	2220      	movs	r2, #32
 800381a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	2200      	movs	r2, #0
 8003822:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800382a:	f043 0204 	orr.w	r2, r3, #4
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	2200      	movs	r2, #0
 8003836:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800383a:	2301      	movs	r3, #1
 800383c:	e046      	b.n	80038cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003844:	d021      	beq.n	800388a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003846:	f7fe fd3f 	bl	80022c8 <HAL_GetTick>
 800384a:	4602      	mov	r2, r0
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	1ad3      	subs	r3, r2, r3
 8003850:	687a      	ldr	r2, [r7, #4]
 8003852:	429a      	cmp	r2, r3
 8003854:	d302      	bcc.n	800385c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d116      	bne.n	800388a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	2200      	movs	r2, #0
 8003860:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2220      	movs	r2, #32
 8003866:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2200      	movs	r2, #0
 800386e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003876:	f043 0220 	orr.w	r2, r3, #32
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	2200      	movs	r2, #0
 8003882:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	e020      	b.n	80038cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	0c1b      	lsrs	r3, r3, #16
 800388e:	b2db      	uxtb	r3, r3
 8003890:	2b01      	cmp	r3, #1
 8003892:	d10c      	bne.n	80038ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	695b      	ldr	r3, [r3, #20]
 800389a:	43da      	mvns	r2, r3
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	4013      	ands	r3, r2
 80038a0:	b29b      	uxth	r3, r3
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	bf14      	ite	ne
 80038a6:	2301      	movne	r3, #1
 80038a8:	2300      	moveq	r3, #0
 80038aa:	b2db      	uxtb	r3, r3
 80038ac:	e00b      	b.n	80038c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	699b      	ldr	r3, [r3, #24]
 80038b4:	43da      	mvns	r2, r3
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	4013      	ands	r3, r2
 80038ba:	b29b      	uxth	r3, r3
 80038bc:	2b00      	cmp	r3, #0
 80038be:	bf14      	ite	ne
 80038c0:	2301      	movne	r3, #1
 80038c2:	2300      	moveq	r3, #0
 80038c4:	b2db      	uxtb	r3, r3
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d18d      	bne.n	80037e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80038ca:	2300      	movs	r3, #0
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	3710      	adds	r7, #16
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}

080038d4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b084      	sub	sp, #16
 80038d8:	af00      	add	r7, sp, #0
 80038da:	60f8      	str	r0, [r7, #12]
 80038dc:	60b9      	str	r1, [r7, #8]
 80038de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80038e0:	e02d      	b.n	800393e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80038e2:	68f8      	ldr	r0, [r7, #12]
 80038e4:	f000 f8ce 	bl	8003a84 <I2C_IsAcknowledgeFailed>
 80038e8:	4603      	mov	r3, r0
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d001      	beq.n	80038f2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80038ee:	2301      	movs	r3, #1
 80038f0:	e02d      	b.n	800394e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038f8:	d021      	beq.n	800393e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038fa:	f7fe fce5 	bl	80022c8 <HAL_GetTick>
 80038fe:	4602      	mov	r2, r0
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	1ad3      	subs	r3, r2, r3
 8003904:	68ba      	ldr	r2, [r7, #8]
 8003906:	429a      	cmp	r2, r3
 8003908:	d302      	bcc.n	8003910 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d116      	bne.n	800393e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	2200      	movs	r2, #0
 8003914:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2220      	movs	r2, #32
 800391a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	2200      	movs	r2, #0
 8003922:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800392a:	f043 0220 	orr.w	r2, r3, #32
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	2200      	movs	r2, #0
 8003936:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	e007      	b.n	800394e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	695b      	ldr	r3, [r3, #20]
 8003944:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003948:	2b80      	cmp	r3, #128	; 0x80
 800394a:	d1ca      	bne.n	80038e2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800394c:	2300      	movs	r3, #0
}
 800394e:	4618      	mov	r0, r3
 8003950:	3710      	adds	r7, #16
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}

08003956 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003956:	b580      	push	{r7, lr}
 8003958:	b084      	sub	sp, #16
 800395a:	af00      	add	r7, sp, #0
 800395c:	60f8      	str	r0, [r7, #12]
 800395e:	60b9      	str	r1, [r7, #8]
 8003960:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003962:	e02d      	b.n	80039c0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003964:	68f8      	ldr	r0, [r7, #12]
 8003966:	f000 f88d 	bl	8003a84 <I2C_IsAcknowledgeFailed>
 800396a:	4603      	mov	r3, r0
 800396c:	2b00      	cmp	r3, #0
 800396e:	d001      	beq.n	8003974 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003970:	2301      	movs	r3, #1
 8003972:	e02d      	b.n	80039d0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	f1b3 3fff 	cmp.w	r3, #4294967295
 800397a:	d021      	beq.n	80039c0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800397c:	f7fe fca4 	bl	80022c8 <HAL_GetTick>
 8003980:	4602      	mov	r2, r0
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	1ad3      	subs	r3, r2, r3
 8003986:	68ba      	ldr	r2, [r7, #8]
 8003988:	429a      	cmp	r2, r3
 800398a:	d302      	bcc.n	8003992 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d116      	bne.n	80039c0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	2200      	movs	r2, #0
 8003996:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	2220      	movs	r2, #32
 800399c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	2200      	movs	r2, #0
 80039a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ac:	f043 0220 	orr.w	r2, r3, #32
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	2200      	movs	r2, #0
 80039b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80039bc:	2301      	movs	r3, #1
 80039be:	e007      	b.n	80039d0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	695b      	ldr	r3, [r3, #20]
 80039c6:	f003 0304 	and.w	r3, r3, #4
 80039ca:	2b04      	cmp	r3, #4
 80039cc:	d1ca      	bne.n	8003964 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80039ce:	2300      	movs	r3, #0
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	3710      	adds	r7, #16
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bd80      	pop	{r7, pc}

080039d8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b084      	sub	sp, #16
 80039dc:	af00      	add	r7, sp, #0
 80039de:	60f8      	str	r0, [r7, #12]
 80039e0:	60b9      	str	r1, [r7, #8]
 80039e2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80039e4:	e042      	b.n	8003a6c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	695b      	ldr	r3, [r3, #20]
 80039ec:	f003 0310 	and.w	r3, r3, #16
 80039f0:	2b10      	cmp	r3, #16
 80039f2:	d119      	bne.n	8003a28 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f06f 0210 	mvn.w	r2, #16
 80039fc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	2200      	movs	r2, #0
 8003a02:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	2220      	movs	r2, #32
 8003a08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003a24:	2301      	movs	r3, #1
 8003a26:	e029      	b.n	8003a7c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a28:	f7fe fc4e 	bl	80022c8 <HAL_GetTick>
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	1ad3      	subs	r3, r2, r3
 8003a32:	68ba      	ldr	r2, [r7, #8]
 8003a34:	429a      	cmp	r2, r3
 8003a36:	d302      	bcc.n	8003a3e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d116      	bne.n	8003a6c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	2200      	movs	r2, #0
 8003a42:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	2220      	movs	r2, #32
 8003a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a58:	f043 0220 	orr.w	r2, r3, #32
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	2200      	movs	r2, #0
 8003a64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	e007      	b.n	8003a7c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	695b      	ldr	r3, [r3, #20]
 8003a72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a76:	2b40      	cmp	r3, #64	; 0x40
 8003a78:	d1b5      	bne.n	80039e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003a7a:	2300      	movs	r3, #0
}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	3710      	adds	r7, #16
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bd80      	pop	{r7, pc}

08003a84 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b083      	sub	sp, #12
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	695b      	ldr	r3, [r3, #20]
 8003a92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a9a:	d11b      	bne.n	8003ad4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003aa4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2220      	movs	r2, #32
 8003ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac0:	f043 0204 	orr.w	r2, r3, #4
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2200      	movs	r2, #0
 8003acc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	e000      	b.n	8003ad6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003ad4:	2300      	movs	r3, #0
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	370c      	adds	r7, #12
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bc80      	pop	{r7}
 8003ade:	4770      	bx	lr

08003ae0 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8003ae4:	4b03      	ldr	r3, [pc, #12]	; (8003af4 <HAL_PWR_EnableBkUpAccess+0x14>)
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	601a      	str	r2, [r3, #0]
}
 8003aea:	bf00      	nop
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bc80      	pop	{r7}
 8003af0:	4770      	bx	lr
 8003af2:	bf00      	nop
 8003af4:	420e0020 	.word	0x420e0020

08003af8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b086      	sub	sp, #24
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d101      	bne.n	8003b0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	e26c      	b.n	8003fe4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f003 0301 	and.w	r3, r3, #1
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	f000 8087 	beq.w	8003c26 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003b18:	4b92      	ldr	r3, [pc, #584]	; (8003d64 <HAL_RCC_OscConfig+0x26c>)
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	f003 030c 	and.w	r3, r3, #12
 8003b20:	2b04      	cmp	r3, #4
 8003b22:	d00c      	beq.n	8003b3e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003b24:	4b8f      	ldr	r3, [pc, #572]	; (8003d64 <HAL_RCC_OscConfig+0x26c>)
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	f003 030c 	and.w	r3, r3, #12
 8003b2c:	2b08      	cmp	r3, #8
 8003b2e:	d112      	bne.n	8003b56 <HAL_RCC_OscConfig+0x5e>
 8003b30:	4b8c      	ldr	r3, [pc, #560]	; (8003d64 <HAL_RCC_OscConfig+0x26c>)
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b3c:	d10b      	bne.n	8003b56 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b3e:	4b89      	ldr	r3, [pc, #548]	; (8003d64 <HAL_RCC_OscConfig+0x26c>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d06c      	beq.n	8003c24 <HAL_RCC_OscConfig+0x12c>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d168      	bne.n	8003c24 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	e246      	b.n	8003fe4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b5e:	d106      	bne.n	8003b6e <HAL_RCC_OscConfig+0x76>
 8003b60:	4b80      	ldr	r3, [pc, #512]	; (8003d64 <HAL_RCC_OscConfig+0x26c>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a7f      	ldr	r2, [pc, #508]	; (8003d64 <HAL_RCC_OscConfig+0x26c>)
 8003b66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b6a:	6013      	str	r3, [r2, #0]
 8003b6c:	e02e      	b.n	8003bcc <HAL_RCC_OscConfig+0xd4>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d10c      	bne.n	8003b90 <HAL_RCC_OscConfig+0x98>
 8003b76:	4b7b      	ldr	r3, [pc, #492]	; (8003d64 <HAL_RCC_OscConfig+0x26c>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4a7a      	ldr	r2, [pc, #488]	; (8003d64 <HAL_RCC_OscConfig+0x26c>)
 8003b7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b80:	6013      	str	r3, [r2, #0]
 8003b82:	4b78      	ldr	r3, [pc, #480]	; (8003d64 <HAL_RCC_OscConfig+0x26c>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a77      	ldr	r2, [pc, #476]	; (8003d64 <HAL_RCC_OscConfig+0x26c>)
 8003b88:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b8c:	6013      	str	r3, [r2, #0]
 8003b8e:	e01d      	b.n	8003bcc <HAL_RCC_OscConfig+0xd4>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b98:	d10c      	bne.n	8003bb4 <HAL_RCC_OscConfig+0xbc>
 8003b9a:	4b72      	ldr	r3, [pc, #456]	; (8003d64 <HAL_RCC_OscConfig+0x26c>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a71      	ldr	r2, [pc, #452]	; (8003d64 <HAL_RCC_OscConfig+0x26c>)
 8003ba0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ba4:	6013      	str	r3, [r2, #0]
 8003ba6:	4b6f      	ldr	r3, [pc, #444]	; (8003d64 <HAL_RCC_OscConfig+0x26c>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a6e      	ldr	r2, [pc, #440]	; (8003d64 <HAL_RCC_OscConfig+0x26c>)
 8003bac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bb0:	6013      	str	r3, [r2, #0]
 8003bb2:	e00b      	b.n	8003bcc <HAL_RCC_OscConfig+0xd4>
 8003bb4:	4b6b      	ldr	r3, [pc, #428]	; (8003d64 <HAL_RCC_OscConfig+0x26c>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a6a      	ldr	r2, [pc, #424]	; (8003d64 <HAL_RCC_OscConfig+0x26c>)
 8003bba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bbe:	6013      	str	r3, [r2, #0]
 8003bc0:	4b68      	ldr	r3, [pc, #416]	; (8003d64 <HAL_RCC_OscConfig+0x26c>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a67      	ldr	r2, [pc, #412]	; (8003d64 <HAL_RCC_OscConfig+0x26c>)
 8003bc6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003bca:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d013      	beq.n	8003bfc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bd4:	f7fe fb78 	bl	80022c8 <HAL_GetTick>
 8003bd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bda:	e008      	b.n	8003bee <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bdc:	f7fe fb74 	bl	80022c8 <HAL_GetTick>
 8003be0:	4602      	mov	r2, r0
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	1ad3      	subs	r3, r2, r3
 8003be6:	2b64      	cmp	r3, #100	; 0x64
 8003be8:	d901      	bls.n	8003bee <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003bea:	2303      	movs	r3, #3
 8003bec:	e1fa      	b.n	8003fe4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bee:	4b5d      	ldr	r3, [pc, #372]	; (8003d64 <HAL_RCC_OscConfig+0x26c>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d0f0      	beq.n	8003bdc <HAL_RCC_OscConfig+0xe4>
 8003bfa:	e014      	b.n	8003c26 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bfc:	f7fe fb64 	bl	80022c8 <HAL_GetTick>
 8003c00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c02:	e008      	b.n	8003c16 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c04:	f7fe fb60 	bl	80022c8 <HAL_GetTick>
 8003c08:	4602      	mov	r2, r0
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	1ad3      	subs	r3, r2, r3
 8003c0e:	2b64      	cmp	r3, #100	; 0x64
 8003c10:	d901      	bls.n	8003c16 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003c12:	2303      	movs	r3, #3
 8003c14:	e1e6      	b.n	8003fe4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c16:	4b53      	ldr	r3, [pc, #332]	; (8003d64 <HAL_RCC_OscConfig+0x26c>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d1f0      	bne.n	8003c04 <HAL_RCC_OscConfig+0x10c>
 8003c22:	e000      	b.n	8003c26 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f003 0302 	and.w	r3, r3, #2
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d063      	beq.n	8003cfa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003c32:	4b4c      	ldr	r3, [pc, #304]	; (8003d64 <HAL_RCC_OscConfig+0x26c>)
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	f003 030c 	and.w	r3, r3, #12
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d00b      	beq.n	8003c56 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003c3e:	4b49      	ldr	r3, [pc, #292]	; (8003d64 <HAL_RCC_OscConfig+0x26c>)
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	f003 030c 	and.w	r3, r3, #12
 8003c46:	2b08      	cmp	r3, #8
 8003c48:	d11c      	bne.n	8003c84 <HAL_RCC_OscConfig+0x18c>
 8003c4a:	4b46      	ldr	r3, [pc, #280]	; (8003d64 <HAL_RCC_OscConfig+0x26c>)
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d116      	bne.n	8003c84 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c56:	4b43      	ldr	r3, [pc, #268]	; (8003d64 <HAL_RCC_OscConfig+0x26c>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f003 0302 	and.w	r3, r3, #2
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d005      	beq.n	8003c6e <HAL_RCC_OscConfig+0x176>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	691b      	ldr	r3, [r3, #16]
 8003c66:	2b01      	cmp	r3, #1
 8003c68:	d001      	beq.n	8003c6e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	e1ba      	b.n	8003fe4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c6e:	4b3d      	ldr	r3, [pc, #244]	; (8003d64 <HAL_RCC_OscConfig+0x26c>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	695b      	ldr	r3, [r3, #20]
 8003c7a:	00db      	lsls	r3, r3, #3
 8003c7c:	4939      	ldr	r1, [pc, #228]	; (8003d64 <HAL_RCC_OscConfig+0x26c>)
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c82:	e03a      	b.n	8003cfa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	691b      	ldr	r3, [r3, #16]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d020      	beq.n	8003cce <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c8c:	4b36      	ldr	r3, [pc, #216]	; (8003d68 <HAL_RCC_OscConfig+0x270>)
 8003c8e:	2201      	movs	r2, #1
 8003c90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c92:	f7fe fb19 	bl	80022c8 <HAL_GetTick>
 8003c96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c98:	e008      	b.n	8003cac <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c9a:	f7fe fb15 	bl	80022c8 <HAL_GetTick>
 8003c9e:	4602      	mov	r2, r0
 8003ca0:	693b      	ldr	r3, [r7, #16]
 8003ca2:	1ad3      	subs	r3, r2, r3
 8003ca4:	2b02      	cmp	r3, #2
 8003ca6:	d901      	bls.n	8003cac <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003ca8:	2303      	movs	r3, #3
 8003caa:	e19b      	b.n	8003fe4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cac:	4b2d      	ldr	r3, [pc, #180]	; (8003d64 <HAL_RCC_OscConfig+0x26c>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f003 0302 	and.w	r3, r3, #2
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d0f0      	beq.n	8003c9a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cb8:	4b2a      	ldr	r3, [pc, #168]	; (8003d64 <HAL_RCC_OscConfig+0x26c>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	695b      	ldr	r3, [r3, #20]
 8003cc4:	00db      	lsls	r3, r3, #3
 8003cc6:	4927      	ldr	r1, [pc, #156]	; (8003d64 <HAL_RCC_OscConfig+0x26c>)
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	600b      	str	r3, [r1, #0]
 8003ccc:	e015      	b.n	8003cfa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003cce:	4b26      	ldr	r3, [pc, #152]	; (8003d68 <HAL_RCC_OscConfig+0x270>)
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cd4:	f7fe faf8 	bl	80022c8 <HAL_GetTick>
 8003cd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cda:	e008      	b.n	8003cee <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003cdc:	f7fe faf4 	bl	80022c8 <HAL_GetTick>
 8003ce0:	4602      	mov	r2, r0
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	1ad3      	subs	r3, r2, r3
 8003ce6:	2b02      	cmp	r3, #2
 8003ce8:	d901      	bls.n	8003cee <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003cea:	2303      	movs	r3, #3
 8003cec:	e17a      	b.n	8003fe4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cee:	4b1d      	ldr	r3, [pc, #116]	; (8003d64 <HAL_RCC_OscConfig+0x26c>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f003 0302 	and.w	r3, r3, #2
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d1f0      	bne.n	8003cdc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f003 0308 	and.w	r3, r3, #8
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d03a      	beq.n	8003d7c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	699b      	ldr	r3, [r3, #24]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d019      	beq.n	8003d42 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d0e:	4b17      	ldr	r3, [pc, #92]	; (8003d6c <HAL_RCC_OscConfig+0x274>)
 8003d10:	2201      	movs	r2, #1
 8003d12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d14:	f7fe fad8 	bl	80022c8 <HAL_GetTick>
 8003d18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d1a:	e008      	b.n	8003d2e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d1c:	f7fe fad4 	bl	80022c8 <HAL_GetTick>
 8003d20:	4602      	mov	r2, r0
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	1ad3      	subs	r3, r2, r3
 8003d26:	2b02      	cmp	r3, #2
 8003d28:	d901      	bls.n	8003d2e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003d2a:	2303      	movs	r3, #3
 8003d2c:	e15a      	b.n	8003fe4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d2e:	4b0d      	ldr	r3, [pc, #52]	; (8003d64 <HAL_RCC_OscConfig+0x26c>)
 8003d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d32:	f003 0302 	and.w	r3, r3, #2
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d0f0      	beq.n	8003d1c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003d3a:	2001      	movs	r0, #1
 8003d3c:	f000 fad8 	bl	80042f0 <RCC_Delay>
 8003d40:	e01c      	b.n	8003d7c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d42:	4b0a      	ldr	r3, [pc, #40]	; (8003d6c <HAL_RCC_OscConfig+0x274>)
 8003d44:	2200      	movs	r2, #0
 8003d46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d48:	f7fe fabe 	bl	80022c8 <HAL_GetTick>
 8003d4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d4e:	e00f      	b.n	8003d70 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d50:	f7fe faba 	bl	80022c8 <HAL_GetTick>
 8003d54:	4602      	mov	r2, r0
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	1ad3      	subs	r3, r2, r3
 8003d5a:	2b02      	cmp	r3, #2
 8003d5c:	d908      	bls.n	8003d70 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003d5e:	2303      	movs	r3, #3
 8003d60:	e140      	b.n	8003fe4 <HAL_RCC_OscConfig+0x4ec>
 8003d62:	bf00      	nop
 8003d64:	40021000 	.word	0x40021000
 8003d68:	42420000 	.word	0x42420000
 8003d6c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d70:	4b9e      	ldr	r3, [pc, #632]	; (8003fec <HAL_RCC_OscConfig+0x4f4>)
 8003d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d74:	f003 0302 	and.w	r3, r3, #2
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d1e9      	bne.n	8003d50 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f003 0304 	and.w	r3, r3, #4
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	f000 80a6 	beq.w	8003ed6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d8e:	4b97      	ldr	r3, [pc, #604]	; (8003fec <HAL_RCC_OscConfig+0x4f4>)
 8003d90:	69db      	ldr	r3, [r3, #28]
 8003d92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d10d      	bne.n	8003db6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d9a:	4b94      	ldr	r3, [pc, #592]	; (8003fec <HAL_RCC_OscConfig+0x4f4>)
 8003d9c:	69db      	ldr	r3, [r3, #28]
 8003d9e:	4a93      	ldr	r2, [pc, #588]	; (8003fec <HAL_RCC_OscConfig+0x4f4>)
 8003da0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003da4:	61d3      	str	r3, [r2, #28]
 8003da6:	4b91      	ldr	r3, [pc, #580]	; (8003fec <HAL_RCC_OscConfig+0x4f4>)
 8003da8:	69db      	ldr	r3, [r3, #28]
 8003daa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dae:	60bb      	str	r3, [r7, #8]
 8003db0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003db2:	2301      	movs	r3, #1
 8003db4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003db6:	4b8e      	ldr	r3, [pc, #568]	; (8003ff0 <HAL_RCC_OscConfig+0x4f8>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d118      	bne.n	8003df4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003dc2:	4b8b      	ldr	r3, [pc, #556]	; (8003ff0 <HAL_RCC_OscConfig+0x4f8>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a8a      	ldr	r2, [pc, #552]	; (8003ff0 <HAL_RCC_OscConfig+0x4f8>)
 8003dc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dcc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003dce:	f7fe fa7b 	bl	80022c8 <HAL_GetTick>
 8003dd2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dd4:	e008      	b.n	8003de8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dd6:	f7fe fa77 	bl	80022c8 <HAL_GetTick>
 8003dda:	4602      	mov	r2, r0
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	1ad3      	subs	r3, r2, r3
 8003de0:	2b64      	cmp	r3, #100	; 0x64
 8003de2:	d901      	bls.n	8003de8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003de4:	2303      	movs	r3, #3
 8003de6:	e0fd      	b.n	8003fe4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003de8:	4b81      	ldr	r3, [pc, #516]	; (8003ff0 <HAL_RCC_OscConfig+0x4f8>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d0f0      	beq.n	8003dd6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	68db      	ldr	r3, [r3, #12]
 8003df8:	2b01      	cmp	r3, #1
 8003dfa:	d106      	bne.n	8003e0a <HAL_RCC_OscConfig+0x312>
 8003dfc:	4b7b      	ldr	r3, [pc, #492]	; (8003fec <HAL_RCC_OscConfig+0x4f4>)
 8003dfe:	6a1b      	ldr	r3, [r3, #32]
 8003e00:	4a7a      	ldr	r2, [pc, #488]	; (8003fec <HAL_RCC_OscConfig+0x4f4>)
 8003e02:	f043 0301 	orr.w	r3, r3, #1
 8003e06:	6213      	str	r3, [r2, #32]
 8003e08:	e02d      	b.n	8003e66 <HAL_RCC_OscConfig+0x36e>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	68db      	ldr	r3, [r3, #12]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d10c      	bne.n	8003e2c <HAL_RCC_OscConfig+0x334>
 8003e12:	4b76      	ldr	r3, [pc, #472]	; (8003fec <HAL_RCC_OscConfig+0x4f4>)
 8003e14:	6a1b      	ldr	r3, [r3, #32]
 8003e16:	4a75      	ldr	r2, [pc, #468]	; (8003fec <HAL_RCC_OscConfig+0x4f4>)
 8003e18:	f023 0301 	bic.w	r3, r3, #1
 8003e1c:	6213      	str	r3, [r2, #32]
 8003e1e:	4b73      	ldr	r3, [pc, #460]	; (8003fec <HAL_RCC_OscConfig+0x4f4>)
 8003e20:	6a1b      	ldr	r3, [r3, #32]
 8003e22:	4a72      	ldr	r2, [pc, #456]	; (8003fec <HAL_RCC_OscConfig+0x4f4>)
 8003e24:	f023 0304 	bic.w	r3, r3, #4
 8003e28:	6213      	str	r3, [r2, #32]
 8003e2a:	e01c      	b.n	8003e66 <HAL_RCC_OscConfig+0x36e>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	68db      	ldr	r3, [r3, #12]
 8003e30:	2b05      	cmp	r3, #5
 8003e32:	d10c      	bne.n	8003e4e <HAL_RCC_OscConfig+0x356>
 8003e34:	4b6d      	ldr	r3, [pc, #436]	; (8003fec <HAL_RCC_OscConfig+0x4f4>)
 8003e36:	6a1b      	ldr	r3, [r3, #32]
 8003e38:	4a6c      	ldr	r2, [pc, #432]	; (8003fec <HAL_RCC_OscConfig+0x4f4>)
 8003e3a:	f043 0304 	orr.w	r3, r3, #4
 8003e3e:	6213      	str	r3, [r2, #32]
 8003e40:	4b6a      	ldr	r3, [pc, #424]	; (8003fec <HAL_RCC_OscConfig+0x4f4>)
 8003e42:	6a1b      	ldr	r3, [r3, #32]
 8003e44:	4a69      	ldr	r2, [pc, #420]	; (8003fec <HAL_RCC_OscConfig+0x4f4>)
 8003e46:	f043 0301 	orr.w	r3, r3, #1
 8003e4a:	6213      	str	r3, [r2, #32]
 8003e4c:	e00b      	b.n	8003e66 <HAL_RCC_OscConfig+0x36e>
 8003e4e:	4b67      	ldr	r3, [pc, #412]	; (8003fec <HAL_RCC_OscConfig+0x4f4>)
 8003e50:	6a1b      	ldr	r3, [r3, #32]
 8003e52:	4a66      	ldr	r2, [pc, #408]	; (8003fec <HAL_RCC_OscConfig+0x4f4>)
 8003e54:	f023 0301 	bic.w	r3, r3, #1
 8003e58:	6213      	str	r3, [r2, #32]
 8003e5a:	4b64      	ldr	r3, [pc, #400]	; (8003fec <HAL_RCC_OscConfig+0x4f4>)
 8003e5c:	6a1b      	ldr	r3, [r3, #32]
 8003e5e:	4a63      	ldr	r2, [pc, #396]	; (8003fec <HAL_RCC_OscConfig+0x4f4>)
 8003e60:	f023 0304 	bic.w	r3, r3, #4
 8003e64:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	68db      	ldr	r3, [r3, #12]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d015      	beq.n	8003e9a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e6e:	f7fe fa2b 	bl	80022c8 <HAL_GetTick>
 8003e72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e74:	e00a      	b.n	8003e8c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e76:	f7fe fa27 	bl	80022c8 <HAL_GetTick>
 8003e7a:	4602      	mov	r2, r0
 8003e7c:	693b      	ldr	r3, [r7, #16]
 8003e7e:	1ad3      	subs	r3, r2, r3
 8003e80:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d901      	bls.n	8003e8c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003e88:	2303      	movs	r3, #3
 8003e8a:	e0ab      	b.n	8003fe4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e8c:	4b57      	ldr	r3, [pc, #348]	; (8003fec <HAL_RCC_OscConfig+0x4f4>)
 8003e8e:	6a1b      	ldr	r3, [r3, #32]
 8003e90:	f003 0302 	and.w	r3, r3, #2
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d0ee      	beq.n	8003e76 <HAL_RCC_OscConfig+0x37e>
 8003e98:	e014      	b.n	8003ec4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e9a:	f7fe fa15 	bl	80022c8 <HAL_GetTick>
 8003e9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ea0:	e00a      	b.n	8003eb8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ea2:	f7fe fa11 	bl	80022c8 <HAL_GetTick>
 8003ea6:	4602      	mov	r2, r0
 8003ea8:	693b      	ldr	r3, [r7, #16]
 8003eaa:	1ad3      	subs	r3, r2, r3
 8003eac:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d901      	bls.n	8003eb8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003eb4:	2303      	movs	r3, #3
 8003eb6:	e095      	b.n	8003fe4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003eb8:	4b4c      	ldr	r3, [pc, #304]	; (8003fec <HAL_RCC_OscConfig+0x4f4>)
 8003eba:	6a1b      	ldr	r3, [r3, #32]
 8003ebc:	f003 0302 	and.w	r3, r3, #2
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d1ee      	bne.n	8003ea2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003ec4:	7dfb      	ldrb	r3, [r7, #23]
 8003ec6:	2b01      	cmp	r3, #1
 8003ec8:	d105      	bne.n	8003ed6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003eca:	4b48      	ldr	r3, [pc, #288]	; (8003fec <HAL_RCC_OscConfig+0x4f4>)
 8003ecc:	69db      	ldr	r3, [r3, #28]
 8003ece:	4a47      	ldr	r2, [pc, #284]	; (8003fec <HAL_RCC_OscConfig+0x4f4>)
 8003ed0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ed4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	69db      	ldr	r3, [r3, #28]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	f000 8081 	beq.w	8003fe2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003ee0:	4b42      	ldr	r3, [pc, #264]	; (8003fec <HAL_RCC_OscConfig+0x4f4>)
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	f003 030c 	and.w	r3, r3, #12
 8003ee8:	2b08      	cmp	r3, #8
 8003eea:	d061      	beq.n	8003fb0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	69db      	ldr	r3, [r3, #28]
 8003ef0:	2b02      	cmp	r3, #2
 8003ef2:	d146      	bne.n	8003f82 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ef4:	4b3f      	ldr	r3, [pc, #252]	; (8003ff4 <HAL_RCC_OscConfig+0x4fc>)
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003efa:	f7fe f9e5 	bl	80022c8 <HAL_GetTick>
 8003efe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f00:	e008      	b.n	8003f14 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f02:	f7fe f9e1 	bl	80022c8 <HAL_GetTick>
 8003f06:	4602      	mov	r2, r0
 8003f08:	693b      	ldr	r3, [r7, #16]
 8003f0a:	1ad3      	subs	r3, r2, r3
 8003f0c:	2b02      	cmp	r3, #2
 8003f0e:	d901      	bls.n	8003f14 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003f10:	2303      	movs	r3, #3
 8003f12:	e067      	b.n	8003fe4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f14:	4b35      	ldr	r3, [pc, #212]	; (8003fec <HAL_RCC_OscConfig+0x4f4>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d1f0      	bne.n	8003f02 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6a1b      	ldr	r3, [r3, #32]
 8003f24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f28:	d108      	bne.n	8003f3c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003f2a:	4b30      	ldr	r3, [pc, #192]	; (8003fec <HAL_RCC_OscConfig+0x4f4>)
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	689b      	ldr	r3, [r3, #8]
 8003f36:	492d      	ldr	r1, [pc, #180]	; (8003fec <HAL_RCC_OscConfig+0x4f4>)
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f3c:	4b2b      	ldr	r3, [pc, #172]	; (8003fec <HAL_RCC_OscConfig+0x4f4>)
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6a19      	ldr	r1, [r3, #32]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f4c:	430b      	orrs	r3, r1
 8003f4e:	4927      	ldr	r1, [pc, #156]	; (8003fec <HAL_RCC_OscConfig+0x4f4>)
 8003f50:	4313      	orrs	r3, r2
 8003f52:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f54:	4b27      	ldr	r3, [pc, #156]	; (8003ff4 <HAL_RCC_OscConfig+0x4fc>)
 8003f56:	2201      	movs	r2, #1
 8003f58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f5a:	f7fe f9b5 	bl	80022c8 <HAL_GetTick>
 8003f5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003f60:	e008      	b.n	8003f74 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f62:	f7fe f9b1 	bl	80022c8 <HAL_GetTick>
 8003f66:	4602      	mov	r2, r0
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	1ad3      	subs	r3, r2, r3
 8003f6c:	2b02      	cmp	r3, #2
 8003f6e:	d901      	bls.n	8003f74 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003f70:	2303      	movs	r3, #3
 8003f72:	e037      	b.n	8003fe4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003f74:	4b1d      	ldr	r3, [pc, #116]	; (8003fec <HAL_RCC_OscConfig+0x4f4>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d0f0      	beq.n	8003f62 <HAL_RCC_OscConfig+0x46a>
 8003f80:	e02f      	b.n	8003fe2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f82:	4b1c      	ldr	r3, [pc, #112]	; (8003ff4 <HAL_RCC_OscConfig+0x4fc>)
 8003f84:	2200      	movs	r2, #0
 8003f86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f88:	f7fe f99e 	bl	80022c8 <HAL_GetTick>
 8003f8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f8e:	e008      	b.n	8003fa2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f90:	f7fe f99a 	bl	80022c8 <HAL_GetTick>
 8003f94:	4602      	mov	r2, r0
 8003f96:	693b      	ldr	r3, [r7, #16]
 8003f98:	1ad3      	subs	r3, r2, r3
 8003f9a:	2b02      	cmp	r3, #2
 8003f9c:	d901      	bls.n	8003fa2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003f9e:	2303      	movs	r3, #3
 8003fa0:	e020      	b.n	8003fe4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003fa2:	4b12      	ldr	r3, [pc, #72]	; (8003fec <HAL_RCC_OscConfig+0x4f4>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d1f0      	bne.n	8003f90 <HAL_RCC_OscConfig+0x498>
 8003fae:	e018      	b.n	8003fe2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	69db      	ldr	r3, [r3, #28]
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	d101      	bne.n	8003fbc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	e013      	b.n	8003fe4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003fbc:	4b0b      	ldr	r3, [pc, #44]	; (8003fec <HAL_RCC_OscConfig+0x4f4>)
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6a1b      	ldr	r3, [r3, #32]
 8003fcc:	429a      	cmp	r2, r3
 8003fce:	d106      	bne.n	8003fde <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fda:	429a      	cmp	r2, r3
 8003fdc:	d001      	beq.n	8003fe2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	e000      	b.n	8003fe4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003fe2:	2300      	movs	r3, #0
}
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	3718      	adds	r7, #24
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bd80      	pop	{r7, pc}
 8003fec:	40021000 	.word	0x40021000
 8003ff0:	40007000 	.word	0x40007000
 8003ff4:	42420060 	.word	0x42420060

08003ff8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b084      	sub	sp, #16
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
 8004000:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d101      	bne.n	800400c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004008:	2301      	movs	r3, #1
 800400a:	e0d0      	b.n	80041ae <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800400c:	4b6a      	ldr	r3, [pc, #424]	; (80041b8 <HAL_RCC_ClockConfig+0x1c0>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f003 0307 	and.w	r3, r3, #7
 8004014:	683a      	ldr	r2, [r7, #0]
 8004016:	429a      	cmp	r2, r3
 8004018:	d910      	bls.n	800403c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800401a:	4b67      	ldr	r3, [pc, #412]	; (80041b8 <HAL_RCC_ClockConfig+0x1c0>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f023 0207 	bic.w	r2, r3, #7
 8004022:	4965      	ldr	r1, [pc, #404]	; (80041b8 <HAL_RCC_ClockConfig+0x1c0>)
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	4313      	orrs	r3, r2
 8004028:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800402a:	4b63      	ldr	r3, [pc, #396]	; (80041b8 <HAL_RCC_ClockConfig+0x1c0>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f003 0307 	and.w	r3, r3, #7
 8004032:	683a      	ldr	r2, [r7, #0]
 8004034:	429a      	cmp	r2, r3
 8004036:	d001      	beq.n	800403c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004038:	2301      	movs	r3, #1
 800403a:	e0b8      	b.n	80041ae <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f003 0302 	and.w	r3, r3, #2
 8004044:	2b00      	cmp	r3, #0
 8004046:	d020      	beq.n	800408a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f003 0304 	and.w	r3, r3, #4
 8004050:	2b00      	cmp	r3, #0
 8004052:	d005      	beq.n	8004060 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004054:	4b59      	ldr	r3, [pc, #356]	; (80041bc <HAL_RCC_ClockConfig+0x1c4>)
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	4a58      	ldr	r2, [pc, #352]	; (80041bc <HAL_RCC_ClockConfig+0x1c4>)
 800405a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800405e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f003 0308 	and.w	r3, r3, #8
 8004068:	2b00      	cmp	r3, #0
 800406a:	d005      	beq.n	8004078 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800406c:	4b53      	ldr	r3, [pc, #332]	; (80041bc <HAL_RCC_ClockConfig+0x1c4>)
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	4a52      	ldr	r2, [pc, #328]	; (80041bc <HAL_RCC_ClockConfig+0x1c4>)
 8004072:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004076:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004078:	4b50      	ldr	r3, [pc, #320]	; (80041bc <HAL_RCC_ClockConfig+0x1c4>)
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	689b      	ldr	r3, [r3, #8]
 8004084:	494d      	ldr	r1, [pc, #308]	; (80041bc <HAL_RCC_ClockConfig+0x1c4>)
 8004086:	4313      	orrs	r3, r2
 8004088:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f003 0301 	and.w	r3, r3, #1
 8004092:	2b00      	cmp	r3, #0
 8004094:	d040      	beq.n	8004118 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	2b01      	cmp	r3, #1
 800409c:	d107      	bne.n	80040ae <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800409e:	4b47      	ldr	r3, [pc, #284]	; (80041bc <HAL_RCC_ClockConfig+0x1c4>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d115      	bne.n	80040d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040aa:	2301      	movs	r3, #1
 80040ac:	e07f      	b.n	80041ae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	2b02      	cmp	r3, #2
 80040b4:	d107      	bne.n	80040c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040b6:	4b41      	ldr	r3, [pc, #260]	; (80041bc <HAL_RCC_ClockConfig+0x1c4>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d109      	bne.n	80040d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040c2:	2301      	movs	r3, #1
 80040c4:	e073      	b.n	80041ae <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040c6:	4b3d      	ldr	r3, [pc, #244]	; (80041bc <HAL_RCC_ClockConfig+0x1c4>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f003 0302 	and.w	r3, r3, #2
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d101      	bne.n	80040d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040d2:	2301      	movs	r3, #1
 80040d4:	e06b      	b.n	80041ae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80040d6:	4b39      	ldr	r3, [pc, #228]	; (80041bc <HAL_RCC_ClockConfig+0x1c4>)
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	f023 0203 	bic.w	r2, r3, #3
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	4936      	ldr	r1, [pc, #216]	; (80041bc <HAL_RCC_ClockConfig+0x1c4>)
 80040e4:	4313      	orrs	r3, r2
 80040e6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80040e8:	f7fe f8ee 	bl	80022c8 <HAL_GetTick>
 80040ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040ee:	e00a      	b.n	8004106 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040f0:	f7fe f8ea 	bl	80022c8 <HAL_GetTick>
 80040f4:	4602      	mov	r2, r0
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	1ad3      	subs	r3, r2, r3
 80040fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80040fe:	4293      	cmp	r3, r2
 8004100:	d901      	bls.n	8004106 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004102:	2303      	movs	r3, #3
 8004104:	e053      	b.n	80041ae <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004106:	4b2d      	ldr	r3, [pc, #180]	; (80041bc <HAL_RCC_ClockConfig+0x1c4>)
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	f003 020c 	and.w	r2, r3, #12
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	009b      	lsls	r3, r3, #2
 8004114:	429a      	cmp	r2, r3
 8004116:	d1eb      	bne.n	80040f0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004118:	4b27      	ldr	r3, [pc, #156]	; (80041b8 <HAL_RCC_ClockConfig+0x1c0>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f003 0307 	and.w	r3, r3, #7
 8004120:	683a      	ldr	r2, [r7, #0]
 8004122:	429a      	cmp	r2, r3
 8004124:	d210      	bcs.n	8004148 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004126:	4b24      	ldr	r3, [pc, #144]	; (80041b8 <HAL_RCC_ClockConfig+0x1c0>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f023 0207 	bic.w	r2, r3, #7
 800412e:	4922      	ldr	r1, [pc, #136]	; (80041b8 <HAL_RCC_ClockConfig+0x1c0>)
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	4313      	orrs	r3, r2
 8004134:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004136:	4b20      	ldr	r3, [pc, #128]	; (80041b8 <HAL_RCC_ClockConfig+0x1c0>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f003 0307 	and.w	r3, r3, #7
 800413e:	683a      	ldr	r2, [r7, #0]
 8004140:	429a      	cmp	r2, r3
 8004142:	d001      	beq.n	8004148 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004144:	2301      	movs	r3, #1
 8004146:	e032      	b.n	80041ae <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f003 0304 	and.w	r3, r3, #4
 8004150:	2b00      	cmp	r3, #0
 8004152:	d008      	beq.n	8004166 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004154:	4b19      	ldr	r3, [pc, #100]	; (80041bc <HAL_RCC_ClockConfig+0x1c4>)
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	68db      	ldr	r3, [r3, #12]
 8004160:	4916      	ldr	r1, [pc, #88]	; (80041bc <HAL_RCC_ClockConfig+0x1c4>)
 8004162:	4313      	orrs	r3, r2
 8004164:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f003 0308 	and.w	r3, r3, #8
 800416e:	2b00      	cmp	r3, #0
 8004170:	d009      	beq.n	8004186 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004172:	4b12      	ldr	r3, [pc, #72]	; (80041bc <HAL_RCC_ClockConfig+0x1c4>)
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	691b      	ldr	r3, [r3, #16]
 800417e:	00db      	lsls	r3, r3, #3
 8004180:	490e      	ldr	r1, [pc, #56]	; (80041bc <HAL_RCC_ClockConfig+0x1c4>)
 8004182:	4313      	orrs	r3, r2
 8004184:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004186:	f000 f821 	bl	80041cc <HAL_RCC_GetSysClockFreq>
 800418a:	4602      	mov	r2, r0
 800418c:	4b0b      	ldr	r3, [pc, #44]	; (80041bc <HAL_RCC_ClockConfig+0x1c4>)
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	091b      	lsrs	r3, r3, #4
 8004192:	f003 030f 	and.w	r3, r3, #15
 8004196:	490a      	ldr	r1, [pc, #40]	; (80041c0 <HAL_RCC_ClockConfig+0x1c8>)
 8004198:	5ccb      	ldrb	r3, [r1, r3]
 800419a:	fa22 f303 	lsr.w	r3, r2, r3
 800419e:	4a09      	ldr	r2, [pc, #36]	; (80041c4 <HAL_RCC_ClockConfig+0x1cc>)
 80041a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80041a2:	4b09      	ldr	r3, [pc, #36]	; (80041c8 <HAL_RCC_ClockConfig+0x1d0>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4618      	mov	r0, r3
 80041a8:	f7fe f84c 	bl	8002244 <HAL_InitTick>

  return HAL_OK;
 80041ac:	2300      	movs	r3, #0
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	3710      	adds	r7, #16
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}
 80041b6:	bf00      	nop
 80041b8:	40022000 	.word	0x40022000
 80041bc:	40021000 	.word	0x40021000
 80041c0:	0800762c 	.word	0x0800762c
 80041c4:	20000000 	.word	0x20000000
 80041c8:	20000004 	.word	0x20000004

080041cc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041cc:	b490      	push	{r4, r7}
 80041ce:	b08a      	sub	sp, #40	; 0x28
 80041d0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80041d2:	4b2a      	ldr	r3, [pc, #168]	; (800427c <HAL_RCC_GetSysClockFreq+0xb0>)
 80041d4:	1d3c      	adds	r4, r7, #4
 80041d6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80041d8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80041dc:	f240 2301 	movw	r3, #513	; 0x201
 80041e0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80041e2:	2300      	movs	r3, #0
 80041e4:	61fb      	str	r3, [r7, #28]
 80041e6:	2300      	movs	r3, #0
 80041e8:	61bb      	str	r3, [r7, #24]
 80041ea:	2300      	movs	r3, #0
 80041ec:	627b      	str	r3, [r7, #36]	; 0x24
 80041ee:	2300      	movs	r3, #0
 80041f0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80041f2:	2300      	movs	r3, #0
 80041f4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80041f6:	4b22      	ldr	r3, [pc, #136]	; (8004280 <HAL_RCC_GetSysClockFreq+0xb4>)
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80041fc:	69fb      	ldr	r3, [r7, #28]
 80041fe:	f003 030c 	and.w	r3, r3, #12
 8004202:	2b04      	cmp	r3, #4
 8004204:	d002      	beq.n	800420c <HAL_RCC_GetSysClockFreq+0x40>
 8004206:	2b08      	cmp	r3, #8
 8004208:	d003      	beq.n	8004212 <HAL_RCC_GetSysClockFreq+0x46>
 800420a:	e02d      	b.n	8004268 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800420c:	4b1d      	ldr	r3, [pc, #116]	; (8004284 <HAL_RCC_GetSysClockFreq+0xb8>)
 800420e:	623b      	str	r3, [r7, #32]
      break;
 8004210:	e02d      	b.n	800426e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004212:	69fb      	ldr	r3, [r7, #28]
 8004214:	0c9b      	lsrs	r3, r3, #18
 8004216:	f003 030f 	and.w	r3, r3, #15
 800421a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800421e:	4413      	add	r3, r2
 8004220:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004224:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004226:	69fb      	ldr	r3, [r7, #28]
 8004228:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800422c:	2b00      	cmp	r3, #0
 800422e:	d013      	beq.n	8004258 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004230:	4b13      	ldr	r3, [pc, #76]	; (8004280 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	0c5b      	lsrs	r3, r3, #17
 8004236:	f003 0301 	and.w	r3, r3, #1
 800423a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800423e:	4413      	add	r3, r2
 8004240:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004244:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	4a0e      	ldr	r2, [pc, #56]	; (8004284 <HAL_RCC_GetSysClockFreq+0xb8>)
 800424a:	fb02 f203 	mul.w	r2, r2, r3
 800424e:	69bb      	ldr	r3, [r7, #24]
 8004250:	fbb2 f3f3 	udiv	r3, r2, r3
 8004254:	627b      	str	r3, [r7, #36]	; 0x24
 8004256:	e004      	b.n	8004262 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004258:	697b      	ldr	r3, [r7, #20]
 800425a:	4a0b      	ldr	r2, [pc, #44]	; (8004288 <HAL_RCC_GetSysClockFreq+0xbc>)
 800425c:	fb02 f303 	mul.w	r3, r2, r3
 8004260:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004264:	623b      	str	r3, [r7, #32]
      break;
 8004266:	e002      	b.n	800426e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004268:	4b06      	ldr	r3, [pc, #24]	; (8004284 <HAL_RCC_GetSysClockFreq+0xb8>)
 800426a:	623b      	str	r3, [r7, #32]
      break;
 800426c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800426e:	6a3b      	ldr	r3, [r7, #32]
}
 8004270:	4618      	mov	r0, r3
 8004272:	3728      	adds	r7, #40	; 0x28
 8004274:	46bd      	mov	sp, r7
 8004276:	bc90      	pop	{r4, r7}
 8004278:	4770      	bx	lr
 800427a:	bf00      	nop
 800427c:	0800760c 	.word	0x0800760c
 8004280:	40021000 	.word	0x40021000
 8004284:	007a1200 	.word	0x007a1200
 8004288:	003d0900 	.word	0x003d0900

0800428c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800428c:	b480      	push	{r7}
 800428e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004290:	4b02      	ldr	r3, [pc, #8]	; (800429c <HAL_RCC_GetHCLKFreq+0x10>)
 8004292:	681b      	ldr	r3, [r3, #0]
}
 8004294:	4618      	mov	r0, r3
 8004296:	46bd      	mov	sp, r7
 8004298:	bc80      	pop	{r7}
 800429a:	4770      	bx	lr
 800429c:	20000000 	.word	0x20000000

080042a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80042a4:	f7ff fff2 	bl	800428c <HAL_RCC_GetHCLKFreq>
 80042a8:	4602      	mov	r2, r0
 80042aa:	4b05      	ldr	r3, [pc, #20]	; (80042c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	0a1b      	lsrs	r3, r3, #8
 80042b0:	f003 0307 	and.w	r3, r3, #7
 80042b4:	4903      	ldr	r1, [pc, #12]	; (80042c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80042b6:	5ccb      	ldrb	r3, [r1, r3]
 80042b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042bc:	4618      	mov	r0, r3
 80042be:	bd80      	pop	{r7, pc}
 80042c0:	40021000 	.word	0x40021000
 80042c4:	0800763c 	.word	0x0800763c

080042c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80042cc:	f7ff ffde 	bl	800428c <HAL_RCC_GetHCLKFreq>
 80042d0:	4602      	mov	r2, r0
 80042d2:	4b05      	ldr	r3, [pc, #20]	; (80042e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	0adb      	lsrs	r3, r3, #11
 80042d8:	f003 0307 	and.w	r3, r3, #7
 80042dc:	4903      	ldr	r1, [pc, #12]	; (80042ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80042de:	5ccb      	ldrb	r3, [r1, r3]
 80042e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042e4:	4618      	mov	r0, r3
 80042e6:	bd80      	pop	{r7, pc}
 80042e8:	40021000 	.word	0x40021000
 80042ec:	0800763c 	.word	0x0800763c

080042f0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80042f0:	b480      	push	{r7}
 80042f2:	b085      	sub	sp, #20
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80042f8:	4b0a      	ldr	r3, [pc, #40]	; (8004324 <RCC_Delay+0x34>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a0a      	ldr	r2, [pc, #40]	; (8004328 <RCC_Delay+0x38>)
 80042fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004302:	0a5b      	lsrs	r3, r3, #9
 8004304:	687a      	ldr	r2, [r7, #4]
 8004306:	fb02 f303 	mul.w	r3, r2, r3
 800430a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800430c:	bf00      	nop
  }
  while (Delay --);
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	1e5a      	subs	r2, r3, #1
 8004312:	60fa      	str	r2, [r7, #12]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d1f9      	bne.n	800430c <RCC_Delay+0x1c>
}
 8004318:	bf00      	nop
 800431a:	bf00      	nop
 800431c:	3714      	adds	r7, #20
 800431e:	46bd      	mov	sp, r7
 8004320:	bc80      	pop	{r7}
 8004322:	4770      	bx	lr
 8004324:	20000000 	.word	0x20000000
 8004328:	10624dd3 	.word	0x10624dd3

0800432c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b086      	sub	sp, #24
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004334:	2300      	movs	r3, #0
 8004336:	613b      	str	r3, [r7, #16]
 8004338:	2300      	movs	r3, #0
 800433a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f003 0301 	and.w	r3, r3, #1
 8004344:	2b00      	cmp	r3, #0
 8004346:	d07d      	beq.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004348:	2300      	movs	r3, #0
 800434a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800434c:	4b4f      	ldr	r3, [pc, #316]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800434e:	69db      	ldr	r3, [r3, #28]
 8004350:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004354:	2b00      	cmp	r3, #0
 8004356:	d10d      	bne.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004358:	4b4c      	ldr	r3, [pc, #304]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800435a:	69db      	ldr	r3, [r3, #28]
 800435c:	4a4b      	ldr	r2, [pc, #300]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800435e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004362:	61d3      	str	r3, [r2, #28]
 8004364:	4b49      	ldr	r3, [pc, #292]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004366:	69db      	ldr	r3, [r3, #28]
 8004368:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800436c:	60bb      	str	r3, [r7, #8]
 800436e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004370:	2301      	movs	r3, #1
 8004372:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004374:	4b46      	ldr	r3, [pc, #280]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800437c:	2b00      	cmp	r3, #0
 800437e:	d118      	bne.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004380:	4b43      	ldr	r3, [pc, #268]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a42      	ldr	r2, [pc, #264]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004386:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800438a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800438c:	f7fd ff9c 	bl	80022c8 <HAL_GetTick>
 8004390:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004392:	e008      	b.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004394:	f7fd ff98 	bl	80022c8 <HAL_GetTick>
 8004398:	4602      	mov	r2, r0
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	1ad3      	subs	r3, r2, r3
 800439e:	2b64      	cmp	r3, #100	; 0x64
 80043a0:	d901      	bls.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80043a2:	2303      	movs	r3, #3
 80043a4:	e06d      	b.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043a6:	4b3a      	ldr	r3, [pc, #232]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d0f0      	beq.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80043b2:	4b36      	ldr	r3, [pc, #216]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043b4:	6a1b      	ldr	r3, [r3, #32]
 80043b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043ba:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d02e      	beq.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043ca:	68fa      	ldr	r2, [r7, #12]
 80043cc:	429a      	cmp	r2, r3
 80043ce:	d027      	beq.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80043d0:	4b2e      	ldr	r3, [pc, #184]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043d2:	6a1b      	ldr	r3, [r3, #32]
 80043d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043d8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80043da:	4b2e      	ldr	r3, [pc, #184]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80043dc:	2201      	movs	r2, #1
 80043de:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80043e0:	4b2c      	ldr	r3, [pc, #176]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80043e2:	2200      	movs	r2, #0
 80043e4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80043e6:	4a29      	ldr	r2, [pc, #164]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	f003 0301 	and.w	r3, r3, #1
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d014      	beq.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043f6:	f7fd ff67 	bl	80022c8 <HAL_GetTick>
 80043fa:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043fc:	e00a      	b.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043fe:	f7fd ff63 	bl	80022c8 <HAL_GetTick>
 8004402:	4602      	mov	r2, r0
 8004404:	693b      	ldr	r3, [r7, #16]
 8004406:	1ad3      	subs	r3, r2, r3
 8004408:	f241 3288 	movw	r2, #5000	; 0x1388
 800440c:	4293      	cmp	r3, r2
 800440e:	d901      	bls.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004410:	2303      	movs	r3, #3
 8004412:	e036      	b.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004414:	4b1d      	ldr	r3, [pc, #116]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004416:	6a1b      	ldr	r3, [r3, #32]
 8004418:	f003 0302 	and.w	r3, r3, #2
 800441c:	2b00      	cmp	r3, #0
 800441e:	d0ee      	beq.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004420:	4b1a      	ldr	r3, [pc, #104]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004422:	6a1b      	ldr	r3, [r3, #32]
 8004424:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	4917      	ldr	r1, [pc, #92]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800442e:	4313      	orrs	r3, r2
 8004430:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004432:	7dfb      	ldrb	r3, [r7, #23]
 8004434:	2b01      	cmp	r3, #1
 8004436:	d105      	bne.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004438:	4b14      	ldr	r3, [pc, #80]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800443a:	69db      	ldr	r3, [r3, #28]
 800443c:	4a13      	ldr	r2, [pc, #76]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800443e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004442:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f003 0302 	and.w	r3, r3, #2
 800444c:	2b00      	cmp	r3, #0
 800444e:	d008      	beq.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004450:	4b0e      	ldr	r3, [pc, #56]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	689b      	ldr	r3, [r3, #8]
 800445c:	490b      	ldr	r1, [pc, #44]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800445e:	4313      	orrs	r3, r2
 8004460:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f003 0310 	and.w	r3, r3, #16
 800446a:	2b00      	cmp	r3, #0
 800446c:	d008      	beq.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800446e:	4b07      	ldr	r3, [pc, #28]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	68db      	ldr	r3, [r3, #12]
 800447a:	4904      	ldr	r1, [pc, #16]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800447c:	4313      	orrs	r3, r2
 800447e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004480:	2300      	movs	r3, #0
}
 8004482:	4618      	mov	r0, r3
 8004484:	3718      	adds	r7, #24
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}
 800448a:	bf00      	nop
 800448c:	40021000 	.word	0x40021000
 8004490:	40007000 	.word	0x40007000
 8004494:	42420440 	.word	0x42420440

08004498 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004498:	b590      	push	{r4, r7, lr}
 800449a:	b08d      	sub	sp, #52	; 0x34
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80044a0:	4b5a      	ldr	r3, [pc, #360]	; (800460c <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 80044a2:	f107 040c 	add.w	r4, r7, #12
 80044a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80044a8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80044ac:	f240 2301 	movw	r3, #513	; 0x201
 80044b0:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80044b2:	2300      	movs	r3, #0
 80044b4:	627b      	str	r3, [r7, #36]	; 0x24
 80044b6:	2300      	movs	r3, #0
 80044b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80044ba:	2300      	movs	r3, #0
 80044bc:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80044be:	2300      	movs	r3, #0
 80044c0:	61fb      	str	r3, [r7, #28]
 80044c2:	2300      	movs	r3, #0
 80044c4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2b10      	cmp	r3, #16
 80044ca:	d00a      	beq.n	80044e2 <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2b10      	cmp	r3, #16
 80044d0:	f200 8091 	bhi.w	80045f6 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2b01      	cmp	r3, #1
 80044d8:	d04c      	beq.n	8004574 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2b02      	cmp	r3, #2
 80044de:	d07c      	beq.n	80045da <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80044e0:	e089      	b.n	80045f6 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
      temp_reg = RCC->CFGR;
 80044e2:	4b4b      	ldr	r3, [pc, #300]	; (8004610 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80044e8:	4b49      	ldr	r3, [pc, #292]	; (8004610 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	f000 8082 	beq.w	80045fa <HAL_RCCEx_GetPeriphCLKFreq+0x162>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80044f6:	69fb      	ldr	r3, [r7, #28]
 80044f8:	0c9b      	lsrs	r3, r3, #18
 80044fa:	f003 030f 	and.w	r3, r3, #15
 80044fe:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004502:	4413      	add	r3, r2
 8004504:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004508:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800450a:	69fb      	ldr	r3, [r7, #28]
 800450c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004510:	2b00      	cmp	r3, #0
 8004512:	d018      	beq.n	8004546 <HAL_RCCEx_GetPeriphCLKFreq+0xae>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004514:	4b3e      	ldr	r3, [pc, #248]	; (8004610 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	0c5b      	lsrs	r3, r3, #17
 800451a:	f003 0301 	and.w	r3, r3, #1
 800451e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004522:	4413      	add	r3, r2
 8004524:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004528:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800452a:	69fb      	ldr	r3, [r7, #28]
 800452c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004530:	2b00      	cmp	r3, #0
 8004532:	d00d      	beq.n	8004550 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8004534:	4a37      	ldr	r2, [pc, #220]	; (8004614 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8004536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004538:	fbb2 f2f3 	udiv	r2, r2, r3
 800453c:	6a3b      	ldr	r3, [r7, #32]
 800453e:	fb02 f303 	mul.w	r3, r2, r3
 8004542:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004544:	e004      	b.n	8004550 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004546:	6a3b      	ldr	r3, [r7, #32]
 8004548:	4a33      	ldr	r2, [pc, #204]	; (8004618 <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 800454a:	fb02 f303 	mul.w	r3, r2, r3
 800454e:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8004550:	4b2f      	ldr	r3, [pc, #188]	; (8004610 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004558:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800455c:	d102      	bne.n	8004564 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
          frequency = pllclk;
 800455e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004560:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004562:	e04a      	b.n	80045fa <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = (pllclk * 2) / 3;
 8004564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004566:	005b      	lsls	r3, r3, #1
 8004568:	4a2c      	ldr	r2, [pc, #176]	; (800461c <HAL_RCCEx_GetPeriphCLKFreq+0x184>)
 800456a:	fba2 2303 	umull	r2, r3, r2, r3
 800456e:	085b      	lsrs	r3, r3, #1
 8004570:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004572:	e042      	b.n	80045fa <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      temp_reg = RCC->BDCR;
 8004574:	4b26      	ldr	r3, [pc, #152]	; (8004610 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8004576:	6a1b      	ldr	r3, [r3, #32]
 8004578:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800457a:	69fb      	ldr	r3, [r7, #28]
 800457c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004580:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004584:	d108      	bne.n	8004598 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8004586:	69fb      	ldr	r3, [r7, #28]
 8004588:	f003 0302 	and.w	r3, r3, #2
 800458c:	2b00      	cmp	r3, #0
 800458e:	d003      	beq.n	8004598 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSE_VALUE;
 8004590:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004594:	62bb      	str	r3, [r7, #40]	; 0x28
 8004596:	e01f      	b.n	80045d8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8004598:	69fb      	ldr	r3, [r7, #28]
 800459a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800459e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80045a2:	d109      	bne.n	80045b8 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 80045a4:	4b1a      	ldr	r3, [pc, #104]	; (8004610 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80045a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a8:	f003 0302 	and.w	r3, r3, #2
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d003      	beq.n	80045b8 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
        frequency = LSI_VALUE;
 80045b0:	f649 4340 	movw	r3, #40000	; 0x9c40
 80045b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80045b6:	e00f      	b.n	80045d8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80045b8:	69fb      	ldr	r3, [r7, #28]
 80045ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80045c2:	d11c      	bne.n	80045fe <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 80045c4:	4b12      	ldr	r3, [pc, #72]	; (8004610 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d016      	beq.n	80045fe <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        frequency = HSE_VALUE / 128U;
 80045d0:	f24f 4324 	movw	r3, #62500	; 0xf424
 80045d4:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80045d6:	e012      	b.n	80045fe <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 80045d8:	e011      	b.n	80045fe <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80045da:	f7ff fe75 	bl	80042c8 <HAL_RCC_GetPCLK2Freq>
 80045de:	4602      	mov	r2, r0
 80045e0:	4b0b      	ldr	r3, [pc, #44]	; (8004610 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	0b9b      	lsrs	r3, r3, #14
 80045e6:	f003 0303 	and.w	r3, r3, #3
 80045ea:	3301      	adds	r3, #1
 80045ec:	005b      	lsls	r3, r3, #1
 80045ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80045f2:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80045f4:	e004      	b.n	8004600 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 80045f6:	bf00      	nop
 80045f8:	e002      	b.n	8004600 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 80045fa:	bf00      	nop
 80045fc:	e000      	b.n	8004600 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 80045fe:	bf00      	nop
    }
  }
  return (frequency);
 8004600:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8004602:	4618      	mov	r0, r3
 8004604:	3734      	adds	r7, #52	; 0x34
 8004606:	46bd      	mov	sp, r7
 8004608:	bd90      	pop	{r4, r7, pc}
 800460a:	bf00      	nop
 800460c:	0800761c 	.word	0x0800761c
 8004610:	40021000 	.word	0x40021000
 8004614:	007a1200 	.word	0x007a1200
 8004618:	003d0900 	.word	0x003d0900
 800461c:	aaaaaaab 	.word	0xaaaaaaab

08004620 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b084      	sub	sp, #16
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8004628:	2300      	movs	r3, #0
 800462a:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d101      	bne.n	8004636 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8004632:	2301      	movs	r3, #1
 8004634:	e084      	b.n	8004740 <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	7c5b      	ldrb	r3, [r3, #17]
 800463a:	b2db      	uxtb	r3, r3
 800463c:	2b00      	cmp	r3, #0
 800463e:	d105      	bne.n	800464c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2200      	movs	r2, #0
 8004644:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004646:	6878      	ldr	r0, [r7, #4]
 8004648:	f7fd fcee 	bl	8002028 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2202      	movs	r2, #2
 8004650:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004652:	6878      	ldr	r0, [r7, #4]
 8004654:	f000 faf4 	bl	8004c40 <HAL_RTC_WaitForSynchro>
 8004658:	4603      	mov	r3, r0
 800465a:	2b00      	cmp	r3, #0
 800465c:	d004      	beq.n	8004668 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2204      	movs	r2, #4
 8004662:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8004664:	2301      	movs	r3, #1
 8004666:	e06b      	b.n	8004740 <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004668:	6878      	ldr	r0, [r7, #4]
 800466a:	f000 fbad 	bl	8004dc8 <RTC_EnterInitMode>
 800466e:	4603      	mov	r3, r0
 8004670:	2b00      	cmp	r3, #0
 8004672:	d004      	beq.n	800467e <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2204      	movs	r2, #4
 8004678:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 800467a:	2301      	movs	r3, #1
 800467c:	e060      	b.n	8004740 <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	685a      	ldr	r2, [r3, #4]
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f022 0207 	bic.w	r2, r2, #7
 800468c:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	689b      	ldr	r3, [r3, #8]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d005      	beq.n	80046a2 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8004696:	4b2c      	ldr	r3, [pc, #176]	; (8004748 <HAL_RTC_Init+0x128>)
 8004698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800469a:	4a2b      	ldr	r2, [pc, #172]	; (8004748 <HAL_RTC_Init+0x128>)
 800469c:	f023 0301 	bic.w	r3, r3, #1
 80046a0:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 80046a2:	4b29      	ldr	r3, [pc, #164]	; (8004748 <HAL_RTC_Init+0x128>)
 80046a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046a6:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	689b      	ldr	r3, [r3, #8]
 80046ae:	4926      	ldr	r1, [pc, #152]	; (8004748 <HAL_RTC_Init+0x128>)
 80046b0:	4313      	orrs	r3, r2
 80046b2:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046bc:	d003      	beq.n	80046c6 <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	60fb      	str	r3, [r7, #12]
 80046c4:	e00e      	b.n	80046e4 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 80046c6:	2001      	movs	r0, #1
 80046c8:	f7ff fee6 	bl	8004498 <HAL_RCCEx_GetPeriphCLKFreq>
 80046cc:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d104      	bne.n	80046de <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2204      	movs	r2, #4
 80046d8:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 80046da:	2301      	movs	r3, #1
 80046dc:	e030      	b.n	8004740 <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	3b01      	subs	r3, #1
 80046e2:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	689b      	ldr	r3, [r3, #8]
 80046ea:	f023 010f 	bic.w	r1, r3, #15
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	0c1a      	lsrs	r2, r3, #16
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	430a      	orrs	r2, r1
 80046f8:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	68db      	ldr	r3, [r3, #12]
 8004700:	0c1b      	lsrs	r3, r3, #16
 8004702:	041b      	lsls	r3, r3, #16
 8004704:	68fa      	ldr	r2, [r7, #12]
 8004706:	b291      	uxth	r1, r2
 8004708:	687a      	ldr	r2, [r7, #4]
 800470a:	6812      	ldr	r2, [r2, #0]
 800470c:	430b      	orrs	r3, r1
 800470e:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8004710:	6878      	ldr	r0, [r7, #4]
 8004712:	f000 fb81 	bl	8004e18 <RTC_ExitInitMode>
 8004716:	4603      	mov	r3, r0
 8004718:	2b00      	cmp	r3, #0
 800471a:	d004      	beq.n	8004726 <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2204      	movs	r2, #4
 8004720:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8004722:	2301      	movs	r3, #1
 8004724:	e00c      	b.n	8004740 <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2200      	movs	r2, #0
 800472a:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2201      	movs	r2, #1
 8004730:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2201      	movs	r2, #1
 8004736:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2201      	movs	r2, #1
 800473c:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 800473e:	2300      	movs	r3, #0
  }
}
 8004740:	4618      	mov	r0, r3
 8004742:	3710      	adds	r7, #16
 8004744:	46bd      	mov	sp, r7
 8004746:	bd80      	pop	{r7, pc}
 8004748:	40006c00 	.word	0x40006c00

0800474c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800474c:	b590      	push	{r4, r7, lr}
 800474e:	b087      	sub	sp, #28
 8004750:	af00      	add	r7, sp, #0
 8004752:	60f8      	str	r0, [r7, #12]
 8004754:	60b9      	str	r1, [r7, #8]
 8004756:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8004758:	2300      	movs	r3, #0
 800475a:	617b      	str	r3, [r7, #20]
 800475c:	2300      	movs	r3, #0
 800475e:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d002      	beq.n	800476c <HAL_RTC_SetTime+0x20>
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d101      	bne.n	8004770 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 800476c:	2301      	movs	r3, #1
 800476e:	e080      	b.n	8004872 <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	7c1b      	ldrb	r3, [r3, #16]
 8004774:	2b01      	cmp	r3, #1
 8004776:	d101      	bne.n	800477c <HAL_RTC_SetTime+0x30>
 8004778:	2302      	movs	r3, #2
 800477a:	e07a      	b.n	8004872 <HAL_RTC_SetTime+0x126>
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	2201      	movs	r2, #1
 8004780:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	2202      	movs	r2, #2
 8004786:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d113      	bne.n	80047b6 <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	781b      	ldrb	r3, [r3, #0]
 8004792:	461a      	mov	r2, r3
 8004794:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8004798:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	785b      	ldrb	r3, [r3, #1]
 80047a0:	4619      	mov	r1, r3
 80047a2:	460b      	mov	r3, r1
 80047a4:	011b      	lsls	r3, r3, #4
 80047a6:	1a5b      	subs	r3, r3, r1
 80047a8:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80047aa:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 80047ac:	68ba      	ldr	r2, [r7, #8]
 80047ae:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80047b0:	4413      	add	r3, r2
 80047b2:	617b      	str	r3, [r7, #20]
 80047b4:	e01e      	b.n	80047f4 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	781b      	ldrb	r3, [r3, #0]
 80047ba:	4618      	mov	r0, r3
 80047bc:	f000 fb71 	bl	8004ea2 <RTC_Bcd2ToByte>
 80047c0:	4603      	mov	r3, r0
 80047c2:	461a      	mov	r2, r3
 80047c4:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80047c8:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	785b      	ldrb	r3, [r3, #1]
 80047d0:	4618      	mov	r0, r3
 80047d2:	f000 fb66 	bl	8004ea2 <RTC_Bcd2ToByte>
 80047d6:	4603      	mov	r3, r0
 80047d8:	461a      	mov	r2, r3
 80047da:	4613      	mov	r3, r2
 80047dc:	011b      	lsls	r3, r3, #4
 80047de:	1a9b      	subs	r3, r3, r2
 80047e0:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80047e2:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	789b      	ldrb	r3, [r3, #2]
 80047e8:	4618      	mov	r0, r3
 80047ea:	f000 fb5a 	bl	8004ea2 <RTC_Bcd2ToByte>
 80047ee:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80047f0:	4423      	add	r3, r4
 80047f2:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80047f4:	6979      	ldr	r1, [r7, #20]
 80047f6:	68f8      	ldr	r0, [r7, #12]
 80047f8:	f000 fa7f 	bl	8004cfa <RTC_WriteTimeCounter>
 80047fc:	4603      	mov	r3, r0
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d007      	beq.n	8004812 <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	2204      	movs	r2, #4
 8004806:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	2200      	movs	r2, #0
 800480c:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 800480e:	2301      	movs	r3, #1
 8004810:	e02f      	b.n	8004872 <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	685a      	ldr	r2, [r3, #4]
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f022 0205 	bic.w	r2, r2, #5
 8004820:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8004822:	68f8      	ldr	r0, [r7, #12]
 8004824:	f000 fa90 	bl	8004d48 <RTC_ReadAlarmCounter>
 8004828:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 800482a:	693b      	ldr	r3, [r7, #16]
 800482c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004830:	d018      	beq.n	8004864 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 8004832:	693a      	ldr	r2, [r7, #16]
 8004834:	697b      	ldr	r3, [r7, #20]
 8004836:	429a      	cmp	r2, r3
 8004838:	d214      	bcs.n	8004864 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8004840:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8004844:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8004846:	6939      	ldr	r1, [r7, #16]
 8004848:	68f8      	ldr	r0, [r7, #12]
 800484a:	f000 fa96 	bl	8004d7a <RTC_WriteAlarmCounter>
 800484e:	4603      	mov	r3, r0
 8004850:	2b00      	cmp	r3, #0
 8004852:	d007      	beq.n	8004864 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	2204      	movs	r2, #4
 8004858:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	2200      	movs	r2, #0
 800485e:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8004860:	2301      	movs	r3, #1
 8004862:	e006      	b.n	8004872 <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	2201      	movs	r2, #1
 8004868:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	2200      	movs	r2, #0
 800486e:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8004870:	2300      	movs	r3, #0
  }
}
 8004872:	4618      	mov	r0, r3
 8004874:	371c      	adds	r7, #28
 8004876:	46bd      	mov	sp, r7
 8004878:	bd90      	pop	{r4, r7, pc}
	...

0800487c <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b088      	sub	sp, #32
 8004880:	af00      	add	r7, sp, #0
 8004882:	60f8      	str	r0, [r7, #12]
 8004884:	60b9      	str	r1, [r7, #8]
 8004886:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 8004888:	2300      	movs	r3, #0
 800488a:	61bb      	str	r3, [r7, #24]
 800488c:	2300      	movs	r3, #0
 800488e:	61fb      	str	r3, [r7, #28]
 8004890:	2300      	movs	r3, #0
 8004892:	617b      	str	r3, [r7, #20]
 8004894:	2300      	movs	r3, #0
 8004896:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d002      	beq.n	80048a4 <HAL_RTC_GetTime+0x28>
 800489e:	68bb      	ldr	r3, [r7, #8]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d101      	bne.n	80048a8 <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 80048a4:	2301      	movs	r3, #1
 80048a6:	e0b5      	b.n	8004a14 <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	f003 0304 	and.w	r3, r3, #4
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d001      	beq.n	80048ba <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 80048b6:	2301      	movs	r3, #1
 80048b8:	e0ac      	b.n	8004a14 <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 80048ba:	68f8      	ldr	r0, [r7, #12]
 80048bc:	f000 f9ed 	bl	8004c9a <RTC_ReadTimeCounter>
 80048c0:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 80048c2:	69bb      	ldr	r3, [r7, #24]
 80048c4:	4a55      	ldr	r2, [pc, #340]	; (8004a1c <HAL_RTC_GetTime+0x1a0>)
 80048c6:	fba2 2303 	umull	r2, r3, r2, r3
 80048ca:	0adb      	lsrs	r3, r3, #11
 80048cc:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 80048ce:	69ba      	ldr	r2, [r7, #24]
 80048d0:	4b52      	ldr	r3, [pc, #328]	; (8004a1c <HAL_RTC_GetTime+0x1a0>)
 80048d2:	fba3 1302 	umull	r1, r3, r3, r2
 80048d6:	0adb      	lsrs	r3, r3, #11
 80048d8:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80048dc:	fb01 f303 	mul.w	r3, r1, r3
 80048e0:	1ad3      	subs	r3, r2, r3
 80048e2:	4a4f      	ldr	r2, [pc, #316]	; (8004a20 <HAL_RTC_GetTime+0x1a4>)
 80048e4:	fba2 2303 	umull	r2, r3, r2, r3
 80048e8:	095b      	lsrs	r3, r3, #5
 80048ea:	b2da      	uxtb	r2, r3
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 80048f0:	69bb      	ldr	r3, [r7, #24]
 80048f2:	4a4a      	ldr	r2, [pc, #296]	; (8004a1c <HAL_RTC_GetTime+0x1a0>)
 80048f4:	fba2 1203 	umull	r1, r2, r2, r3
 80048f8:	0ad2      	lsrs	r2, r2, #11
 80048fa:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80048fe:	fb01 f202 	mul.w	r2, r1, r2
 8004902:	1a9a      	subs	r2, r3, r2
 8004904:	4b46      	ldr	r3, [pc, #280]	; (8004a20 <HAL_RTC_GetTime+0x1a4>)
 8004906:	fba3 1302 	umull	r1, r3, r3, r2
 800490a:	0959      	lsrs	r1, r3, #5
 800490c:	460b      	mov	r3, r1
 800490e:	011b      	lsls	r3, r3, #4
 8004910:	1a5b      	subs	r3, r3, r1
 8004912:	009b      	lsls	r3, r3, #2
 8004914:	1ad1      	subs	r1, r2, r3
 8004916:	b2ca      	uxtb	r2, r1
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 800491c:	693b      	ldr	r3, [r7, #16]
 800491e:	2b17      	cmp	r3, #23
 8004920:	d955      	bls.n	80049ce <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 8004922:	693b      	ldr	r3, [r7, #16]
 8004924:	4a3f      	ldr	r2, [pc, #252]	; (8004a24 <HAL_RTC_GetTime+0x1a8>)
 8004926:	fba2 2303 	umull	r2, r3, r2, r3
 800492a:	091b      	lsrs	r3, r3, #4
 800492c:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 800492e:	6939      	ldr	r1, [r7, #16]
 8004930:	4b3c      	ldr	r3, [pc, #240]	; (8004a24 <HAL_RTC_GetTime+0x1a8>)
 8004932:	fba3 2301 	umull	r2, r3, r3, r1
 8004936:	091a      	lsrs	r2, r3, #4
 8004938:	4613      	mov	r3, r2
 800493a:	005b      	lsls	r3, r3, #1
 800493c:	4413      	add	r3, r2
 800493e:	00db      	lsls	r3, r3, #3
 8004940:	1aca      	subs	r2, r1, r3
 8004942:	b2d2      	uxtb	r2, r2
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8004948:	68f8      	ldr	r0, [r7, #12]
 800494a:	f000 f9fd 	bl	8004d48 <RTC_ReadAlarmCounter>
 800494e:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 8004950:	69fb      	ldr	r3, [r7, #28]
 8004952:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004956:	d008      	beq.n	800496a <HAL_RTC_GetTime+0xee>
 8004958:	69fa      	ldr	r2, [r7, #28]
 800495a:	69bb      	ldr	r3, [r7, #24]
 800495c:	429a      	cmp	r2, r3
 800495e:	d904      	bls.n	800496a <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 8004960:	69fa      	ldr	r2, [r7, #28]
 8004962:	69bb      	ldr	r3, [r7, #24]
 8004964:	1ad3      	subs	r3, r2, r3
 8004966:	61fb      	str	r3, [r7, #28]
 8004968:	e002      	b.n	8004970 <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 800496a:	f04f 33ff 	mov.w	r3, #4294967295
 800496e:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 8004970:	697b      	ldr	r3, [r7, #20]
 8004972:	4a2d      	ldr	r2, [pc, #180]	; (8004a28 <HAL_RTC_GetTime+0x1ac>)
 8004974:	fb02 f303 	mul.w	r3, r2, r3
 8004978:	69ba      	ldr	r2, [r7, #24]
 800497a:	1ad3      	subs	r3, r2, r3
 800497c:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 800497e:	69b9      	ldr	r1, [r7, #24]
 8004980:	68f8      	ldr	r0, [r7, #12]
 8004982:	f000 f9ba 	bl	8004cfa <RTC_WriteTimeCounter>
 8004986:	4603      	mov	r3, r0
 8004988:	2b00      	cmp	r3, #0
 800498a:	d001      	beq.n	8004990 <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 800498c:	2301      	movs	r3, #1
 800498e:	e041      	b.n	8004a14 <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8004990:	69fb      	ldr	r3, [r7, #28]
 8004992:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004996:	d00c      	beq.n	80049b2 <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 8004998:	69fa      	ldr	r2, [r7, #28]
 800499a:	69bb      	ldr	r3, [r7, #24]
 800499c:	4413      	add	r3, r2
 800499e:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80049a0:	69f9      	ldr	r1, [r7, #28]
 80049a2:	68f8      	ldr	r0, [r7, #12]
 80049a4:	f000 f9e9 	bl	8004d7a <RTC_WriteAlarmCounter>
 80049a8:	4603      	mov	r3, r0
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d00a      	beq.n	80049c4 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	e030      	b.n	8004a14 <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80049b2:	69f9      	ldr	r1, [r7, #28]
 80049b4:	68f8      	ldr	r0, [r7, #12]
 80049b6:	f000 f9e0 	bl	8004d7a <RTC_WriteAlarmCounter>
 80049ba:	4603      	mov	r3, r0
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d001      	beq.n	80049c4 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 80049c0:	2301      	movs	r3, #1
 80049c2:	e027      	b.n	8004a14 <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 80049c4:	6979      	ldr	r1, [r7, #20]
 80049c6:	68f8      	ldr	r0, [r7, #12]
 80049c8:	f000 fa88 	bl	8004edc <RTC_DateUpdate>
 80049cc:	e003      	b.n	80049d6 <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 80049ce:	693b      	ldr	r3, [r7, #16]
 80049d0:	b2da      	uxtb	r2, r3
 80049d2:	68bb      	ldr	r3, [r7, #8]
 80049d4:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d01a      	beq.n	8004a12 <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	781b      	ldrb	r3, [r3, #0]
 80049e0:	4618      	mov	r0, r3
 80049e2:	f000 fa41 	bl	8004e68 <RTC_ByteToBcd2>
 80049e6:	4603      	mov	r3, r0
 80049e8:	461a      	mov	r2, r3
 80049ea:	68bb      	ldr	r3, [r7, #8]
 80049ec:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 80049ee:	68bb      	ldr	r3, [r7, #8]
 80049f0:	785b      	ldrb	r3, [r3, #1]
 80049f2:	4618      	mov	r0, r3
 80049f4:	f000 fa38 	bl	8004e68 <RTC_ByteToBcd2>
 80049f8:	4603      	mov	r3, r0
 80049fa:	461a      	mov	r2, r3
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 8004a00:	68bb      	ldr	r3, [r7, #8]
 8004a02:	789b      	ldrb	r3, [r3, #2]
 8004a04:	4618      	mov	r0, r3
 8004a06:	f000 fa2f 	bl	8004e68 <RTC_ByteToBcd2>
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	461a      	mov	r2, r3
 8004a0e:	68bb      	ldr	r3, [r7, #8]
 8004a10:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8004a12:	2300      	movs	r3, #0
}
 8004a14:	4618      	mov	r0, r3
 8004a16:	3720      	adds	r7, #32
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bd80      	pop	{r7, pc}
 8004a1c:	91a2b3c5 	.word	0x91a2b3c5
 8004a20:	88888889 	.word	0x88888889
 8004a24:	aaaaaaab 	.word	0xaaaaaaab
 8004a28:	00015180 	.word	0x00015180

08004a2c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b088      	sub	sp, #32
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	60f8      	str	r0, [r7, #12]
 8004a34:	60b9      	str	r1, [r7, #8]
 8004a36:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8004a38:	2300      	movs	r3, #0
 8004a3a:	61fb      	str	r3, [r7, #28]
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	61bb      	str	r3, [r7, #24]
 8004a40:	2300      	movs	r3, #0
 8004a42:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d002      	beq.n	8004a50 <HAL_RTC_SetDate+0x24>
 8004a4a:	68bb      	ldr	r3, [r7, #8]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d101      	bne.n	8004a54 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8004a50:	2301      	movs	r3, #1
 8004a52:	e097      	b.n	8004b84 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	7c1b      	ldrb	r3, [r3, #16]
 8004a58:	2b01      	cmp	r3, #1
 8004a5a:	d101      	bne.n	8004a60 <HAL_RTC_SetDate+0x34>
 8004a5c:	2302      	movs	r3, #2
 8004a5e:	e091      	b.n	8004b84 <HAL_RTC_SetDate+0x158>
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	2201      	movs	r2, #1
 8004a64:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	2202      	movs	r2, #2
 8004a6a:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d10c      	bne.n	8004a8c <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	78da      	ldrb	r2, [r3, #3]
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	785a      	ldrb	r2, [r3, #1]
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8004a82:	68bb      	ldr	r3, [r7, #8]
 8004a84:	789a      	ldrb	r2, [r3, #2]
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	739a      	strb	r2, [r3, #14]
 8004a8a:	e01a      	b.n	8004ac2 <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8004a8c:	68bb      	ldr	r3, [r7, #8]
 8004a8e:	78db      	ldrb	r3, [r3, #3]
 8004a90:	4618      	mov	r0, r3
 8004a92:	f000 fa06 	bl	8004ea2 <RTC_Bcd2ToByte>
 8004a96:	4603      	mov	r3, r0
 8004a98:	461a      	mov	r2, r3
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	785b      	ldrb	r3, [r3, #1]
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	f000 f9fd 	bl	8004ea2 <RTC_Bcd2ToByte>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	461a      	mov	r2, r3
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	789b      	ldrb	r3, [r3, #2]
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	f000 f9f4 	bl	8004ea2 <RTC_Bcd2ToByte>
 8004aba:	4603      	mov	r3, r0
 8004abc:	461a      	mov	r2, r3
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	7bdb      	ldrb	r3, [r3, #15]
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	7b59      	ldrb	r1, [r3, #13]
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	7b9b      	ldrb	r3, [r3, #14]
 8004ad0:	461a      	mov	r2, r3
 8004ad2:	f000 fadf 	bl	8005094 <RTC_WeekDayNum>
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	461a      	mov	r2, r3
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	7b1a      	ldrb	r2, [r3, #12]
 8004ae2:	68bb      	ldr	r3, [r7, #8]
 8004ae4:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8004ae6:	68f8      	ldr	r0, [r7, #12]
 8004ae8:	f000 f8d7 	bl	8004c9a <RTC_ReadTimeCounter>
 8004aec:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8004aee:	69fb      	ldr	r3, [r7, #28]
 8004af0:	4a26      	ldr	r2, [pc, #152]	; (8004b8c <HAL_RTC_SetDate+0x160>)
 8004af2:	fba2 2303 	umull	r2, r3, r2, r3
 8004af6:	0adb      	lsrs	r3, r3, #11
 8004af8:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 8004afa:	697b      	ldr	r3, [r7, #20]
 8004afc:	2b18      	cmp	r3, #24
 8004afe:	d93a      	bls.n	8004b76 <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8004b00:	697b      	ldr	r3, [r7, #20]
 8004b02:	4a23      	ldr	r2, [pc, #140]	; (8004b90 <HAL_RTC_SetDate+0x164>)
 8004b04:	fba2 2303 	umull	r2, r3, r2, r3
 8004b08:	091b      	lsrs	r3, r3, #4
 8004b0a:	4a22      	ldr	r2, [pc, #136]	; (8004b94 <HAL_RTC_SetDate+0x168>)
 8004b0c:	fb02 f303 	mul.w	r3, r2, r3
 8004b10:	69fa      	ldr	r2, [r7, #28]
 8004b12:	1ad3      	subs	r3, r2, r3
 8004b14:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8004b16:	69f9      	ldr	r1, [r7, #28]
 8004b18:	68f8      	ldr	r0, [r7, #12]
 8004b1a:	f000 f8ee 	bl	8004cfa <RTC_WriteTimeCounter>
 8004b1e:	4603      	mov	r3, r0
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d007      	beq.n	8004b34 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	2204      	movs	r2, #4
 8004b28:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8004b30:	2301      	movs	r3, #1
 8004b32:	e027      	b.n	8004b84 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8004b34:	68f8      	ldr	r0, [r7, #12]
 8004b36:	f000 f907 	bl	8004d48 <RTC_ReadAlarmCounter>
 8004b3a:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8004b3c:	69bb      	ldr	r3, [r7, #24]
 8004b3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b42:	d018      	beq.n	8004b76 <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 8004b44:	69ba      	ldr	r2, [r7, #24]
 8004b46:	69fb      	ldr	r3, [r7, #28]
 8004b48:	429a      	cmp	r2, r3
 8004b4a:	d214      	bcs.n	8004b76 <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8004b4c:	69bb      	ldr	r3, [r7, #24]
 8004b4e:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8004b52:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8004b56:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8004b58:	69b9      	ldr	r1, [r7, #24]
 8004b5a:	68f8      	ldr	r0, [r7, #12]
 8004b5c:	f000 f90d 	bl	8004d7a <RTC_WriteAlarmCounter>
 8004b60:	4603      	mov	r3, r0
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d007      	beq.n	8004b76 <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	2204      	movs	r2, #4
 8004b6a:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	2200      	movs	r2, #0
 8004b70:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8004b72:	2301      	movs	r3, #1
 8004b74:	e006      	b.n	8004b84 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	2201      	movs	r2, #1
 8004b7a:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004b82:	2300      	movs	r3, #0
}
 8004b84:	4618      	mov	r0, r3
 8004b86:	3720      	adds	r7, #32
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	bd80      	pop	{r7, pc}
 8004b8c:	91a2b3c5 	.word	0x91a2b3c5
 8004b90:	aaaaaaab 	.word	0xaaaaaaab
 8004b94:	00015180 	.word	0x00015180

08004b98 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b086      	sub	sp, #24
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	60f8      	str	r0, [r7, #12]
 8004ba0:	60b9      	str	r1, [r7, #8]
 8004ba2:	607a      	str	r2, [r7, #4]
  RTC_TimeTypeDef stime = {0U};
 8004ba4:	f107 0314 	add.w	r3, r7, #20
 8004ba8:	2100      	movs	r1, #0
 8004baa:	460a      	mov	r2, r1
 8004bac:	801a      	strh	r2, [r3, #0]
 8004bae:	460a      	mov	r2, r1
 8004bb0:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d002      	beq.n	8004bbe <HAL_RTC_GetDate+0x26>
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d101      	bne.n	8004bc2 <HAL_RTC_GetDate+0x2a>
  {
    return HAL_ERROR;
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	e03a      	b.n	8004c38 <HAL_RTC_GetDate+0xa0>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 8004bc2:	f107 0314 	add.w	r3, r7, #20
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	4619      	mov	r1, r3
 8004bca:	68f8      	ldr	r0, [r7, #12]
 8004bcc:	f7ff fe56 	bl	800487c <HAL_RTC_GetTime>
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d001      	beq.n	8004bda <HAL_RTC_GetDate+0x42>
  {
    return HAL_ERROR;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	e02e      	b.n	8004c38 <HAL_RTC_GetDate+0xa0>
  }

  /* Fill the structure fields with the read parameters */
  sDate->WeekDay  = hrtc->DateToUpdate.WeekDay;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	7b1a      	ldrb	r2, [r3, #12]
 8004bde:	68bb      	ldr	r3, [r7, #8]
 8004be0:	701a      	strb	r2, [r3, #0]
  sDate->Year     = hrtc->DateToUpdate.Year;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	7bda      	ldrb	r2, [r3, #15]
 8004be6:	68bb      	ldr	r3, [r7, #8]
 8004be8:	70da      	strb	r2, [r3, #3]
  sDate->Month    = hrtc->DateToUpdate.Month;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	7b5a      	ldrb	r2, [r3, #13]
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	705a      	strb	r2, [r3, #1]
  sDate->Date     = hrtc->DateToUpdate.Date;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	7b9a      	ldrb	r2, [r3, #14]
 8004bf6:	68bb      	ldr	r3, [r7, #8]
 8004bf8:	709a      	strb	r2, [r3, #2]

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d01a      	beq.n	8004c36 <HAL_RTC_GetDate+0x9e>
  {
    /* Convert the date structure parameters to BCD format */
    sDate->Year   = (uint8_t)RTC_ByteToBcd2(sDate->Year);
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	78db      	ldrb	r3, [r3, #3]
 8004c04:	4618      	mov	r0, r3
 8004c06:	f000 f92f 	bl	8004e68 <RTC_ByteToBcd2>
 8004c0a:	4603      	mov	r3, r0
 8004c0c:	461a      	mov	r2, r3
 8004c0e:	68bb      	ldr	r3, [r7, #8]
 8004c10:	70da      	strb	r2, [r3, #3]
    sDate->Month  = (uint8_t)RTC_ByteToBcd2(sDate->Month);
 8004c12:	68bb      	ldr	r3, [r7, #8]
 8004c14:	785b      	ldrb	r3, [r3, #1]
 8004c16:	4618      	mov	r0, r3
 8004c18:	f000 f926 	bl	8004e68 <RTC_ByteToBcd2>
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	461a      	mov	r2, r3
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	705a      	strb	r2, [r3, #1]
    sDate->Date   = (uint8_t)RTC_ByteToBcd2(sDate->Date);
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	789b      	ldrb	r3, [r3, #2]
 8004c28:	4618      	mov	r0, r3
 8004c2a:	f000 f91d 	bl	8004e68 <RTC_ByteToBcd2>
 8004c2e:	4603      	mov	r3, r0
 8004c30:	461a      	mov	r2, r3
 8004c32:	68bb      	ldr	r3, [r7, #8]
 8004c34:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8004c36:	2300      	movs	r3, #0
}
 8004c38:	4618      	mov	r0, r3
 8004c3a:	3718      	adds	r7, #24
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	bd80      	pop	{r7, pc}

08004c40 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b084      	sub	sp, #16
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004c48:	2300      	movs	r3, #0
 8004c4a:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d101      	bne.n	8004c56 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8004c52:	2301      	movs	r3, #1
 8004c54:	e01d      	b.n	8004c92 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	685a      	ldr	r2, [r3, #4]
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f022 0208 	bic.w	r2, r2, #8
 8004c64:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8004c66:	f7fd fb2f 	bl	80022c8 <HAL_GetTick>
 8004c6a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8004c6c:	e009      	b.n	8004c82 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8004c6e:	f7fd fb2b 	bl	80022c8 <HAL_GetTick>
 8004c72:	4602      	mov	r2, r0
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	1ad3      	subs	r3, r2, r3
 8004c78:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004c7c:	d901      	bls.n	8004c82 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8004c7e:	2303      	movs	r3, #3
 8004c80:	e007      	b.n	8004c92 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	685b      	ldr	r3, [r3, #4]
 8004c88:	f003 0308 	and.w	r3, r3, #8
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d0ee      	beq.n	8004c6e <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8004c90:	2300      	movs	r3, #0
}
 8004c92:	4618      	mov	r0, r3
 8004c94:	3710      	adds	r7, #16
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bd80      	pop	{r7, pc}

08004c9a <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8004c9a:	b480      	push	{r7}
 8004c9c:	b087      	sub	sp, #28
 8004c9e:	af00      	add	r7, sp, #0
 8004ca0:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	827b      	strh	r3, [r7, #18]
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	823b      	strh	r3, [r7, #16]
 8004caa:	2300      	movs	r3, #0
 8004cac:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8004cae:	2300      	movs	r3, #0
 8004cb0:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	699b      	ldr	r3, [r3, #24]
 8004cb8:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	69db      	ldr	r3, [r3, #28]
 8004cc0:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	699b      	ldr	r3, [r3, #24]
 8004cc8:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8004cca:	8a7a      	ldrh	r2, [r7, #18]
 8004ccc:	8a3b      	ldrh	r3, [r7, #16]
 8004cce:	429a      	cmp	r2, r3
 8004cd0:	d008      	beq.n	8004ce4 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8004cd2:	8a3b      	ldrh	r3, [r7, #16]
 8004cd4:	041a      	lsls	r2, r3, #16
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	69db      	ldr	r3, [r3, #28]
 8004cdc:	b29b      	uxth	r3, r3
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	617b      	str	r3, [r7, #20]
 8004ce2:	e004      	b.n	8004cee <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8004ce4:	8a7b      	ldrh	r3, [r7, #18]
 8004ce6:	041a      	lsls	r2, r3, #16
 8004ce8:	89fb      	ldrh	r3, [r7, #14]
 8004cea:	4313      	orrs	r3, r2
 8004cec:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8004cee:	697b      	ldr	r3, [r7, #20]
}
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	371c      	adds	r7, #28
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bc80      	pop	{r7}
 8004cf8:	4770      	bx	lr

08004cfa <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 8004cfa:	b580      	push	{r7, lr}
 8004cfc:	b084      	sub	sp, #16
 8004cfe:	af00      	add	r7, sp, #0
 8004d00:	6078      	str	r0, [r7, #4]
 8004d02:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d04:	2300      	movs	r3, #0
 8004d06:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004d08:	6878      	ldr	r0, [r7, #4]
 8004d0a:	f000 f85d 	bl	8004dc8 <RTC_EnterInitMode>
 8004d0e:	4603      	mov	r3, r0
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d002      	beq.n	8004d1a <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8004d14:	2301      	movs	r3, #1
 8004d16:	73fb      	strb	r3, [r7, #15]
 8004d18:	e011      	b.n	8004d3e <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	683a      	ldr	r2, [r7, #0]
 8004d20:	0c12      	lsrs	r2, r2, #16
 8004d22:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	683a      	ldr	r2, [r7, #0]
 8004d2a:	b292      	uxth	r2, r2
 8004d2c:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8004d2e:	6878      	ldr	r0, [r7, #4]
 8004d30:	f000 f872 	bl	8004e18 <RTC_ExitInitMode>
 8004d34:	4603      	mov	r3, r0
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d001      	beq.n	8004d3e <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8004d3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d40:	4618      	mov	r0, r3
 8004d42:	3710      	adds	r7, #16
 8004d44:	46bd      	mov	sp, r7
 8004d46:	bd80      	pop	{r7, pc}

08004d48 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b085      	sub	sp, #20
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8004d50:	2300      	movs	r3, #0
 8004d52:	81fb      	strh	r3, [r7, #14]
 8004d54:	2300      	movs	r3, #0
 8004d56:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	6a1b      	ldr	r3, [r3, #32]
 8004d5e:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d66:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8004d68:	89fb      	ldrh	r3, [r7, #14]
 8004d6a:	041a      	lsls	r2, r3, #16
 8004d6c:	89bb      	ldrh	r3, [r7, #12]
 8004d6e:	4313      	orrs	r3, r2
}
 8004d70:	4618      	mov	r0, r3
 8004d72:	3714      	adds	r7, #20
 8004d74:	46bd      	mov	sp, r7
 8004d76:	bc80      	pop	{r7}
 8004d78:	4770      	bx	lr

08004d7a <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8004d7a:	b580      	push	{r7, lr}
 8004d7c:	b084      	sub	sp, #16
 8004d7e:	af00      	add	r7, sp, #0
 8004d80:	6078      	str	r0, [r7, #4]
 8004d82:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d84:	2300      	movs	r3, #0
 8004d86:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004d88:	6878      	ldr	r0, [r7, #4]
 8004d8a:	f000 f81d 	bl	8004dc8 <RTC_EnterInitMode>
 8004d8e:	4603      	mov	r3, r0
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d002      	beq.n	8004d9a <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8004d94:	2301      	movs	r3, #1
 8004d96:	73fb      	strb	r3, [r7, #15]
 8004d98:	e011      	b.n	8004dbe <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	683a      	ldr	r2, [r7, #0]
 8004da0:	0c12      	lsrs	r2, r2, #16
 8004da2:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	683a      	ldr	r2, [r7, #0]
 8004daa:	b292      	uxth	r2, r2
 8004dac:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	f000 f832 	bl	8004e18 <RTC_ExitInitMode>
 8004db4:	4603      	mov	r3, r0
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d001      	beq.n	8004dbe <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 8004dba:	2301      	movs	r3, #1
 8004dbc:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8004dbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	3710      	adds	r7, #16
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	bd80      	pop	{r7, pc}

08004dc8 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b084      	sub	sp, #16
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8004dd4:	f7fd fa78 	bl	80022c8 <HAL_GetTick>
 8004dd8:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004dda:	e009      	b.n	8004df0 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8004ddc:	f7fd fa74 	bl	80022c8 <HAL_GetTick>
 8004de0:	4602      	mov	r2, r0
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	1ad3      	subs	r3, r2, r3
 8004de6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004dea:	d901      	bls.n	8004df0 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8004dec:	2303      	movs	r3, #3
 8004dee:	e00f      	b.n	8004e10 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	f003 0320 	and.w	r3, r3, #32
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d0ee      	beq.n	8004ddc <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	685a      	ldr	r2, [r3, #4]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f042 0210 	orr.w	r2, r2, #16
 8004e0c:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8004e0e:	2300      	movs	r3, #0
}
 8004e10:	4618      	mov	r0, r3
 8004e12:	3710      	adds	r7, #16
 8004e14:	46bd      	mov	sp, r7
 8004e16:	bd80      	pop	{r7, pc}

08004e18 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b084      	sub	sp, #16
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004e20:	2300      	movs	r3, #0
 8004e22:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	685a      	ldr	r2, [r3, #4]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f022 0210 	bic.w	r2, r2, #16
 8004e32:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8004e34:	f7fd fa48 	bl	80022c8 <HAL_GetTick>
 8004e38:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004e3a:	e009      	b.n	8004e50 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8004e3c:	f7fd fa44 	bl	80022c8 <HAL_GetTick>
 8004e40:	4602      	mov	r2, r0
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	1ad3      	subs	r3, r2, r3
 8004e46:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004e4a:	d901      	bls.n	8004e50 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8004e4c:	2303      	movs	r3, #3
 8004e4e:	e007      	b.n	8004e60 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	f003 0320 	and.w	r3, r3, #32
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d0ee      	beq.n	8004e3c <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8004e5e:	2300      	movs	r3, #0
}
 8004e60:	4618      	mov	r0, r3
 8004e62:	3710      	adds	r7, #16
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bd80      	pop	{r7, pc}

08004e68 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b085      	sub	sp, #20
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	4603      	mov	r3, r0
 8004e70:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8004e72:	2300      	movs	r3, #0
 8004e74:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 8004e76:	e005      	b.n	8004e84 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	3301      	adds	r3, #1
 8004e7c:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8004e7e:	79fb      	ldrb	r3, [r7, #7]
 8004e80:	3b0a      	subs	r3, #10
 8004e82:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 8004e84:	79fb      	ldrb	r3, [r7, #7]
 8004e86:	2b09      	cmp	r3, #9
 8004e88:	d8f6      	bhi.n	8004e78 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	b2db      	uxtb	r3, r3
 8004e8e:	011b      	lsls	r3, r3, #4
 8004e90:	b2da      	uxtb	r2, r3
 8004e92:	79fb      	ldrb	r3, [r7, #7]
 8004e94:	4313      	orrs	r3, r2
 8004e96:	b2db      	uxtb	r3, r3
}
 8004e98:	4618      	mov	r0, r3
 8004e9a:	3714      	adds	r7, #20
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	bc80      	pop	{r7}
 8004ea0:	4770      	bx	lr

08004ea2 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8004ea2:	b480      	push	{r7}
 8004ea4:	b085      	sub	sp, #20
 8004ea6:	af00      	add	r7, sp, #0
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8004eac:	2300      	movs	r3, #0
 8004eae:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8004eb0:	79fb      	ldrb	r3, [r7, #7]
 8004eb2:	091b      	lsrs	r3, r3, #4
 8004eb4:	b2db      	uxtb	r3, r3
 8004eb6:	461a      	mov	r2, r3
 8004eb8:	4613      	mov	r3, r2
 8004eba:	009b      	lsls	r3, r3, #2
 8004ebc:	4413      	add	r3, r2
 8004ebe:	005b      	lsls	r3, r3, #1
 8004ec0:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8004ec2:	79fb      	ldrb	r3, [r7, #7]
 8004ec4:	f003 030f 	and.w	r3, r3, #15
 8004ec8:	b2da      	uxtb	r2, r3
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	b2db      	uxtb	r3, r3
 8004ece:	4413      	add	r3, r2
 8004ed0:	b2db      	uxtb	r3, r3
}
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	3714      	adds	r7, #20
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	bc80      	pop	{r7}
 8004eda:	4770      	bx	lr

08004edc <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b086      	sub	sp, #24
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
 8004ee4:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	617b      	str	r3, [r7, #20]
 8004eea:	2300      	movs	r3, #0
 8004eec:	613b      	str	r3, [r7, #16]
 8004eee:	2300      	movs	r3, #0
 8004ef0:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	7bdb      	ldrb	r3, [r3, #15]
 8004efa:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	7b5b      	ldrb	r3, [r3, #13]
 8004f00:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	7b9b      	ldrb	r3, [r3, #14]
 8004f06:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 8004f08:	2300      	movs	r3, #0
 8004f0a:	60bb      	str	r3, [r7, #8]
 8004f0c:	e06f      	b.n	8004fee <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 8004f0e:	693b      	ldr	r3, [r7, #16]
 8004f10:	2b01      	cmp	r3, #1
 8004f12:	d011      	beq.n	8004f38 <RTC_DateUpdate+0x5c>
 8004f14:	693b      	ldr	r3, [r7, #16]
 8004f16:	2b03      	cmp	r3, #3
 8004f18:	d00e      	beq.n	8004f38 <RTC_DateUpdate+0x5c>
 8004f1a:	693b      	ldr	r3, [r7, #16]
 8004f1c:	2b05      	cmp	r3, #5
 8004f1e:	d00b      	beq.n	8004f38 <RTC_DateUpdate+0x5c>
 8004f20:	693b      	ldr	r3, [r7, #16]
 8004f22:	2b07      	cmp	r3, #7
 8004f24:	d008      	beq.n	8004f38 <RTC_DateUpdate+0x5c>
 8004f26:	693b      	ldr	r3, [r7, #16]
 8004f28:	2b08      	cmp	r3, #8
 8004f2a:	d005      	beq.n	8004f38 <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 8004f2c:	693b      	ldr	r3, [r7, #16]
 8004f2e:	2b0a      	cmp	r3, #10
 8004f30:	d002      	beq.n	8004f38 <RTC_DateUpdate+0x5c>
 8004f32:	693b      	ldr	r3, [r7, #16]
 8004f34:	2b0c      	cmp	r3, #12
 8004f36:	d117      	bne.n	8004f68 <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	2b1e      	cmp	r3, #30
 8004f3c:	d803      	bhi.n	8004f46 <RTC_DateUpdate+0x6a>
      {
        day++;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	3301      	adds	r3, #1
 8004f42:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8004f44:	e050      	b.n	8004fe8 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 8004f46:	693b      	ldr	r3, [r7, #16]
 8004f48:	2b0c      	cmp	r3, #12
 8004f4a:	d005      	beq.n	8004f58 <RTC_DateUpdate+0x7c>
        {
          month++;
 8004f4c:	693b      	ldr	r3, [r7, #16]
 8004f4e:	3301      	adds	r3, #1
 8004f50:	613b      	str	r3, [r7, #16]
          day = 1U;
 8004f52:	2301      	movs	r3, #1
 8004f54:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8004f56:	e047      	b.n	8004fe8 <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 8004f58:	2301      	movs	r3, #1
 8004f5a:	613b      	str	r3, [r7, #16]
          day = 1U;
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	60fb      	str	r3, [r7, #12]
          year++;
 8004f60:	697b      	ldr	r3, [r7, #20]
 8004f62:	3301      	adds	r3, #1
 8004f64:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 8004f66:	e03f      	b.n	8004fe8 <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 8004f68:	693b      	ldr	r3, [r7, #16]
 8004f6a:	2b04      	cmp	r3, #4
 8004f6c:	d008      	beq.n	8004f80 <RTC_DateUpdate+0xa4>
 8004f6e:	693b      	ldr	r3, [r7, #16]
 8004f70:	2b06      	cmp	r3, #6
 8004f72:	d005      	beq.n	8004f80 <RTC_DateUpdate+0xa4>
 8004f74:	693b      	ldr	r3, [r7, #16]
 8004f76:	2b09      	cmp	r3, #9
 8004f78:	d002      	beq.n	8004f80 <RTC_DateUpdate+0xa4>
 8004f7a:	693b      	ldr	r3, [r7, #16]
 8004f7c:	2b0b      	cmp	r3, #11
 8004f7e:	d10c      	bne.n	8004f9a <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	2b1d      	cmp	r3, #29
 8004f84:	d803      	bhi.n	8004f8e <RTC_DateUpdate+0xb2>
      {
        day++;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	3301      	adds	r3, #1
 8004f8a:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8004f8c:	e02c      	b.n	8004fe8 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 8004f8e:	693b      	ldr	r3, [r7, #16]
 8004f90:	3301      	adds	r3, #1
 8004f92:	613b      	str	r3, [r7, #16]
        day = 1U;
 8004f94:	2301      	movs	r3, #1
 8004f96:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8004f98:	e026      	b.n	8004fe8 <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 8004f9a:	693b      	ldr	r3, [r7, #16]
 8004f9c:	2b02      	cmp	r3, #2
 8004f9e:	d123      	bne.n	8004fe8 <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	2b1b      	cmp	r3, #27
 8004fa4:	d803      	bhi.n	8004fae <RTC_DateUpdate+0xd2>
      {
        day++;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	3301      	adds	r3, #1
 8004faa:	60fb      	str	r3, [r7, #12]
 8004fac:	e01c      	b.n	8004fe8 <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	2b1c      	cmp	r3, #28
 8004fb2:	d111      	bne.n	8004fd8 <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 8004fb4:	697b      	ldr	r3, [r7, #20]
 8004fb6:	b29b      	uxth	r3, r3
 8004fb8:	4618      	mov	r0, r3
 8004fba:	f000 f839 	bl	8005030 <RTC_IsLeapYear>
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d003      	beq.n	8004fcc <RTC_DateUpdate+0xf0>
        {
          day++;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	3301      	adds	r3, #1
 8004fc8:	60fb      	str	r3, [r7, #12]
 8004fca:	e00d      	b.n	8004fe8 <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 8004fcc:	693b      	ldr	r3, [r7, #16]
 8004fce:	3301      	adds	r3, #1
 8004fd0:	613b      	str	r3, [r7, #16]
          day = 1U;
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	60fb      	str	r3, [r7, #12]
 8004fd6:	e007      	b.n	8004fe8 <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	2b1d      	cmp	r3, #29
 8004fdc:	d104      	bne.n	8004fe8 <RTC_DateUpdate+0x10c>
      {
        month++;
 8004fde:	693b      	ldr	r3, [r7, #16]
 8004fe0:	3301      	adds	r3, #1
 8004fe2:	613b      	str	r3, [r7, #16]
        day = 1U;
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	3301      	adds	r3, #1
 8004fec:	60bb      	str	r3, [r7, #8]
 8004fee:	68ba      	ldr	r2, [r7, #8]
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	429a      	cmp	r2, r3
 8004ff4:	d38b      	bcc.n	8004f0e <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 8004ff6:	697b      	ldr	r3, [r7, #20]
 8004ff8:	b2da      	uxtb	r2, r3
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 8004ffe:	693b      	ldr	r3, [r7, #16]
 8005000:	b2da      	uxtb	r2, r3
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	b2da      	uxtb	r2, r3
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 800500e:	693b      	ldr	r3, [r7, #16]
 8005010:	b2db      	uxtb	r3, r3
 8005012:	68fa      	ldr	r2, [r7, #12]
 8005014:	b2d2      	uxtb	r2, r2
 8005016:	4619      	mov	r1, r3
 8005018:	6978      	ldr	r0, [r7, #20]
 800501a:	f000 f83b 	bl	8005094 <RTC_WeekDayNum>
 800501e:	4603      	mov	r3, r0
 8005020:	461a      	mov	r2, r3
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	731a      	strb	r2, [r3, #12]
}
 8005026:	bf00      	nop
 8005028:	3718      	adds	r7, #24
 800502a:	46bd      	mov	sp, r7
 800502c:	bd80      	pop	{r7, pc}
	...

08005030 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 8005030:	b480      	push	{r7}
 8005032:	b083      	sub	sp, #12
 8005034:	af00      	add	r7, sp, #0
 8005036:	4603      	mov	r3, r0
 8005038:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 800503a:	88fb      	ldrh	r3, [r7, #6]
 800503c:	f003 0303 	and.w	r3, r3, #3
 8005040:	b29b      	uxth	r3, r3
 8005042:	2b00      	cmp	r3, #0
 8005044:	d001      	beq.n	800504a <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 8005046:	2300      	movs	r3, #0
 8005048:	e01d      	b.n	8005086 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 800504a:	88fb      	ldrh	r3, [r7, #6]
 800504c:	4a10      	ldr	r2, [pc, #64]	; (8005090 <RTC_IsLeapYear+0x60>)
 800504e:	fba2 1203 	umull	r1, r2, r2, r3
 8005052:	0952      	lsrs	r2, r2, #5
 8005054:	2164      	movs	r1, #100	; 0x64
 8005056:	fb01 f202 	mul.w	r2, r1, r2
 800505a:	1a9b      	subs	r3, r3, r2
 800505c:	b29b      	uxth	r3, r3
 800505e:	2b00      	cmp	r3, #0
 8005060:	d001      	beq.n	8005066 <RTC_IsLeapYear+0x36>
  {
    return 1U;
 8005062:	2301      	movs	r3, #1
 8005064:	e00f      	b.n	8005086 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 8005066:	88fb      	ldrh	r3, [r7, #6]
 8005068:	4a09      	ldr	r2, [pc, #36]	; (8005090 <RTC_IsLeapYear+0x60>)
 800506a:	fba2 1203 	umull	r1, r2, r2, r3
 800506e:	09d2      	lsrs	r2, r2, #7
 8005070:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8005074:	fb01 f202 	mul.w	r2, r1, r2
 8005078:	1a9b      	subs	r3, r3, r2
 800507a:	b29b      	uxth	r3, r3
 800507c:	2b00      	cmp	r3, #0
 800507e:	d101      	bne.n	8005084 <RTC_IsLeapYear+0x54>
  {
    return 1U;
 8005080:	2301      	movs	r3, #1
 8005082:	e000      	b.n	8005086 <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 8005084:	2300      	movs	r3, #0
  }
}
 8005086:	4618      	mov	r0, r3
 8005088:	370c      	adds	r7, #12
 800508a:	46bd      	mov	sp, r7
 800508c:	bc80      	pop	{r7}
 800508e:	4770      	bx	lr
 8005090:	51eb851f 	.word	0x51eb851f

08005094 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8005094:	b480      	push	{r7}
 8005096:	b085      	sub	sp, #20
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
 800509c:	460b      	mov	r3, r1
 800509e:	70fb      	strb	r3, [r7, #3]
 80050a0:	4613      	mov	r3, r2
 80050a2:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 80050a4:	2300      	movs	r3, #0
 80050a6:	60bb      	str	r3, [r7, #8]
 80050a8:	2300      	movs	r3, #0
 80050aa:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80050b2:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 80050b4:	78fb      	ldrb	r3, [r7, #3]
 80050b6:	2b02      	cmp	r3, #2
 80050b8:	d82d      	bhi.n	8005116 <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 80050ba:	78fa      	ldrb	r2, [r7, #3]
 80050bc:	4613      	mov	r3, r2
 80050be:	005b      	lsls	r3, r3, #1
 80050c0:	4413      	add	r3, r2
 80050c2:	00db      	lsls	r3, r3, #3
 80050c4:	1a9b      	subs	r3, r3, r2
 80050c6:	4a2c      	ldr	r2, [pc, #176]	; (8005178 <RTC_WeekDayNum+0xe4>)
 80050c8:	fba2 2303 	umull	r2, r3, r2, r3
 80050cc:	085a      	lsrs	r2, r3, #1
 80050ce:	78bb      	ldrb	r3, [r7, #2]
 80050d0:	441a      	add	r2, r3
 80050d2:	68bb      	ldr	r3, [r7, #8]
 80050d4:	441a      	add	r2, r3
 80050d6:	68bb      	ldr	r3, [r7, #8]
 80050d8:	3b01      	subs	r3, #1
 80050da:	089b      	lsrs	r3, r3, #2
 80050dc:	441a      	add	r2, r3
 80050de:	68bb      	ldr	r3, [r7, #8]
 80050e0:	3b01      	subs	r3, #1
 80050e2:	4926      	ldr	r1, [pc, #152]	; (800517c <RTC_WeekDayNum+0xe8>)
 80050e4:	fba1 1303 	umull	r1, r3, r1, r3
 80050e8:	095b      	lsrs	r3, r3, #5
 80050ea:	1ad2      	subs	r2, r2, r3
 80050ec:	68bb      	ldr	r3, [r7, #8]
 80050ee:	3b01      	subs	r3, #1
 80050f0:	4922      	ldr	r1, [pc, #136]	; (800517c <RTC_WeekDayNum+0xe8>)
 80050f2:	fba1 1303 	umull	r1, r3, r1, r3
 80050f6:	09db      	lsrs	r3, r3, #7
 80050f8:	4413      	add	r3, r2
 80050fa:	1d1a      	adds	r2, r3, #4
 80050fc:	4b20      	ldr	r3, [pc, #128]	; (8005180 <RTC_WeekDayNum+0xec>)
 80050fe:	fba3 1302 	umull	r1, r3, r3, r2
 8005102:	1ad1      	subs	r1, r2, r3
 8005104:	0849      	lsrs	r1, r1, #1
 8005106:	440b      	add	r3, r1
 8005108:	0899      	lsrs	r1, r3, #2
 800510a:	460b      	mov	r3, r1
 800510c:	00db      	lsls	r3, r3, #3
 800510e:	1a5b      	subs	r3, r3, r1
 8005110:	1ad3      	subs	r3, r2, r3
 8005112:	60fb      	str	r3, [r7, #12]
 8005114:	e029      	b.n	800516a <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8005116:	78fa      	ldrb	r2, [r7, #3]
 8005118:	4613      	mov	r3, r2
 800511a:	005b      	lsls	r3, r3, #1
 800511c:	4413      	add	r3, r2
 800511e:	00db      	lsls	r3, r3, #3
 8005120:	1a9b      	subs	r3, r3, r2
 8005122:	4a15      	ldr	r2, [pc, #84]	; (8005178 <RTC_WeekDayNum+0xe4>)
 8005124:	fba2 2303 	umull	r2, r3, r2, r3
 8005128:	085a      	lsrs	r2, r3, #1
 800512a:	78bb      	ldrb	r3, [r7, #2]
 800512c:	441a      	add	r2, r3
 800512e:	68bb      	ldr	r3, [r7, #8]
 8005130:	441a      	add	r2, r3
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	089b      	lsrs	r3, r3, #2
 8005136:	441a      	add	r2, r3
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	4910      	ldr	r1, [pc, #64]	; (800517c <RTC_WeekDayNum+0xe8>)
 800513c:	fba1 1303 	umull	r1, r3, r1, r3
 8005140:	095b      	lsrs	r3, r3, #5
 8005142:	1ad2      	subs	r2, r2, r3
 8005144:	68bb      	ldr	r3, [r7, #8]
 8005146:	490d      	ldr	r1, [pc, #52]	; (800517c <RTC_WeekDayNum+0xe8>)
 8005148:	fba1 1303 	umull	r1, r3, r1, r3
 800514c:	09db      	lsrs	r3, r3, #7
 800514e:	4413      	add	r3, r2
 8005150:	1c9a      	adds	r2, r3, #2
 8005152:	4b0b      	ldr	r3, [pc, #44]	; (8005180 <RTC_WeekDayNum+0xec>)
 8005154:	fba3 1302 	umull	r1, r3, r3, r2
 8005158:	1ad1      	subs	r1, r2, r3
 800515a:	0849      	lsrs	r1, r1, #1
 800515c:	440b      	add	r3, r1
 800515e:	0899      	lsrs	r1, r3, #2
 8005160:	460b      	mov	r3, r1
 8005162:	00db      	lsls	r3, r3, #3
 8005164:	1a5b      	subs	r3, r3, r1
 8005166:	1ad3      	subs	r3, r2, r3
 8005168:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	b2db      	uxtb	r3, r3
}
 800516e:	4618      	mov	r0, r3
 8005170:	3714      	adds	r7, #20
 8005172:	46bd      	mov	sp, r7
 8005174:	bc80      	pop	{r7}
 8005176:	4770      	bx	lr
 8005178:	38e38e39 	.word	0x38e38e39
 800517c:	51eb851f 	.word	0x51eb851f
 8005180:	24924925 	.word	0x24924925

08005184 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b082      	sub	sp, #8
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d101      	bne.n	8005196 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005192:	2301      	movs	r3, #1
 8005194:	e03f      	b.n	8005216 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800519c:	b2db      	uxtb	r3, r3
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d106      	bne.n	80051b0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2200      	movs	r2, #0
 80051a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80051aa:	6878      	ldr	r0, [r7, #4]
 80051ac:	f7fc ff60 	bl	8002070 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2224      	movs	r2, #36	; 0x24
 80051b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	68da      	ldr	r2, [r3, #12]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80051c6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80051c8:	6878      	ldr	r0, [r7, #4]
 80051ca:	f000 f9a7 	bl	800551c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	691a      	ldr	r2, [r3, #16]
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80051dc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	695a      	ldr	r2, [r3, #20]
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80051ec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	68da      	ldr	r2, [r3, #12]
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80051fc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2200      	movs	r2, #0
 8005202:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2220      	movs	r2, #32
 8005208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2220      	movs	r2, #32
 8005210:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005214:	2300      	movs	r3, #0
}
 8005216:	4618      	mov	r0, r3
 8005218:	3708      	adds	r7, #8
 800521a:	46bd      	mov	sp, r7
 800521c:	bd80      	pop	{r7, pc}

0800521e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800521e:	b580      	push	{r7, lr}
 8005220:	b08a      	sub	sp, #40	; 0x28
 8005222:	af02      	add	r7, sp, #8
 8005224:	60f8      	str	r0, [r7, #12]
 8005226:	60b9      	str	r1, [r7, #8]
 8005228:	603b      	str	r3, [r7, #0]
 800522a:	4613      	mov	r3, r2
 800522c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800522e:	2300      	movs	r3, #0
 8005230:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005238:	b2db      	uxtb	r3, r3
 800523a:	2b20      	cmp	r3, #32
 800523c:	d17c      	bne.n	8005338 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800523e:	68bb      	ldr	r3, [r7, #8]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d002      	beq.n	800524a <HAL_UART_Transmit+0x2c>
 8005244:	88fb      	ldrh	r3, [r7, #6]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d101      	bne.n	800524e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800524a:	2301      	movs	r3, #1
 800524c:	e075      	b.n	800533a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005254:	2b01      	cmp	r3, #1
 8005256:	d101      	bne.n	800525c <HAL_UART_Transmit+0x3e>
 8005258:	2302      	movs	r3, #2
 800525a:	e06e      	b.n	800533a <HAL_UART_Transmit+0x11c>
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	2201      	movs	r2, #1
 8005260:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	2200      	movs	r2, #0
 8005268:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	2221      	movs	r2, #33	; 0x21
 800526e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005272:	f7fd f829 	bl	80022c8 <HAL_GetTick>
 8005276:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	88fa      	ldrh	r2, [r7, #6]
 800527c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	88fa      	ldrh	r2, [r7, #6]
 8005282:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	689b      	ldr	r3, [r3, #8]
 8005288:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800528c:	d108      	bne.n	80052a0 <HAL_UART_Transmit+0x82>
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	691b      	ldr	r3, [r3, #16]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d104      	bne.n	80052a0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005296:	2300      	movs	r3, #0
 8005298:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800529a:	68bb      	ldr	r3, [r7, #8]
 800529c:	61bb      	str	r3, [r7, #24]
 800529e:	e003      	b.n	80052a8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80052a4:	2300      	movs	r3, #0
 80052a6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	2200      	movs	r2, #0
 80052ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80052b0:	e02a      	b.n	8005308 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	9300      	str	r3, [sp, #0]
 80052b6:	697b      	ldr	r3, [r7, #20]
 80052b8:	2200      	movs	r2, #0
 80052ba:	2180      	movs	r1, #128	; 0x80
 80052bc:	68f8      	ldr	r0, [r7, #12]
 80052be:	f000 f8e2 	bl	8005486 <UART_WaitOnFlagUntilTimeout>
 80052c2:	4603      	mov	r3, r0
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d001      	beq.n	80052cc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80052c8:	2303      	movs	r3, #3
 80052ca:	e036      	b.n	800533a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80052cc:	69fb      	ldr	r3, [r7, #28]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d10b      	bne.n	80052ea <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80052d2:	69bb      	ldr	r3, [r7, #24]
 80052d4:	881b      	ldrh	r3, [r3, #0]
 80052d6:	461a      	mov	r2, r3
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80052e0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80052e2:	69bb      	ldr	r3, [r7, #24]
 80052e4:	3302      	adds	r3, #2
 80052e6:	61bb      	str	r3, [r7, #24]
 80052e8:	e007      	b.n	80052fa <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80052ea:	69fb      	ldr	r3, [r7, #28]
 80052ec:	781a      	ldrb	r2, [r3, #0]
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80052f4:	69fb      	ldr	r3, [r7, #28]
 80052f6:	3301      	adds	r3, #1
 80052f8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80052fe:	b29b      	uxth	r3, r3
 8005300:	3b01      	subs	r3, #1
 8005302:	b29a      	uxth	r2, r3
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800530c:	b29b      	uxth	r3, r3
 800530e:	2b00      	cmp	r3, #0
 8005310:	d1cf      	bne.n	80052b2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	9300      	str	r3, [sp, #0]
 8005316:	697b      	ldr	r3, [r7, #20]
 8005318:	2200      	movs	r2, #0
 800531a:	2140      	movs	r1, #64	; 0x40
 800531c:	68f8      	ldr	r0, [r7, #12]
 800531e:	f000 f8b2 	bl	8005486 <UART_WaitOnFlagUntilTimeout>
 8005322:	4603      	mov	r3, r0
 8005324:	2b00      	cmp	r3, #0
 8005326:	d001      	beq.n	800532c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005328:	2303      	movs	r3, #3
 800532a:	e006      	b.n	800533a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	2220      	movs	r2, #32
 8005330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005334:	2300      	movs	r3, #0
 8005336:	e000      	b.n	800533a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005338:	2302      	movs	r3, #2
  }
}
 800533a:	4618      	mov	r0, r3
 800533c:	3720      	adds	r7, #32
 800533e:	46bd      	mov	sp, r7
 8005340:	bd80      	pop	{r7, pc}

08005342 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005342:	b580      	push	{r7, lr}
 8005344:	b08a      	sub	sp, #40	; 0x28
 8005346:	af02      	add	r7, sp, #8
 8005348:	60f8      	str	r0, [r7, #12]
 800534a:	60b9      	str	r1, [r7, #8]
 800534c:	603b      	str	r3, [r7, #0]
 800534e:	4613      	mov	r3, r2
 8005350:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005352:	2300      	movs	r3, #0
 8005354:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800535c:	b2db      	uxtb	r3, r3
 800535e:	2b20      	cmp	r3, #32
 8005360:	f040 808c 	bne.w	800547c <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d002      	beq.n	8005370 <HAL_UART_Receive+0x2e>
 800536a:	88fb      	ldrh	r3, [r7, #6]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d101      	bne.n	8005374 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8005370:	2301      	movs	r3, #1
 8005372:	e084      	b.n	800547e <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800537a:	2b01      	cmp	r3, #1
 800537c:	d101      	bne.n	8005382 <HAL_UART_Receive+0x40>
 800537e:	2302      	movs	r3, #2
 8005380:	e07d      	b.n	800547e <HAL_UART_Receive+0x13c>
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	2201      	movs	r2, #1
 8005386:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	2200      	movs	r2, #0
 800538e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	2222      	movs	r2, #34	; 0x22
 8005394:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	2200      	movs	r2, #0
 800539c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800539e:	f7fc ff93 	bl	80022c8 <HAL_GetTick>
 80053a2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	88fa      	ldrh	r2, [r7, #6]
 80053a8:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	88fa      	ldrh	r2, [r7, #6]
 80053ae:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	689b      	ldr	r3, [r3, #8]
 80053b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053b8:	d108      	bne.n	80053cc <HAL_UART_Receive+0x8a>
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	691b      	ldr	r3, [r3, #16]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d104      	bne.n	80053cc <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80053c2:	2300      	movs	r3, #0
 80053c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80053c6:	68bb      	ldr	r3, [r7, #8]
 80053c8:	61bb      	str	r3, [r7, #24]
 80053ca:	e003      	b.n	80053d4 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80053d0:	2300      	movs	r3, #0
 80053d2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	2200      	movs	r2, #0
 80053d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80053dc:	e043      	b.n	8005466 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	9300      	str	r3, [sp, #0]
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	2200      	movs	r2, #0
 80053e6:	2120      	movs	r1, #32
 80053e8:	68f8      	ldr	r0, [r7, #12]
 80053ea:	f000 f84c 	bl	8005486 <UART_WaitOnFlagUntilTimeout>
 80053ee:	4603      	mov	r3, r0
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d001      	beq.n	80053f8 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80053f4:	2303      	movs	r3, #3
 80053f6:	e042      	b.n	800547e <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80053f8:	69fb      	ldr	r3, [r7, #28]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d10c      	bne.n	8005418 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	685b      	ldr	r3, [r3, #4]
 8005404:	b29b      	uxth	r3, r3
 8005406:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800540a:	b29a      	uxth	r2, r3
 800540c:	69bb      	ldr	r3, [r7, #24]
 800540e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005410:	69bb      	ldr	r3, [r7, #24]
 8005412:	3302      	adds	r3, #2
 8005414:	61bb      	str	r3, [r7, #24]
 8005416:	e01f      	b.n	8005458 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	689b      	ldr	r3, [r3, #8]
 800541c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005420:	d007      	beq.n	8005432 <HAL_UART_Receive+0xf0>
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	689b      	ldr	r3, [r3, #8]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d10a      	bne.n	8005440 <HAL_UART_Receive+0xfe>
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	691b      	ldr	r3, [r3, #16]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d106      	bne.n	8005440 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	685b      	ldr	r3, [r3, #4]
 8005438:	b2da      	uxtb	r2, r3
 800543a:	69fb      	ldr	r3, [r7, #28]
 800543c:	701a      	strb	r2, [r3, #0]
 800543e:	e008      	b.n	8005452 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	685b      	ldr	r3, [r3, #4]
 8005446:	b2db      	uxtb	r3, r3
 8005448:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800544c:	b2da      	uxtb	r2, r3
 800544e:	69fb      	ldr	r3, [r7, #28]
 8005450:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8005452:	69fb      	ldr	r3, [r7, #28]
 8005454:	3301      	adds	r3, #1
 8005456:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800545c:	b29b      	uxth	r3, r3
 800545e:	3b01      	subs	r3, #1
 8005460:	b29a      	uxth	r2, r3
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800546a:	b29b      	uxth	r3, r3
 800546c:	2b00      	cmp	r3, #0
 800546e:	d1b6      	bne.n	80053de <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	2220      	movs	r2, #32
 8005474:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8005478:	2300      	movs	r3, #0
 800547a:	e000      	b.n	800547e <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 800547c:	2302      	movs	r3, #2
  }
}
 800547e:	4618      	mov	r0, r3
 8005480:	3720      	adds	r7, #32
 8005482:	46bd      	mov	sp, r7
 8005484:	bd80      	pop	{r7, pc}

08005486 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005486:	b580      	push	{r7, lr}
 8005488:	b084      	sub	sp, #16
 800548a:	af00      	add	r7, sp, #0
 800548c:	60f8      	str	r0, [r7, #12]
 800548e:	60b9      	str	r1, [r7, #8]
 8005490:	603b      	str	r3, [r7, #0]
 8005492:	4613      	mov	r3, r2
 8005494:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005496:	e02c      	b.n	80054f2 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005498:	69bb      	ldr	r3, [r7, #24]
 800549a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800549e:	d028      	beq.n	80054f2 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80054a0:	69bb      	ldr	r3, [r7, #24]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d007      	beq.n	80054b6 <UART_WaitOnFlagUntilTimeout+0x30>
 80054a6:	f7fc ff0f 	bl	80022c8 <HAL_GetTick>
 80054aa:	4602      	mov	r2, r0
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	1ad3      	subs	r3, r2, r3
 80054b0:	69ba      	ldr	r2, [r7, #24]
 80054b2:	429a      	cmp	r2, r3
 80054b4:	d21d      	bcs.n	80054f2 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	68da      	ldr	r2, [r3, #12]
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80054c4:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	695a      	ldr	r2, [r3, #20]
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f022 0201 	bic.w	r2, r2, #1
 80054d4:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	2220      	movs	r2, #32
 80054da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	2220      	movs	r2, #32
 80054e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	2200      	movs	r2, #0
 80054ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80054ee:	2303      	movs	r3, #3
 80054f0:	e00f      	b.n	8005512 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	681a      	ldr	r2, [r3, #0]
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	4013      	ands	r3, r2
 80054fc:	68ba      	ldr	r2, [r7, #8]
 80054fe:	429a      	cmp	r2, r3
 8005500:	bf0c      	ite	eq
 8005502:	2301      	moveq	r3, #1
 8005504:	2300      	movne	r3, #0
 8005506:	b2db      	uxtb	r3, r3
 8005508:	461a      	mov	r2, r3
 800550a:	79fb      	ldrb	r3, [r7, #7]
 800550c:	429a      	cmp	r2, r3
 800550e:	d0c3      	beq.n	8005498 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005510:	2300      	movs	r3, #0
}
 8005512:	4618      	mov	r0, r3
 8005514:	3710      	adds	r7, #16
 8005516:	46bd      	mov	sp, r7
 8005518:	bd80      	pop	{r7, pc}
	...

0800551c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b084      	sub	sp, #16
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	691b      	ldr	r3, [r3, #16]
 800552a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	68da      	ldr	r2, [r3, #12]
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	430a      	orrs	r2, r1
 8005538:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	689a      	ldr	r2, [r3, #8]
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	691b      	ldr	r3, [r3, #16]
 8005542:	431a      	orrs	r2, r3
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	695b      	ldr	r3, [r3, #20]
 8005548:	4313      	orrs	r3, r2
 800554a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	68db      	ldr	r3, [r3, #12]
 8005552:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005556:	f023 030c 	bic.w	r3, r3, #12
 800555a:	687a      	ldr	r2, [r7, #4]
 800555c:	6812      	ldr	r2, [r2, #0]
 800555e:	68b9      	ldr	r1, [r7, #8]
 8005560:	430b      	orrs	r3, r1
 8005562:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	695b      	ldr	r3, [r3, #20]
 800556a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	699a      	ldr	r2, [r3, #24]
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	430a      	orrs	r2, r1
 8005578:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4a2c      	ldr	r2, [pc, #176]	; (8005630 <UART_SetConfig+0x114>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d103      	bne.n	800558c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005584:	f7fe fea0 	bl	80042c8 <HAL_RCC_GetPCLK2Freq>
 8005588:	60f8      	str	r0, [r7, #12]
 800558a:	e002      	b.n	8005592 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800558c:	f7fe fe88 	bl	80042a0 <HAL_RCC_GetPCLK1Freq>
 8005590:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005592:	68fa      	ldr	r2, [r7, #12]
 8005594:	4613      	mov	r3, r2
 8005596:	009b      	lsls	r3, r3, #2
 8005598:	4413      	add	r3, r2
 800559a:	009a      	lsls	r2, r3, #2
 800559c:	441a      	add	r2, r3
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	685b      	ldr	r3, [r3, #4]
 80055a2:	009b      	lsls	r3, r3, #2
 80055a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80055a8:	4a22      	ldr	r2, [pc, #136]	; (8005634 <UART_SetConfig+0x118>)
 80055aa:	fba2 2303 	umull	r2, r3, r2, r3
 80055ae:	095b      	lsrs	r3, r3, #5
 80055b0:	0119      	lsls	r1, r3, #4
 80055b2:	68fa      	ldr	r2, [r7, #12]
 80055b4:	4613      	mov	r3, r2
 80055b6:	009b      	lsls	r3, r3, #2
 80055b8:	4413      	add	r3, r2
 80055ba:	009a      	lsls	r2, r3, #2
 80055bc:	441a      	add	r2, r3
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	685b      	ldr	r3, [r3, #4]
 80055c2:	009b      	lsls	r3, r3, #2
 80055c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80055c8:	4b1a      	ldr	r3, [pc, #104]	; (8005634 <UART_SetConfig+0x118>)
 80055ca:	fba3 0302 	umull	r0, r3, r3, r2
 80055ce:	095b      	lsrs	r3, r3, #5
 80055d0:	2064      	movs	r0, #100	; 0x64
 80055d2:	fb00 f303 	mul.w	r3, r0, r3
 80055d6:	1ad3      	subs	r3, r2, r3
 80055d8:	011b      	lsls	r3, r3, #4
 80055da:	3332      	adds	r3, #50	; 0x32
 80055dc:	4a15      	ldr	r2, [pc, #84]	; (8005634 <UART_SetConfig+0x118>)
 80055de:	fba2 2303 	umull	r2, r3, r2, r3
 80055e2:	095b      	lsrs	r3, r3, #5
 80055e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80055e8:	4419      	add	r1, r3
 80055ea:	68fa      	ldr	r2, [r7, #12]
 80055ec:	4613      	mov	r3, r2
 80055ee:	009b      	lsls	r3, r3, #2
 80055f0:	4413      	add	r3, r2
 80055f2:	009a      	lsls	r2, r3, #2
 80055f4:	441a      	add	r2, r3
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	685b      	ldr	r3, [r3, #4]
 80055fa:	009b      	lsls	r3, r3, #2
 80055fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8005600:	4b0c      	ldr	r3, [pc, #48]	; (8005634 <UART_SetConfig+0x118>)
 8005602:	fba3 0302 	umull	r0, r3, r3, r2
 8005606:	095b      	lsrs	r3, r3, #5
 8005608:	2064      	movs	r0, #100	; 0x64
 800560a:	fb00 f303 	mul.w	r3, r0, r3
 800560e:	1ad3      	subs	r3, r2, r3
 8005610:	011b      	lsls	r3, r3, #4
 8005612:	3332      	adds	r3, #50	; 0x32
 8005614:	4a07      	ldr	r2, [pc, #28]	; (8005634 <UART_SetConfig+0x118>)
 8005616:	fba2 2303 	umull	r2, r3, r2, r3
 800561a:	095b      	lsrs	r3, r3, #5
 800561c:	f003 020f 	and.w	r2, r3, #15
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	440a      	add	r2, r1
 8005626:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005628:	bf00      	nop
 800562a:	3710      	adds	r7, #16
 800562c:	46bd      	mov	sp, r7
 800562e:	bd80      	pop	{r7, pc}
 8005630:	40013800 	.word	0x40013800
 8005634:	51eb851f 	.word	0x51eb851f

08005638 <__errno>:
 8005638:	4b01      	ldr	r3, [pc, #4]	; (8005640 <__errno+0x8>)
 800563a:	6818      	ldr	r0, [r3, #0]
 800563c:	4770      	bx	lr
 800563e:	bf00      	nop
 8005640:	2000000c 	.word	0x2000000c

08005644 <__libc_init_array>:
 8005644:	b570      	push	{r4, r5, r6, lr}
 8005646:	2600      	movs	r6, #0
 8005648:	4d0c      	ldr	r5, [pc, #48]	; (800567c <__libc_init_array+0x38>)
 800564a:	4c0d      	ldr	r4, [pc, #52]	; (8005680 <__libc_init_array+0x3c>)
 800564c:	1b64      	subs	r4, r4, r5
 800564e:	10a4      	asrs	r4, r4, #2
 8005650:	42a6      	cmp	r6, r4
 8005652:	d109      	bne.n	8005668 <__libc_init_array+0x24>
 8005654:	f001 ff66 	bl	8007524 <_init>
 8005658:	2600      	movs	r6, #0
 800565a:	4d0a      	ldr	r5, [pc, #40]	; (8005684 <__libc_init_array+0x40>)
 800565c:	4c0a      	ldr	r4, [pc, #40]	; (8005688 <__libc_init_array+0x44>)
 800565e:	1b64      	subs	r4, r4, r5
 8005660:	10a4      	asrs	r4, r4, #2
 8005662:	42a6      	cmp	r6, r4
 8005664:	d105      	bne.n	8005672 <__libc_init_array+0x2e>
 8005666:	bd70      	pop	{r4, r5, r6, pc}
 8005668:	f855 3b04 	ldr.w	r3, [r5], #4
 800566c:	4798      	blx	r3
 800566e:	3601      	adds	r6, #1
 8005670:	e7ee      	b.n	8005650 <__libc_init_array+0xc>
 8005672:	f855 3b04 	ldr.w	r3, [r5], #4
 8005676:	4798      	blx	r3
 8005678:	3601      	adds	r6, #1
 800567a:	e7f2      	b.n	8005662 <__libc_init_array+0x1e>
 800567c:	08007850 	.word	0x08007850
 8005680:	08007850 	.word	0x08007850
 8005684:	08007850 	.word	0x08007850
 8005688:	08007854 	.word	0x08007854

0800568c <memset>:
 800568c:	4603      	mov	r3, r0
 800568e:	4402      	add	r2, r0
 8005690:	4293      	cmp	r3, r2
 8005692:	d100      	bne.n	8005696 <memset+0xa>
 8005694:	4770      	bx	lr
 8005696:	f803 1b01 	strb.w	r1, [r3], #1
 800569a:	e7f9      	b.n	8005690 <memset+0x4>

0800569c <siprintf>:
 800569c:	b40e      	push	{r1, r2, r3}
 800569e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80056a2:	b500      	push	{lr}
 80056a4:	b09c      	sub	sp, #112	; 0x70
 80056a6:	ab1d      	add	r3, sp, #116	; 0x74
 80056a8:	9002      	str	r0, [sp, #8]
 80056aa:	9006      	str	r0, [sp, #24]
 80056ac:	9107      	str	r1, [sp, #28]
 80056ae:	9104      	str	r1, [sp, #16]
 80056b0:	4808      	ldr	r0, [pc, #32]	; (80056d4 <siprintf+0x38>)
 80056b2:	4909      	ldr	r1, [pc, #36]	; (80056d8 <siprintf+0x3c>)
 80056b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80056b8:	9105      	str	r1, [sp, #20]
 80056ba:	6800      	ldr	r0, [r0, #0]
 80056bc:	a902      	add	r1, sp, #8
 80056be:	9301      	str	r3, [sp, #4]
 80056c0:	f000 f868 	bl	8005794 <_svfiprintf_r>
 80056c4:	2200      	movs	r2, #0
 80056c6:	9b02      	ldr	r3, [sp, #8]
 80056c8:	701a      	strb	r2, [r3, #0]
 80056ca:	b01c      	add	sp, #112	; 0x70
 80056cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80056d0:	b003      	add	sp, #12
 80056d2:	4770      	bx	lr
 80056d4:	2000000c 	.word	0x2000000c
 80056d8:	ffff0208 	.word	0xffff0208

080056dc <__ssputs_r>:
 80056dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80056e0:	688e      	ldr	r6, [r1, #8]
 80056e2:	4682      	mov	sl, r0
 80056e4:	429e      	cmp	r6, r3
 80056e6:	460c      	mov	r4, r1
 80056e8:	4690      	mov	r8, r2
 80056ea:	461f      	mov	r7, r3
 80056ec:	d838      	bhi.n	8005760 <__ssputs_r+0x84>
 80056ee:	898a      	ldrh	r2, [r1, #12]
 80056f0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80056f4:	d032      	beq.n	800575c <__ssputs_r+0x80>
 80056f6:	6825      	ldr	r5, [r4, #0]
 80056f8:	6909      	ldr	r1, [r1, #16]
 80056fa:	3301      	adds	r3, #1
 80056fc:	eba5 0901 	sub.w	r9, r5, r1
 8005700:	6965      	ldr	r5, [r4, #20]
 8005702:	444b      	add	r3, r9
 8005704:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005708:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800570c:	106d      	asrs	r5, r5, #1
 800570e:	429d      	cmp	r5, r3
 8005710:	bf38      	it	cc
 8005712:	461d      	movcc	r5, r3
 8005714:	0553      	lsls	r3, r2, #21
 8005716:	d531      	bpl.n	800577c <__ssputs_r+0xa0>
 8005718:	4629      	mov	r1, r5
 800571a:	f000 fb53 	bl	8005dc4 <_malloc_r>
 800571e:	4606      	mov	r6, r0
 8005720:	b950      	cbnz	r0, 8005738 <__ssputs_r+0x5c>
 8005722:	230c      	movs	r3, #12
 8005724:	f04f 30ff 	mov.w	r0, #4294967295
 8005728:	f8ca 3000 	str.w	r3, [sl]
 800572c:	89a3      	ldrh	r3, [r4, #12]
 800572e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005732:	81a3      	strh	r3, [r4, #12]
 8005734:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005738:	464a      	mov	r2, r9
 800573a:	6921      	ldr	r1, [r4, #16]
 800573c:	f000 face 	bl	8005cdc <memcpy>
 8005740:	89a3      	ldrh	r3, [r4, #12]
 8005742:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005746:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800574a:	81a3      	strh	r3, [r4, #12]
 800574c:	6126      	str	r6, [r4, #16]
 800574e:	444e      	add	r6, r9
 8005750:	6026      	str	r6, [r4, #0]
 8005752:	463e      	mov	r6, r7
 8005754:	6165      	str	r5, [r4, #20]
 8005756:	eba5 0509 	sub.w	r5, r5, r9
 800575a:	60a5      	str	r5, [r4, #8]
 800575c:	42be      	cmp	r6, r7
 800575e:	d900      	bls.n	8005762 <__ssputs_r+0x86>
 8005760:	463e      	mov	r6, r7
 8005762:	4632      	mov	r2, r6
 8005764:	4641      	mov	r1, r8
 8005766:	6820      	ldr	r0, [r4, #0]
 8005768:	f000 fac6 	bl	8005cf8 <memmove>
 800576c:	68a3      	ldr	r3, [r4, #8]
 800576e:	6822      	ldr	r2, [r4, #0]
 8005770:	1b9b      	subs	r3, r3, r6
 8005772:	4432      	add	r2, r6
 8005774:	2000      	movs	r0, #0
 8005776:	60a3      	str	r3, [r4, #8]
 8005778:	6022      	str	r2, [r4, #0]
 800577a:	e7db      	b.n	8005734 <__ssputs_r+0x58>
 800577c:	462a      	mov	r2, r5
 800577e:	f000 fb7b 	bl	8005e78 <_realloc_r>
 8005782:	4606      	mov	r6, r0
 8005784:	2800      	cmp	r0, #0
 8005786:	d1e1      	bne.n	800574c <__ssputs_r+0x70>
 8005788:	4650      	mov	r0, sl
 800578a:	6921      	ldr	r1, [r4, #16]
 800578c:	f000 face 	bl	8005d2c <_free_r>
 8005790:	e7c7      	b.n	8005722 <__ssputs_r+0x46>
	...

08005794 <_svfiprintf_r>:
 8005794:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005798:	4698      	mov	r8, r3
 800579a:	898b      	ldrh	r3, [r1, #12]
 800579c:	4607      	mov	r7, r0
 800579e:	061b      	lsls	r3, r3, #24
 80057a0:	460d      	mov	r5, r1
 80057a2:	4614      	mov	r4, r2
 80057a4:	b09d      	sub	sp, #116	; 0x74
 80057a6:	d50e      	bpl.n	80057c6 <_svfiprintf_r+0x32>
 80057a8:	690b      	ldr	r3, [r1, #16]
 80057aa:	b963      	cbnz	r3, 80057c6 <_svfiprintf_r+0x32>
 80057ac:	2140      	movs	r1, #64	; 0x40
 80057ae:	f000 fb09 	bl	8005dc4 <_malloc_r>
 80057b2:	6028      	str	r0, [r5, #0]
 80057b4:	6128      	str	r0, [r5, #16]
 80057b6:	b920      	cbnz	r0, 80057c2 <_svfiprintf_r+0x2e>
 80057b8:	230c      	movs	r3, #12
 80057ba:	603b      	str	r3, [r7, #0]
 80057bc:	f04f 30ff 	mov.w	r0, #4294967295
 80057c0:	e0d1      	b.n	8005966 <_svfiprintf_r+0x1d2>
 80057c2:	2340      	movs	r3, #64	; 0x40
 80057c4:	616b      	str	r3, [r5, #20]
 80057c6:	2300      	movs	r3, #0
 80057c8:	9309      	str	r3, [sp, #36]	; 0x24
 80057ca:	2320      	movs	r3, #32
 80057cc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80057d0:	2330      	movs	r3, #48	; 0x30
 80057d2:	f04f 0901 	mov.w	r9, #1
 80057d6:	f8cd 800c 	str.w	r8, [sp, #12]
 80057da:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005980 <_svfiprintf_r+0x1ec>
 80057de:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80057e2:	4623      	mov	r3, r4
 80057e4:	469a      	mov	sl, r3
 80057e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80057ea:	b10a      	cbz	r2, 80057f0 <_svfiprintf_r+0x5c>
 80057ec:	2a25      	cmp	r2, #37	; 0x25
 80057ee:	d1f9      	bne.n	80057e4 <_svfiprintf_r+0x50>
 80057f0:	ebba 0b04 	subs.w	fp, sl, r4
 80057f4:	d00b      	beq.n	800580e <_svfiprintf_r+0x7a>
 80057f6:	465b      	mov	r3, fp
 80057f8:	4622      	mov	r2, r4
 80057fa:	4629      	mov	r1, r5
 80057fc:	4638      	mov	r0, r7
 80057fe:	f7ff ff6d 	bl	80056dc <__ssputs_r>
 8005802:	3001      	adds	r0, #1
 8005804:	f000 80aa 	beq.w	800595c <_svfiprintf_r+0x1c8>
 8005808:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800580a:	445a      	add	r2, fp
 800580c:	9209      	str	r2, [sp, #36]	; 0x24
 800580e:	f89a 3000 	ldrb.w	r3, [sl]
 8005812:	2b00      	cmp	r3, #0
 8005814:	f000 80a2 	beq.w	800595c <_svfiprintf_r+0x1c8>
 8005818:	2300      	movs	r3, #0
 800581a:	f04f 32ff 	mov.w	r2, #4294967295
 800581e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005822:	f10a 0a01 	add.w	sl, sl, #1
 8005826:	9304      	str	r3, [sp, #16]
 8005828:	9307      	str	r3, [sp, #28]
 800582a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800582e:	931a      	str	r3, [sp, #104]	; 0x68
 8005830:	4654      	mov	r4, sl
 8005832:	2205      	movs	r2, #5
 8005834:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005838:	4851      	ldr	r0, [pc, #324]	; (8005980 <_svfiprintf_r+0x1ec>)
 800583a:	f000 fa41 	bl	8005cc0 <memchr>
 800583e:	9a04      	ldr	r2, [sp, #16]
 8005840:	b9d8      	cbnz	r0, 800587a <_svfiprintf_r+0xe6>
 8005842:	06d0      	lsls	r0, r2, #27
 8005844:	bf44      	itt	mi
 8005846:	2320      	movmi	r3, #32
 8005848:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800584c:	0711      	lsls	r1, r2, #28
 800584e:	bf44      	itt	mi
 8005850:	232b      	movmi	r3, #43	; 0x2b
 8005852:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005856:	f89a 3000 	ldrb.w	r3, [sl]
 800585a:	2b2a      	cmp	r3, #42	; 0x2a
 800585c:	d015      	beq.n	800588a <_svfiprintf_r+0xf6>
 800585e:	4654      	mov	r4, sl
 8005860:	2000      	movs	r0, #0
 8005862:	f04f 0c0a 	mov.w	ip, #10
 8005866:	9a07      	ldr	r2, [sp, #28]
 8005868:	4621      	mov	r1, r4
 800586a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800586e:	3b30      	subs	r3, #48	; 0x30
 8005870:	2b09      	cmp	r3, #9
 8005872:	d94e      	bls.n	8005912 <_svfiprintf_r+0x17e>
 8005874:	b1b0      	cbz	r0, 80058a4 <_svfiprintf_r+0x110>
 8005876:	9207      	str	r2, [sp, #28]
 8005878:	e014      	b.n	80058a4 <_svfiprintf_r+0x110>
 800587a:	eba0 0308 	sub.w	r3, r0, r8
 800587e:	fa09 f303 	lsl.w	r3, r9, r3
 8005882:	4313      	orrs	r3, r2
 8005884:	46a2      	mov	sl, r4
 8005886:	9304      	str	r3, [sp, #16]
 8005888:	e7d2      	b.n	8005830 <_svfiprintf_r+0x9c>
 800588a:	9b03      	ldr	r3, [sp, #12]
 800588c:	1d19      	adds	r1, r3, #4
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	9103      	str	r1, [sp, #12]
 8005892:	2b00      	cmp	r3, #0
 8005894:	bfbb      	ittet	lt
 8005896:	425b      	neglt	r3, r3
 8005898:	f042 0202 	orrlt.w	r2, r2, #2
 800589c:	9307      	strge	r3, [sp, #28]
 800589e:	9307      	strlt	r3, [sp, #28]
 80058a0:	bfb8      	it	lt
 80058a2:	9204      	strlt	r2, [sp, #16]
 80058a4:	7823      	ldrb	r3, [r4, #0]
 80058a6:	2b2e      	cmp	r3, #46	; 0x2e
 80058a8:	d10c      	bne.n	80058c4 <_svfiprintf_r+0x130>
 80058aa:	7863      	ldrb	r3, [r4, #1]
 80058ac:	2b2a      	cmp	r3, #42	; 0x2a
 80058ae:	d135      	bne.n	800591c <_svfiprintf_r+0x188>
 80058b0:	9b03      	ldr	r3, [sp, #12]
 80058b2:	3402      	adds	r4, #2
 80058b4:	1d1a      	adds	r2, r3, #4
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	9203      	str	r2, [sp, #12]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	bfb8      	it	lt
 80058be:	f04f 33ff 	movlt.w	r3, #4294967295
 80058c2:	9305      	str	r3, [sp, #20]
 80058c4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005990 <_svfiprintf_r+0x1fc>
 80058c8:	2203      	movs	r2, #3
 80058ca:	4650      	mov	r0, sl
 80058cc:	7821      	ldrb	r1, [r4, #0]
 80058ce:	f000 f9f7 	bl	8005cc0 <memchr>
 80058d2:	b140      	cbz	r0, 80058e6 <_svfiprintf_r+0x152>
 80058d4:	2340      	movs	r3, #64	; 0x40
 80058d6:	eba0 000a 	sub.w	r0, r0, sl
 80058da:	fa03 f000 	lsl.w	r0, r3, r0
 80058de:	9b04      	ldr	r3, [sp, #16]
 80058e0:	3401      	adds	r4, #1
 80058e2:	4303      	orrs	r3, r0
 80058e4:	9304      	str	r3, [sp, #16]
 80058e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80058ea:	2206      	movs	r2, #6
 80058ec:	4825      	ldr	r0, [pc, #148]	; (8005984 <_svfiprintf_r+0x1f0>)
 80058ee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80058f2:	f000 f9e5 	bl	8005cc0 <memchr>
 80058f6:	2800      	cmp	r0, #0
 80058f8:	d038      	beq.n	800596c <_svfiprintf_r+0x1d8>
 80058fa:	4b23      	ldr	r3, [pc, #140]	; (8005988 <_svfiprintf_r+0x1f4>)
 80058fc:	bb1b      	cbnz	r3, 8005946 <_svfiprintf_r+0x1b2>
 80058fe:	9b03      	ldr	r3, [sp, #12]
 8005900:	3307      	adds	r3, #7
 8005902:	f023 0307 	bic.w	r3, r3, #7
 8005906:	3308      	adds	r3, #8
 8005908:	9303      	str	r3, [sp, #12]
 800590a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800590c:	4433      	add	r3, r6
 800590e:	9309      	str	r3, [sp, #36]	; 0x24
 8005910:	e767      	b.n	80057e2 <_svfiprintf_r+0x4e>
 8005912:	460c      	mov	r4, r1
 8005914:	2001      	movs	r0, #1
 8005916:	fb0c 3202 	mla	r2, ip, r2, r3
 800591a:	e7a5      	b.n	8005868 <_svfiprintf_r+0xd4>
 800591c:	2300      	movs	r3, #0
 800591e:	f04f 0c0a 	mov.w	ip, #10
 8005922:	4619      	mov	r1, r3
 8005924:	3401      	adds	r4, #1
 8005926:	9305      	str	r3, [sp, #20]
 8005928:	4620      	mov	r0, r4
 800592a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800592e:	3a30      	subs	r2, #48	; 0x30
 8005930:	2a09      	cmp	r2, #9
 8005932:	d903      	bls.n	800593c <_svfiprintf_r+0x1a8>
 8005934:	2b00      	cmp	r3, #0
 8005936:	d0c5      	beq.n	80058c4 <_svfiprintf_r+0x130>
 8005938:	9105      	str	r1, [sp, #20]
 800593a:	e7c3      	b.n	80058c4 <_svfiprintf_r+0x130>
 800593c:	4604      	mov	r4, r0
 800593e:	2301      	movs	r3, #1
 8005940:	fb0c 2101 	mla	r1, ip, r1, r2
 8005944:	e7f0      	b.n	8005928 <_svfiprintf_r+0x194>
 8005946:	ab03      	add	r3, sp, #12
 8005948:	9300      	str	r3, [sp, #0]
 800594a:	462a      	mov	r2, r5
 800594c:	4638      	mov	r0, r7
 800594e:	4b0f      	ldr	r3, [pc, #60]	; (800598c <_svfiprintf_r+0x1f8>)
 8005950:	a904      	add	r1, sp, #16
 8005952:	f3af 8000 	nop.w
 8005956:	1c42      	adds	r2, r0, #1
 8005958:	4606      	mov	r6, r0
 800595a:	d1d6      	bne.n	800590a <_svfiprintf_r+0x176>
 800595c:	89ab      	ldrh	r3, [r5, #12]
 800595e:	065b      	lsls	r3, r3, #25
 8005960:	f53f af2c 	bmi.w	80057bc <_svfiprintf_r+0x28>
 8005964:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005966:	b01d      	add	sp, #116	; 0x74
 8005968:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800596c:	ab03      	add	r3, sp, #12
 800596e:	9300      	str	r3, [sp, #0]
 8005970:	462a      	mov	r2, r5
 8005972:	4638      	mov	r0, r7
 8005974:	4b05      	ldr	r3, [pc, #20]	; (800598c <_svfiprintf_r+0x1f8>)
 8005976:	a904      	add	r1, sp, #16
 8005978:	f000 f87c 	bl	8005a74 <_printf_i>
 800597c:	e7eb      	b.n	8005956 <_svfiprintf_r+0x1c2>
 800597e:	bf00      	nop
 8005980:	08007644 	.word	0x08007644
 8005984:	0800764e 	.word	0x0800764e
 8005988:	00000000 	.word	0x00000000
 800598c:	080056dd 	.word	0x080056dd
 8005990:	0800764a 	.word	0x0800764a

08005994 <_printf_common>:
 8005994:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005998:	4616      	mov	r6, r2
 800599a:	4699      	mov	r9, r3
 800599c:	688a      	ldr	r2, [r1, #8]
 800599e:	690b      	ldr	r3, [r1, #16]
 80059a0:	4607      	mov	r7, r0
 80059a2:	4293      	cmp	r3, r2
 80059a4:	bfb8      	it	lt
 80059a6:	4613      	movlt	r3, r2
 80059a8:	6033      	str	r3, [r6, #0]
 80059aa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80059ae:	460c      	mov	r4, r1
 80059b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80059b4:	b10a      	cbz	r2, 80059ba <_printf_common+0x26>
 80059b6:	3301      	adds	r3, #1
 80059b8:	6033      	str	r3, [r6, #0]
 80059ba:	6823      	ldr	r3, [r4, #0]
 80059bc:	0699      	lsls	r1, r3, #26
 80059be:	bf42      	ittt	mi
 80059c0:	6833      	ldrmi	r3, [r6, #0]
 80059c2:	3302      	addmi	r3, #2
 80059c4:	6033      	strmi	r3, [r6, #0]
 80059c6:	6825      	ldr	r5, [r4, #0]
 80059c8:	f015 0506 	ands.w	r5, r5, #6
 80059cc:	d106      	bne.n	80059dc <_printf_common+0x48>
 80059ce:	f104 0a19 	add.w	sl, r4, #25
 80059d2:	68e3      	ldr	r3, [r4, #12]
 80059d4:	6832      	ldr	r2, [r6, #0]
 80059d6:	1a9b      	subs	r3, r3, r2
 80059d8:	42ab      	cmp	r3, r5
 80059da:	dc28      	bgt.n	8005a2e <_printf_common+0x9a>
 80059dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80059e0:	1e13      	subs	r3, r2, #0
 80059e2:	6822      	ldr	r2, [r4, #0]
 80059e4:	bf18      	it	ne
 80059e6:	2301      	movne	r3, #1
 80059e8:	0692      	lsls	r2, r2, #26
 80059ea:	d42d      	bmi.n	8005a48 <_printf_common+0xb4>
 80059ec:	4649      	mov	r1, r9
 80059ee:	4638      	mov	r0, r7
 80059f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80059f4:	47c0      	blx	r8
 80059f6:	3001      	adds	r0, #1
 80059f8:	d020      	beq.n	8005a3c <_printf_common+0xa8>
 80059fa:	6823      	ldr	r3, [r4, #0]
 80059fc:	68e5      	ldr	r5, [r4, #12]
 80059fe:	f003 0306 	and.w	r3, r3, #6
 8005a02:	2b04      	cmp	r3, #4
 8005a04:	bf18      	it	ne
 8005a06:	2500      	movne	r5, #0
 8005a08:	6832      	ldr	r2, [r6, #0]
 8005a0a:	f04f 0600 	mov.w	r6, #0
 8005a0e:	68a3      	ldr	r3, [r4, #8]
 8005a10:	bf08      	it	eq
 8005a12:	1aad      	subeq	r5, r5, r2
 8005a14:	6922      	ldr	r2, [r4, #16]
 8005a16:	bf08      	it	eq
 8005a18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	bfc4      	itt	gt
 8005a20:	1a9b      	subgt	r3, r3, r2
 8005a22:	18ed      	addgt	r5, r5, r3
 8005a24:	341a      	adds	r4, #26
 8005a26:	42b5      	cmp	r5, r6
 8005a28:	d11a      	bne.n	8005a60 <_printf_common+0xcc>
 8005a2a:	2000      	movs	r0, #0
 8005a2c:	e008      	b.n	8005a40 <_printf_common+0xac>
 8005a2e:	2301      	movs	r3, #1
 8005a30:	4652      	mov	r2, sl
 8005a32:	4649      	mov	r1, r9
 8005a34:	4638      	mov	r0, r7
 8005a36:	47c0      	blx	r8
 8005a38:	3001      	adds	r0, #1
 8005a3a:	d103      	bne.n	8005a44 <_printf_common+0xb0>
 8005a3c:	f04f 30ff 	mov.w	r0, #4294967295
 8005a40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a44:	3501      	adds	r5, #1
 8005a46:	e7c4      	b.n	80059d2 <_printf_common+0x3e>
 8005a48:	2030      	movs	r0, #48	; 0x30
 8005a4a:	18e1      	adds	r1, r4, r3
 8005a4c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005a50:	1c5a      	adds	r2, r3, #1
 8005a52:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005a56:	4422      	add	r2, r4
 8005a58:	3302      	adds	r3, #2
 8005a5a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005a5e:	e7c5      	b.n	80059ec <_printf_common+0x58>
 8005a60:	2301      	movs	r3, #1
 8005a62:	4622      	mov	r2, r4
 8005a64:	4649      	mov	r1, r9
 8005a66:	4638      	mov	r0, r7
 8005a68:	47c0      	blx	r8
 8005a6a:	3001      	adds	r0, #1
 8005a6c:	d0e6      	beq.n	8005a3c <_printf_common+0xa8>
 8005a6e:	3601      	adds	r6, #1
 8005a70:	e7d9      	b.n	8005a26 <_printf_common+0x92>
	...

08005a74 <_printf_i>:
 8005a74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005a78:	460c      	mov	r4, r1
 8005a7a:	7e27      	ldrb	r7, [r4, #24]
 8005a7c:	4691      	mov	r9, r2
 8005a7e:	2f78      	cmp	r7, #120	; 0x78
 8005a80:	4680      	mov	r8, r0
 8005a82:	469a      	mov	sl, r3
 8005a84:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005a86:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005a8a:	d807      	bhi.n	8005a9c <_printf_i+0x28>
 8005a8c:	2f62      	cmp	r7, #98	; 0x62
 8005a8e:	d80a      	bhi.n	8005aa6 <_printf_i+0x32>
 8005a90:	2f00      	cmp	r7, #0
 8005a92:	f000 80d9 	beq.w	8005c48 <_printf_i+0x1d4>
 8005a96:	2f58      	cmp	r7, #88	; 0x58
 8005a98:	f000 80a4 	beq.w	8005be4 <_printf_i+0x170>
 8005a9c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005aa0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005aa4:	e03a      	b.n	8005b1c <_printf_i+0xa8>
 8005aa6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005aaa:	2b15      	cmp	r3, #21
 8005aac:	d8f6      	bhi.n	8005a9c <_printf_i+0x28>
 8005aae:	a001      	add	r0, pc, #4	; (adr r0, 8005ab4 <_printf_i+0x40>)
 8005ab0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005ab4:	08005b0d 	.word	0x08005b0d
 8005ab8:	08005b21 	.word	0x08005b21
 8005abc:	08005a9d 	.word	0x08005a9d
 8005ac0:	08005a9d 	.word	0x08005a9d
 8005ac4:	08005a9d 	.word	0x08005a9d
 8005ac8:	08005a9d 	.word	0x08005a9d
 8005acc:	08005b21 	.word	0x08005b21
 8005ad0:	08005a9d 	.word	0x08005a9d
 8005ad4:	08005a9d 	.word	0x08005a9d
 8005ad8:	08005a9d 	.word	0x08005a9d
 8005adc:	08005a9d 	.word	0x08005a9d
 8005ae0:	08005c2f 	.word	0x08005c2f
 8005ae4:	08005b51 	.word	0x08005b51
 8005ae8:	08005c11 	.word	0x08005c11
 8005aec:	08005a9d 	.word	0x08005a9d
 8005af0:	08005a9d 	.word	0x08005a9d
 8005af4:	08005c51 	.word	0x08005c51
 8005af8:	08005a9d 	.word	0x08005a9d
 8005afc:	08005b51 	.word	0x08005b51
 8005b00:	08005a9d 	.word	0x08005a9d
 8005b04:	08005a9d 	.word	0x08005a9d
 8005b08:	08005c19 	.word	0x08005c19
 8005b0c:	680b      	ldr	r3, [r1, #0]
 8005b0e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005b12:	1d1a      	adds	r2, r3, #4
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	600a      	str	r2, [r1, #0]
 8005b18:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	e0a4      	b.n	8005c6a <_printf_i+0x1f6>
 8005b20:	6825      	ldr	r5, [r4, #0]
 8005b22:	6808      	ldr	r0, [r1, #0]
 8005b24:	062e      	lsls	r6, r5, #24
 8005b26:	f100 0304 	add.w	r3, r0, #4
 8005b2a:	d50a      	bpl.n	8005b42 <_printf_i+0xce>
 8005b2c:	6805      	ldr	r5, [r0, #0]
 8005b2e:	600b      	str	r3, [r1, #0]
 8005b30:	2d00      	cmp	r5, #0
 8005b32:	da03      	bge.n	8005b3c <_printf_i+0xc8>
 8005b34:	232d      	movs	r3, #45	; 0x2d
 8005b36:	426d      	negs	r5, r5
 8005b38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b3c:	230a      	movs	r3, #10
 8005b3e:	485e      	ldr	r0, [pc, #376]	; (8005cb8 <_printf_i+0x244>)
 8005b40:	e019      	b.n	8005b76 <_printf_i+0x102>
 8005b42:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005b46:	6805      	ldr	r5, [r0, #0]
 8005b48:	600b      	str	r3, [r1, #0]
 8005b4a:	bf18      	it	ne
 8005b4c:	b22d      	sxthne	r5, r5
 8005b4e:	e7ef      	b.n	8005b30 <_printf_i+0xbc>
 8005b50:	680b      	ldr	r3, [r1, #0]
 8005b52:	6825      	ldr	r5, [r4, #0]
 8005b54:	1d18      	adds	r0, r3, #4
 8005b56:	6008      	str	r0, [r1, #0]
 8005b58:	0628      	lsls	r0, r5, #24
 8005b5a:	d501      	bpl.n	8005b60 <_printf_i+0xec>
 8005b5c:	681d      	ldr	r5, [r3, #0]
 8005b5e:	e002      	b.n	8005b66 <_printf_i+0xf2>
 8005b60:	0669      	lsls	r1, r5, #25
 8005b62:	d5fb      	bpl.n	8005b5c <_printf_i+0xe8>
 8005b64:	881d      	ldrh	r5, [r3, #0]
 8005b66:	2f6f      	cmp	r7, #111	; 0x6f
 8005b68:	bf0c      	ite	eq
 8005b6a:	2308      	moveq	r3, #8
 8005b6c:	230a      	movne	r3, #10
 8005b6e:	4852      	ldr	r0, [pc, #328]	; (8005cb8 <_printf_i+0x244>)
 8005b70:	2100      	movs	r1, #0
 8005b72:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005b76:	6866      	ldr	r6, [r4, #4]
 8005b78:	2e00      	cmp	r6, #0
 8005b7a:	bfa8      	it	ge
 8005b7c:	6821      	ldrge	r1, [r4, #0]
 8005b7e:	60a6      	str	r6, [r4, #8]
 8005b80:	bfa4      	itt	ge
 8005b82:	f021 0104 	bicge.w	r1, r1, #4
 8005b86:	6021      	strge	r1, [r4, #0]
 8005b88:	b90d      	cbnz	r5, 8005b8e <_printf_i+0x11a>
 8005b8a:	2e00      	cmp	r6, #0
 8005b8c:	d04d      	beq.n	8005c2a <_printf_i+0x1b6>
 8005b8e:	4616      	mov	r6, r2
 8005b90:	fbb5 f1f3 	udiv	r1, r5, r3
 8005b94:	fb03 5711 	mls	r7, r3, r1, r5
 8005b98:	5dc7      	ldrb	r7, [r0, r7]
 8005b9a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005b9e:	462f      	mov	r7, r5
 8005ba0:	42bb      	cmp	r3, r7
 8005ba2:	460d      	mov	r5, r1
 8005ba4:	d9f4      	bls.n	8005b90 <_printf_i+0x11c>
 8005ba6:	2b08      	cmp	r3, #8
 8005ba8:	d10b      	bne.n	8005bc2 <_printf_i+0x14e>
 8005baa:	6823      	ldr	r3, [r4, #0]
 8005bac:	07df      	lsls	r7, r3, #31
 8005bae:	d508      	bpl.n	8005bc2 <_printf_i+0x14e>
 8005bb0:	6923      	ldr	r3, [r4, #16]
 8005bb2:	6861      	ldr	r1, [r4, #4]
 8005bb4:	4299      	cmp	r1, r3
 8005bb6:	bfde      	ittt	le
 8005bb8:	2330      	movle	r3, #48	; 0x30
 8005bba:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005bbe:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005bc2:	1b92      	subs	r2, r2, r6
 8005bc4:	6122      	str	r2, [r4, #16]
 8005bc6:	464b      	mov	r3, r9
 8005bc8:	4621      	mov	r1, r4
 8005bca:	4640      	mov	r0, r8
 8005bcc:	f8cd a000 	str.w	sl, [sp]
 8005bd0:	aa03      	add	r2, sp, #12
 8005bd2:	f7ff fedf 	bl	8005994 <_printf_common>
 8005bd6:	3001      	adds	r0, #1
 8005bd8:	d14c      	bne.n	8005c74 <_printf_i+0x200>
 8005bda:	f04f 30ff 	mov.w	r0, #4294967295
 8005bde:	b004      	add	sp, #16
 8005be0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005be4:	4834      	ldr	r0, [pc, #208]	; (8005cb8 <_printf_i+0x244>)
 8005be6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005bea:	680e      	ldr	r6, [r1, #0]
 8005bec:	6823      	ldr	r3, [r4, #0]
 8005bee:	f856 5b04 	ldr.w	r5, [r6], #4
 8005bf2:	061f      	lsls	r7, r3, #24
 8005bf4:	600e      	str	r6, [r1, #0]
 8005bf6:	d514      	bpl.n	8005c22 <_printf_i+0x1ae>
 8005bf8:	07d9      	lsls	r1, r3, #31
 8005bfa:	bf44      	itt	mi
 8005bfc:	f043 0320 	orrmi.w	r3, r3, #32
 8005c00:	6023      	strmi	r3, [r4, #0]
 8005c02:	b91d      	cbnz	r5, 8005c0c <_printf_i+0x198>
 8005c04:	6823      	ldr	r3, [r4, #0]
 8005c06:	f023 0320 	bic.w	r3, r3, #32
 8005c0a:	6023      	str	r3, [r4, #0]
 8005c0c:	2310      	movs	r3, #16
 8005c0e:	e7af      	b.n	8005b70 <_printf_i+0xfc>
 8005c10:	6823      	ldr	r3, [r4, #0]
 8005c12:	f043 0320 	orr.w	r3, r3, #32
 8005c16:	6023      	str	r3, [r4, #0]
 8005c18:	2378      	movs	r3, #120	; 0x78
 8005c1a:	4828      	ldr	r0, [pc, #160]	; (8005cbc <_printf_i+0x248>)
 8005c1c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005c20:	e7e3      	b.n	8005bea <_printf_i+0x176>
 8005c22:	065e      	lsls	r6, r3, #25
 8005c24:	bf48      	it	mi
 8005c26:	b2ad      	uxthmi	r5, r5
 8005c28:	e7e6      	b.n	8005bf8 <_printf_i+0x184>
 8005c2a:	4616      	mov	r6, r2
 8005c2c:	e7bb      	b.n	8005ba6 <_printf_i+0x132>
 8005c2e:	680b      	ldr	r3, [r1, #0]
 8005c30:	6826      	ldr	r6, [r4, #0]
 8005c32:	1d1d      	adds	r5, r3, #4
 8005c34:	6960      	ldr	r0, [r4, #20]
 8005c36:	600d      	str	r5, [r1, #0]
 8005c38:	0635      	lsls	r5, r6, #24
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	d501      	bpl.n	8005c42 <_printf_i+0x1ce>
 8005c3e:	6018      	str	r0, [r3, #0]
 8005c40:	e002      	b.n	8005c48 <_printf_i+0x1d4>
 8005c42:	0671      	lsls	r1, r6, #25
 8005c44:	d5fb      	bpl.n	8005c3e <_printf_i+0x1ca>
 8005c46:	8018      	strh	r0, [r3, #0]
 8005c48:	2300      	movs	r3, #0
 8005c4a:	4616      	mov	r6, r2
 8005c4c:	6123      	str	r3, [r4, #16]
 8005c4e:	e7ba      	b.n	8005bc6 <_printf_i+0x152>
 8005c50:	680b      	ldr	r3, [r1, #0]
 8005c52:	1d1a      	adds	r2, r3, #4
 8005c54:	600a      	str	r2, [r1, #0]
 8005c56:	681e      	ldr	r6, [r3, #0]
 8005c58:	2100      	movs	r1, #0
 8005c5a:	4630      	mov	r0, r6
 8005c5c:	6862      	ldr	r2, [r4, #4]
 8005c5e:	f000 f82f 	bl	8005cc0 <memchr>
 8005c62:	b108      	cbz	r0, 8005c68 <_printf_i+0x1f4>
 8005c64:	1b80      	subs	r0, r0, r6
 8005c66:	6060      	str	r0, [r4, #4]
 8005c68:	6863      	ldr	r3, [r4, #4]
 8005c6a:	6123      	str	r3, [r4, #16]
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c72:	e7a8      	b.n	8005bc6 <_printf_i+0x152>
 8005c74:	4632      	mov	r2, r6
 8005c76:	4649      	mov	r1, r9
 8005c78:	4640      	mov	r0, r8
 8005c7a:	6923      	ldr	r3, [r4, #16]
 8005c7c:	47d0      	blx	sl
 8005c7e:	3001      	adds	r0, #1
 8005c80:	d0ab      	beq.n	8005bda <_printf_i+0x166>
 8005c82:	6823      	ldr	r3, [r4, #0]
 8005c84:	079b      	lsls	r3, r3, #30
 8005c86:	d413      	bmi.n	8005cb0 <_printf_i+0x23c>
 8005c88:	68e0      	ldr	r0, [r4, #12]
 8005c8a:	9b03      	ldr	r3, [sp, #12]
 8005c8c:	4298      	cmp	r0, r3
 8005c8e:	bfb8      	it	lt
 8005c90:	4618      	movlt	r0, r3
 8005c92:	e7a4      	b.n	8005bde <_printf_i+0x16a>
 8005c94:	2301      	movs	r3, #1
 8005c96:	4632      	mov	r2, r6
 8005c98:	4649      	mov	r1, r9
 8005c9a:	4640      	mov	r0, r8
 8005c9c:	47d0      	blx	sl
 8005c9e:	3001      	adds	r0, #1
 8005ca0:	d09b      	beq.n	8005bda <_printf_i+0x166>
 8005ca2:	3501      	adds	r5, #1
 8005ca4:	68e3      	ldr	r3, [r4, #12]
 8005ca6:	9903      	ldr	r1, [sp, #12]
 8005ca8:	1a5b      	subs	r3, r3, r1
 8005caa:	42ab      	cmp	r3, r5
 8005cac:	dcf2      	bgt.n	8005c94 <_printf_i+0x220>
 8005cae:	e7eb      	b.n	8005c88 <_printf_i+0x214>
 8005cb0:	2500      	movs	r5, #0
 8005cb2:	f104 0619 	add.w	r6, r4, #25
 8005cb6:	e7f5      	b.n	8005ca4 <_printf_i+0x230>
 8005cb8:	08007655 	.word	0x08007655
 8005cbc:	08007666 	.word	0x08007666

08005cc0 <memchr>:
 8005cc0:	4603      	mov	r3, r0
 8005cc2:	b510      	push	{r4, lr}
 8005cc4:	b2c9      	uxtb	r1, r1
 8005cc6:	4402      	add	r2, r0
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	4618      	mov	r0, r3
 8005ccc:	d101      	bne.n	8005cd2 <memchr+0x12>
 8005cce:	2000      	movs	r0, #0
 8005cd0:	e003      	b.n	8005cda <memchr+0x1a>
 8005cd2:	7804      	ldrb	r4, [r0, #0]
 8005cd4:	3301      	adds	r3, #1
 8005cd6:	428c      	cmp	r4, r1
 8005cd8:	d1f6      	bne.n	8005cc8 <memchr+0x8>
 8005cda:	bd10      	pop	{r4, pc}

08005cdc <memcpy>:
 8005cdc:	440a      	add	r2, r1
 8005cde:	4291      	cmp	r1, r2
 8005ce0:	f100 33ff 	add.w	r3, r0, #4294967295
 8005ce4:	d100      	bne.n	8005ce8 <memcpy+0xc>
 8005ce6:	4770      	bx	lr
 8005ce8:	b510      	push	{r4, lr}
 8005cea:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005cee:	4291      	cmp	r1, r2
 8005cf0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005cf4:	d1f9      	bne.n	8005cea <memcpy+0xe>
 8005cf6:	bd10      	pop	{r4, pc}

08005cf8 <memmove>:
 8005cf8:	4288      	cmp	r0, r1
 8005cfa:	b510      	push	{r4, lr}
 8005cfc:	eb01 0402 	add.w	r4, r1, r2
 8005d00:	d902      	bls.n	8005d08 <memmove+0x10>
 8005d02:	4284      	cmp	r4, r0
 8005d04:	4623      	mov	r3, r4
 8005d06:	d807      	bhi.n	8005d18 <memmove+0x20>
 8005d08:	1e43      	subs	r3, r0, #1
 8005d0a:	42a1      	cmp	r1, r4
 8005d0c:	d008      	beq.n	8005d20 <memmove+0x28>
 8005d0e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005d12:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005d16:	e7f8      	b.n	8005d0a <memmove+0x12>
 8005d18:	4601      	mov	r1, r0
 8005d1a:	4402      	add	r2, r0
 8005d1c:	428a      	cmp	r2, r1
 8005d1e:	d100      	bne.n	8005d22 <memmove+0x2a>
 8005d20:	bd10      	pop	{r4, pc}
 8005d22:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005d26:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005d2a:	e7f7      	b.n	8005d1c <memmove+0x24>

08005d2c <_free_r>:
 8005d2c:	b538      	push	{r3, r4, r5, lr}
 8005d2e:	4605      	mov	r5, r0
 8005d30:	2900      	cmp	r1, #0
 8005d32:	d043      	beq.n	8005dbc <_free_r+0x90>
 8005d34:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d38:	1f0c      	subs	r4, r1, #4
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	bfb8      	it	lt
 8005d3e:	18e4      	addlt	r4, r4, r3
 8005d40:	f000 f8d0 	bl	8005ee4 <__malloc_lock>
 8005d44:	4a1e      	ldr	r2, [pc, #120]	; (8005dc0 <_free_r+0x94>)
 8005d46:	6813      	ldr	r3, [r2, #0]
 8005d48:	4610      	mov	r0, r2
 8005d4a:	b933      	cbnz	r3, 8005d5a <_free_r+0x2e>
 8005d4c:	6063      	str	r3, [r4, #4]
 8005d4e:	6014      	str	r4, [r2, #0]
 8005d50:	4628      	mov	r0, r5
 8005d52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005d56:	f000 b8cb 	b.w	8005ef0 <__malloc_unlock>
 8005d5a:	42a3      	cmp	r3, r4
 8005d5c:	d90a      	bls.n	8005d74 <_free_r+0x48>
 8005d5e:	6821      	ldr	r1, [r4, #0]
 8005d60:	1862      	adds	r2, r4, r1
 8005d62:	4293      	cmp	r3, r2
 8005d64:	bf01      	itttt	eq
 8005d66:	681a      	ldreq	r2, [r3, #0]
 8005d68:	685b      	ldreq	r3, [r3, #4]
 8005d6a:	1852      	addeq	r2, r2, r1
 8005d6c:	6022      	streq	r2, [r4, #0]
 8005d6e:	6063      	str	r3, [r4, #4]
 8005d70:	6004      	str	r4, [r0, #0]
 8005d72:	e7ed      	b.n	8005d50 <_free_r+0x24>
 8005d74:	461a      	mov	r2, r3
 8005d76:	685b      	ldr	r3, [r3, #4]
 8005d78:	b10b      	cbz	r3, 8005d7e <_free_r+0x52>
 8005d7a:	42a3      	cmp	r3, r4
 8005d7c:	d9fa      	bls.n	8005d74 <_free_r+0x48>
 8005d7e:	6811      	ldr	r1, [r2, #0]
 8005d80:	1850      	adds	r0, r2, r1
 8005d82:	42a0      	cmp	r0, r4
 8005d84:	d10b      	bne.n	8005d9e <_free_r+0x72>
 8005d86:	6820      	ldr	r0, [r4, #0]
 8005d88:	4401      	add	r1, r0
 8005d8a:	1850      	adds	r0, r2, r1
 8005d8c:	4283      	cmp	r3, r0
 8005d8e:	6011      	str	r1, [r2, #0]
 8005d90:	d1de      	bne.n	8005d50 <_free_r+0x24>
 8005d92:	6818      	ldr	r0, [r3, #0]
 8005d94:	685b      	ldr	r3, [r3, #4]
 8005d96:	4401      	add	r1, r0
 8005d98:	6011      	str	r1, [r2, #0]
 8005d9a:	6053      	str	r3, [r2, #4]
 8005d9c:	e7d8      	b.n	8005d50 <_free_r+0x24>
 8005d9e:	d902      	bls.n	8005da6 <_free_r+0x7a>
 8005da0:	230c      	movs	r3, #12
 8005da2:	602b      	str	r3, [r5, #0]
 8005da4:	e7d4      	b.n	8005d50 <_free_r+0x24>
 8005da6:	6820      	ldr	r0, [r4, #0]
 8005da8:	1821      	adds	r1, r4, r0
 8005daa:	428b      	cmp	r3, r1
 8005dac:	bf01      	itttt	eq
 8005dae:	6819      	ldreq	r1, [r3, #0]
 8005db0:	685b      	ldreq	r3, [r3, #4]
 8005db2:	1809      	addeq	r1, r1, r0
 8005db4:	6021      	streq	r1, [r4, #0]
 8005db6:	6063      	str	r3, [r4, #4]
 8005db8:	6054      	str	r4, [r2, #4]
 8005dba:	e7c9      	b.n	8005d50 <_free_r+0x24>
 8005dbc:	bd38      	pop	{r3, r4, r5, pc}
 8005dbe:	bf00      	nop
 8005dc0:	20000094 	.word	0x20000094

08005dc4 <_malloc_r>:
 8005dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dc6:	1ccd      	adds	r5, r1, #3
 8005dc8:	f025 0503 	bic.w	r5, r5, #3
 8005dcc:	3508      	adds	r5, #8
 8005dce:	2d0c      	cmp	r5, #12
 8005dd0:	bf38      	it	cc
 8005dd2:	250c      	movcc	r5, #12
 8005dd4:	2d00      	cmp	r5, #0
 8005dd6:	4606      	mov	r6, r0
 8005dd8:	db01      	blt.n	8005dde <_malloc_r+0x1a>
 8005dda:	42a9      	cmp	r1, r5
 8005ddc:	d903      	bls.n	8005de6 <_malloc_r+0x22>
 8005dde:	230c      	movs	r3, #12
 8005de0:	6033      	str	r3, [r6, #0]
 8005de2:	2000      	movs	r0, #0
 8005de4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005de6:	f000 f87d 	bl	8005ee4 <__malloc_lock>
 8005dea:	4921      	ldr	r1, [pc, #132]	; (8005e70 <_malloc_r+0xac>)
 8005dec:	680a      	ldr	r2, [r1, #0]
 8005dee:	4614      	mov	r4, r2
 8005df0:	b99c      	cbnz	r4, 8005e1a <_malloc_r+0x56>
 8005df2:	4f20      	ldr	r7, [pc, #128]	; (8005e74 <_malloc_r+0xb0>)
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	b923      	cbnz	r3, 8005e02 <_malloc_r+0x3e>
 8005df8:	4621      	mov	r1, r4
 8005dfa:	4630      	mov	r0, r6
 8005dfc:	f000 f862 	bl	8005ec4 <_sbrk_r>
 8005e00:	6038      	str	r0, [r7, #0]
 8005e02:	4629      	mov	r1, r5
 8005e04:	4630      	mov	r0, r6
 8005e06:	f000 f85d 	bl	8005ec4 <_sbrk_r>
 8005e0a:	1c43      	adds	r3, r0, #1
 8005e0c:	d123      	bne.n	8005e56 <_malloc_r+0x92>
 8005e0e:	230c      	movs	r3, #12
 8005e10:	4630      	mov	r0, r6
 8005e12:	6033      	str	r3, [r6, #0]
 8005e14:	f000 f86c 	bl	8005ef0 <__malloc_unlock>
 8005e18:	e7e3      	b.n	8005de2 <_malloc_r+0x1e>
 8005e1a:	6823      	ldr	r3, [r4, #0]
 8005e1c:	1b5b      	subs	r3, r3, r5
 8005e1e:	d417      	bmi.n	8005e50 <_malloc_r+0x8c>
 8005e20:	2b0b      	cmp	r3, #11
 8005e22:	d903      	bls.n	8005e2c <_malloc_r+0x68>
 8005e24:	6023      	str	r3, [r4, #0]
 8005e26:	441c      	add	r4, r3
 8005e28:	6025      	str	r5, [r4, #0]
 8005e2a:	e004      	b.n	8005e36 <_malloc_r+0x72>
 8005e2c:	6863      	ldr	r3, [r4, #4]
 8005e2e:	42a2      	cmp	r2, r4
 8005e30:	bf0c      	ite	eq
 8005e32:	600b      	streq	r3, [r1, #0]
 8005e34:	6053      	strne	r3, [r2, #4]
 8005e36:	4630      	mov	r0, r6
 8005e38:	f000 f85a 	bl	8005ef0 <__malloc_unlock>
 8005e3c:	f104 000b 	add.w	r0, r4, #11
 8005e40:	1d23      	adds	r3, r4, #4
 8005e42:	f020 0007 	bic.w	r0, r0, #7
 8005e46:	1ac2      	subs	r2, r0, r3
 8005e48:	d0cc      	beq.n	8005de4 <_malloc_r+0x20>
 8005e4a:	1a1b      	subs	r3, r3, r0
 8005e4c:	50a3      	str	r3, [r4, r2]
 8005e4e:	e7c9      	b.n	8005de4 <_malloc_r+0x20>
 8005e50:	4622      	mov	r2, r4
 8005e52:	6864      	ldr	r4, [r4, #4]
 8005e54:	e7cc      	b.n	8005df0 <_malloc_r+0x2c>
 8005e56:	1cc4      	adds	r4, r0, #3
 8005e58:	f024 0403 	bic.w	r4, r4, #3
 8005e5c:	42a0      	cmp	r0, r4
 8005e5e:	d0e3      	beq.n	8005e28 <_malloc_r+0x64>
 8005e60:	1a21      	subs	r1, r4, r0
 8005e62:	4630      	mov	r0, r6
 8005e64:	f000 f82e 	bl	8005ec4 <_sbrk_r>
 8005e68:	3001      	adds	r0, #1
 8005e6a:	d1dd      	bne.n	8005e28 <_malloc_r+0x64>
 8005e6c:	e7cf      	b.n	8005e0e <_malloc_r+0x4a>
 8005e6e:	bf00      	nop
 8005e70:	20000094 	.word	0x20000094
 8005e74:	20000098 	.word	0x20000098

08005e78 <_realloc_r>:
 8005e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e7a:	4607      	mov	r7, r0
 8005e7c:	4614      	mov	r4, r2
 8005e7e:	460e      	mov	r6, r1
 8005e80:	b921      	cbnz	r1, 8005e8c <_realloc_r+0x14>
 8005e82:	4611      	mov	r1, r2
 8005e84:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005e88:	f7ff bf9c 	b.w	8005dc4 <_malloc_r>
 8005e8c:	b922      	cbnz	r2, 8005e98 <_realloc_r+0x20>
 8005e8e:	f7ff ff4d 	bl	8005d2c <_free_r>
 8005e92:	4625      	mov	r5, r4
 8005e94:	4628      	mov	r0, r5
 8005e96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e98:	f000 f830 	bl	8005efc <_malloc_usable_size_r>
 8005e9c:	42a0      	cmp	r0, r4
 8005e9e:	d20f      	bcs.n	8005ec0 <_realloc_r+0x48>
 8005ea0:	4621      	mov	r1, r4
 8005ea2:	4638      	mov	r0, r7
 8005ea4:	f7ff ff8e 	bl	8005dc4 <_malloc_r>
 8005ea8:	4605      	mov	r5, r0
 8005eaa:	2800      	cmp	r0, #0
 8005eac:	d0f2      	beq.n	8005e94 <_realloc_r+0x1c>
 8005eae:	4631      	mov	r1, r6
 8005eb0:	4622      	mov	r2, r4
 8005eb2:	f7ff ff13 	bl	8005cdc <memcpy>
 8005eb6:	4631      	mov	r1, r6
 8005eb8:	4638      	mov	r0, r7
 8005eba:	f7ff ff37 	bl	8005d2c <_free_r>
 8005ebe:	e7e9      	b.n	8005e94 <_realloc_r+0x1c>
 8005ec0:	4635      	mov	r5, r6
 8005ec2:	e7e7      	b.n	8005e94 <_realloc_r+0x1c>

08005ec4 <_sbrk_r>:
 8005ec4:	b538      	push	{r3, r4, r5, lr}
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	4d05      	ldr	r5, [pc, #20]	; (8005ee0 <_sbrk_r+0x1c>)
 8005eca:	4604      	mov	r4, r0
 8005ecc:	4608      	mov	r0, r1
 8005ece:	602b      	str	r3, [r5, #0]
 8005ed0:	f7fc f940 	bl	8002154 <_sbrk>
 8005ed4:	1c43      	adds	r3, r0, #1
 8005ed6:	d102      	bne.n	8005ede <_sbrk_r+0x1a>
 8005ed8:	682b      	ldr	r3, [r5, #0]
 8005eda:	b103      	cbz	r3, 8005ede <_sbrk_r+0x1a>
 8005edc:	6023      	str	r3, [r4, #0]
 8005ede:	bd38      	pop	{r3, r4, r5, pc}
 8005ee0:	200003f4 	.word	0x200003f4

08005ee4 <__malloc_lock>:
 8005ee4:	4801      	ldr	r0, [pc, #4]	; (8005eec <__malloc_lock+0x8>)
 8005ee6:	f000 b811 	b.w	8005f0c <__retarget_lock_acquire_recursive>
 8005eea:	bf00      	nop
 8005eec:	200003fc 	.word	0x200003fc

08005ef0 <__malloc_unlock>:
 8005ef0:	4801      	ldr	r0, [pc, #4]	; (8005ef8 <__malloc_unlock+0x8>)
 8005ef2:	f000 b80c 	b.w	8005f0e <__retarget_lock_release_recursive>
 8005ef6:	bf00      	nop
 8005ef8:	200003fc 	.word	0x200003fc

08005efc <_malloc_usable_size_r>:
 8005efc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005f00:	1f18      	subs	r0, r3, #4
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	bfbc      	itt	lt
 8005f06:	580b      	ldrlt	r3, [r1, r0]
 8005f08:	18c0      	addlt	r0, r0, r3
 8005f0a:	4770      	bx	lr

08005f0c <__retarget_lock_acquire_recursive>:
 8005f0c:	4770      	bx	lr

08005f0e <__retarget_lock_release_recursive>:
 8005f0e:	4770      	bx	lr

08005f10 <sin>:
 8005f10:	b530      	push	{r4, r5, lr}
 8005f12:	4a20      	ldr	r2, [pc, #128]	; (8005f94 <sin+0x84>)
 8005f14:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	b087      	sub	sp, #28
 8005f1c:	dc06      	bgt.n	8005f2c <sin+0x1c>
 8005f1e:	2300      	movs	r3, #0
 8005f20:	2200      	movs	r2, #0
 8005f22:	9300      	str	r3, [sp, #0]
 8005f24:	2300      	movs	r3, #0
 8005f26:	f001 f933 	bl	8007190 <__kernel_sin>
 8005f2a:	e006      	b.n	8005f3a <sin+0x2a>
 8005f2c:	4a1a      	ldr	r2, [pc, #104]	; (8005f98 <sin+0x88>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	dd05      	ble.n	8005f3e <sin+0x2e>
 8005f32:	4602      	mov	r2, r0
 8005f34:	460b      	mov	r3, r1
 8005f36:	f7fa f90f 	bl	8000158 <__aeabi_dsub>
 8005f3a:	b007      	add	sp, #28
 8005f3c:	bd30      	pop	{r4, r5, pc}
 8005f3e:	aa02      	add	r2, sp, #8
 8005f40:	f000 fa82 	bl	8006448 <__ieee754_rem_pio2>
 8005f44:	f000 0003 	and.w	r0, r0, #3
 8005f48:	2801      	cmp	r0, #1
 8005f4a:	d009      	beq.n	8005f60 <sin+0x50>
 8005f4c:	2802      	cmp	r0, #2
 8005f4e:	d00e      	beq.n	8005f6e <sin+0x5e>
 8005f50:	b9c0      	cbnz	r0, 8005f84 <sin+0x74>
 8005f52:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005f56:	2301      	movs	r3, #1
 8005f58:	9300      	str	r3, [sp, #0]
 8005f5a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005f5e:	e7e2      	b.n	8005f26 <sin+0x16>
 8005f60:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005f64:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005f68:	f000 fd0a 	bl	8006980 <__kernel_cos>
 8005f6c:	e7e5      	b.n	8005f3a <sin+0x2a>
 8005f6e:	2301      	movs	r3, #1
 8005f70:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005f74:	9300      	str	r3, [sp, #0]
 8005f76:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005f7a:	f001 f909 	bl	8007190 <__kernel_sin>
 8005f7e:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8005f82:	e7da      	b.n	8005f3a <sin+0x2a>
 8005f84:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005f88:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005f8c:	f000 fcf8 	bl	8006980 <__kernel_cos>
 8005f90:	e7f5      	b.n	8005f7e <sin+0x6e>
 8005f92:	bf00      	nop
 8005f94:	3fe921fb 	.word	0x3fe921fb
 8005f98:	7fefffff 	.word	0x7fefffff

08005f9c <asin>:
 8005f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f9e:	4604      	mov	r4, r0
 8005fa0:	460d      	mov	r5, r1
 8005fa2:	f000 f855 	bl	8006050 <__ieee754_asin>
 8005fa6:	4b11      	ldr	r3, [pc, #68]	; (8005fec <asin+0x50>)
 8005fa8:	4606      	mov	r6, r0
 8005faa:	f993 3000 	ldrsb.w	r3, [r3]
 8005fae:	460f      	mov	r7, r1
 8005fb0:	3301      	adds	r3, #1
 8005fb2:	d018      	beq.n	8005fe6 <asin+0x4a>
 8005fb4:	4622      	mov	r2, r4
 8005fb6:	462b      	mov	r3, r5
 8005fb8:	4620      	mov	r0, r4
 8005fba:	4629      	mov	r1, r5
 8005fbc:	f7fa fd1e 	bl	80009fc <__aeabi_dcmpun>
 8005fc0:	b988      	cbnz	r0, 8005fe6 <asin+0x4a>
 8005fc2:	4620      	mov	r0, r4
 8005fc4:	4629      	mov	r1, r5
 8005fc6:	f001 f999 	bl	80072fc <fabs>
 8005fca:	2200      	movs	r2, #0
 8005fcc:	4b08      	ldr	r3, [pc, #32]	; (8005ff0 <asin+0x54>)
 8005fce:	f7fa fd0b 	bl	80009e8 <__aeabi_dcmpgt>
 8005fd2:	b140      	cbz	r0, 8005fe6 <asin+0x4a>
 8005fd4:	f7ff fb30 	bl	8005638 <__errno>
 8005fd8:	2321      	movs	r3, #33	; 0x21
 8005fda:	6003      	str	r3, [r0, #0]
 8005fdc:	4805      	ldr	r0, [pc, #20]	; (8005ff4 <asin+0x58>)
 8005fde:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005fe2:	f001 ba11 	b.w	8007408 <nan>
 8005fe6:	4630      	mov	r0, r6
 8005fe8:	4639      	mov	r1, r7
 8005fea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005fec:	20000070 	.word	0x20000070
 8005ff0:	3ff00000 	.word	0x3ff00000
 8005ff4:	08007649 	.word	0x08007649

08005ff8 <sqrt>:
 8005ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ffa:	4606      	mov	r6, r0
 8005ffc:	460f      	mov	r7, r1
 8005ffe:	f000 fc13 	bl	8006828 <__ieee754_sqrt>
 8006002:	4b12      	ldr	r3, [pc, #72]	; (800604c <sqrt+0x54>)
 8006004:	4604      	mov	r4, r0
 8006006:	f993 3000 	ldrsb.w	r3, [r3]
 800600a:	460d      	mov	r5, r1
 800600c:	3301      	adds	r3, #1
 800600e:	d019      	beq.n	8006044 <sqrt+0x4c>
 8006010:	4632      	mov	r2, r6
 8006012:	463b      	mov	r3, r7
 8006014:	4630      	mov	r0, r6
 8006016:	4639      	mov	r1, r7
 8006018:	f7fa fcf0 	bl	80009fc <__aeabi_dcmpun>
 800601c:	b990      	cbnz	r0, 8006044 <sqrt+0x4c>
 800601e:	2200      	movs	r2, #0
 8006020:	2300      	movs	r3, #0
 8006022:	4630      	mov	r0, r6
 8006024:	4639      	mov	r1, r7
 8006026:	f7fa fcc1 	bl	80009ac <__aeabi_dcmplt>
 800602a:	b158      	cbz	r0, 8006044 <sqrt+0x4c>
 800602c:	f7ff fb04 	bl	8005638 <__errno>
 8006030:	2321      	movs	r3, #33	; 0x21
 8006032:	2200      	movs	r2, #0
 8006034:	6003      	str	r3, [r0, #0]
 8006036:	2300      	movs	r3, #0
 8006038:	4610      	mov	r0, r2
 800603a:	4619      	mov	r1, r3
 800603c:	f7fa fb6e 	bl	800071c <__aeabi_ddiv>
 8006040:	4604      	mov	r4, r0
 8006042:	460d      	mov	r5, r1
 8006044:	4620      	mov	r0, r4
 8006046:	4629      	mov	r1, r5
 8006048:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800604a:	bf00      	nop
 800604c:	20000070 	.word	0x20000070

08006050 <__ieee754_asin>:
 8006050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006054:	4bc4      	ldr	r3, [pc, #784]	; (8006368 <__ieee754_asin+0x318>)
 8006056:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800605a:	b087      	sub	sp, #28
 800605c:	429e      	cmp	r6, r3
 800605e:	4602      	mov	r2, r0
 8006060:	4604      	mov	r4, r0
 8006062:	460d      	mov	r5, r1
 8006064:	9105      	str	r1, [sp, #20]
 8006066:	dd29      	ble.n	80060bc <__ieee754_asin+0x6c>
 8006068:	4603      	mov	r3, r0
 800606a:	f106 4640 	add.w	r6, r6, #3221225472	; 0xc0000000
 800606e:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 8006072:	4333      	orrs	r3, r6
 8006074:	d114      	bne.n	80060a0 <__ieee754_asin+0x50>
 8006076:	a3a2      	add	r3, pc, #648	; (adr r3, 8006300 <__ieee754_asin+0x2b0>)
 8006078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800607c:	f7fa fa24 	bl	80004c8 <__aeabi_dmul>
 8006080:	a3a1      	add	r3, pc, #644	; (adr r3, 8006308 <__ieee754_asin+0x2b8>)
 8006082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006086:	4606      	mov	r6, r0
 8006088:	460f      	mov	r7, r1
 800608a:	4620      	mov	r0, r4
 800608c:	4629      	mov	r1, r5
 800608e:	f7fa fa1b 	bl	80004c8 <__aeabi_dmul>
 8006092:	4602      	mov	r2, r0
 8006094:	460b      	mov	r3, r1
 8006096:	4630      	mov	r0, r6
 8006098:	4639      	mov	r1, r7
 800609a:	f7fa f85f 	bl	800015c <__adddf3>
 800609e:	e006      	b.n	80060ae <__ieee754_asin+0x5e>
 80060a0:	460b      	mov	r3, r1
 80060a2:	f7fa f859 	bl	8000158 <__aeabi_dsub>
 80060a6:	4602      	mov	r2, r0
 80060a8:	460b      	mov	r3, r1
 80060aa:	f7fa fb37 	bl	800071c <__aeabi_ddiv>
 80060ae:	4604      	mov	r4, r0
 80060b0:	460d      	mov	r5, r1
 80060b2:	4620      	mov	r0, r4
 80060b4:	4629      	mov	r1, r5
 80060b6:	b007      	add	sp, #28
 80060b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060bc:	4bab      	ldr	r3, [pc, #684]	; (800636c <__ieee754_asin+0x31c>)
 80060be:	429e      	cmp	r6, r3
 80060c0:	dc0e      	bgt.n	80060e0 <__ieee754_asin+0x90>
 80060c2:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 80060c6:	f280 80ab 	bge.w	8006220 <__ieee754_asin+0x1d0>
 80060ca:	a391      	add	r3, pc, #580	; (adr r3, 8006310 <__ieee754_asin+0x2c0>)
 80060cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060d0:	f7fa f844 	bl	800015c <__adddf3>
 80060d4:	2200      	movs	r2, #0
 80060d6:	4ba6      	ldr	r3, [pc, #664]	; (8006370 <__ieee754_asin+0x320>)
 80060d8:	f7fa fc86 	bl	80009e8 <__aeabi_dcmpgt>
 80060dc:	2800      	cmp	r0, #0
 80060de:	d1e8      	bne.n	80060b2 <__ieee754_asin+0x62>
 80060e0:	4620      	mov	r0, r4
 80060e2:	4629      	mov	r1, r5
 80060e4:	f001 f90a 	bl	80072fc <fabs>
 80060e8:	4602      	mov	r2, r0
 80060ea:	460b      	mov	r3, r1
 80060ec:	2000      	movs	r0, #0
 80060ee:	49a0      	ldr	r1, [pc, #640]	; (8006370 <__ieee754_asin+0x320>)
 80060f0:	f7fa f832 	bl	8000158 <__aeabi_dsub>
 80060f4:	2200      	movs	r2, #0
 80060f6:	4b9f      	ldr	r3, [pc, #636]	; (8006374 <__ieee754_asin+0x324>)
 80060f8:	f7fa f9e6 	bl	80004c8 <__aeabi_dmul>
 80060fc:	a386      	add	r3, pc, #536	; (adr r3, 8006318 <__ieee754_asin+0x2c8>)
 80060fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006102:	4604      	mov	r4, r0
 8006104:	460d      	mov	r5, r1
 8006106:	f7fa f9df 	bl	80004c8 <__aeabi_dmul>
 800610a:	a385      	add	r3, pc, #532	; (adr r3, 8006320 <__ieee754_asin+0x2d0>)
 800610c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006110:	f7fa f824 	bl	800015c <__adddf3>
 8006114:	4622      	mov	r2, r4
 8006116:	462b      	mov	r3, r5
 8006118:	f7fa f9d6 	bl	80004c8 <__aeabi_dmul>
 800611c:	a382      	add	r3, pc, #520	; (adr r3, 8006328 <__ieee754_asin+0x2d8>)
 800611e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006122:	f7fa f819 	bl	8000158 <__aeabi_dsub>
 8006126:	4622      	mov	r2, r4
 8006128:	462b      	mov	r3, r5
 800612a:	f7fa f9cd 	bl	80004c8 <__aeabi_dmul>
 800612e:	a380      	add	r3, pc, #512	; (adr r3, 8006330 <__ieee754_asin+0x2e0>)
 8006130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006134:	f7fa f812 	bl	800015c <__adddf3>
 8006138:	4622      	mov	r2, r4
 800613a:	462b      	mov	r3, r5
 800613c:	f7fa f9c4 	bl	80004c8 <__aeabi_dmul>
 8006140:	a37d      	add	r3, pc, #500	; (adr r3, 8006338 <__ieee754_asin+0x2e8>)
 8006142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006146:	f7fa f807 	bl	8000158 <__aeabi_dsub>
 800614a:	4622      	mov	r2, r4
 800614c:	462b      	mov	r3, r5
 800614e:	f7fa f9bb 	bl	80004c8 <__aeabi_dmul>
 8006152:	a37b      	add	r3, pc, #492	; (adr r3, 8006340 <__ieee754_asin+0x2f0>)
 8006154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006158:	f7fa f800 	bl	800015c <__adddf3>
 800615c:	4622      	mov	r2, r4
 800615e:	462b      	mov	r3, r5
 8006160:	f7fa f9b2 	bl	80004c8 <__aeabi_dmul>
 8006164:	a378      	add	r3, pc, #480	; (adr r3, 8006348 <__ieee754_asin+0x2f8>)
 8006166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800616a:	e9cd 0100 	strd	r0, r1, [sp]
 800616e:	4620      	mov	r0, r4
 8006170:	4629      	mov	r1, r5
 8006172:	f7fa f9a9 	bl	80004c8 <__aeabi_dmul>
 8006176:	a376      	add	r3, pc, #472	; (adr r3, 8006350 <__ieee754_asin+0x300>)
 8006178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800617c:	f7f9 ffec 	bl	8000158 <__aeabi_dsub>
 8006180:	4622      	mov	r2, r4
 8006182:	462b      	mov	r3, r5
 8006184:	f7fa f9a0 	bl	80004c8 <__aeabi_dmul>
 8006188:	a373      	add	r3, pc, #460	; (adr r3, 8006358 <__ieee754_asin+0x308>)
 800618a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800618e:	f7f9 ffe5 	bl	800015c <__adddf3>
 8006192:	4622      	mov	r2, r4
 8006194:	462b      	mov	r3, r5
 8006196:	f7fa f997 	bl	80004c8 <__aeabi_dmul>
 800619a:	a371      	add	r3, pc, #452	; (adr r3, 8006360 <__ieee754_asin+0x310>)
 800619c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061a0:	f7f9 ffda 	bl	8000158 <__aeabi_dsub>
 80061a4:	4622      	mov	r2, r4
 80061a6:	462b      	mov	r3, r5
 80061a8:	f7fa f98e 	bl	80004c8 <__aeabi_dmul>
 80061ac:	4b70      	ldr	r3, [pc, #448]	; (8006370 <__ieee754_asin+0x320>)
 80061ae:	2200      	movs	r2, #0
 80061b0:	f7f9 ffd4 	bl	800015c <__adddf3>
 80061b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80061b8:	4620      	mov	r0, r4
 80061ba:	4629      	mov	r1, r5
 80061bc:	f000 fb34 	bl	8006828 <__ieee754_sqrt>
 80061c0:	4b6d      	ldr	r3, [pc, #436]	; (8006378 <__ieee754_asin+0x328>)
 80061c2:	4682      	mov	sl, r0
 80061c4:	429e      	cmp	r6, r3
 80061c6:	468b      	mov	fp, r1
 80061c8:	f340 80d8 	ble.w	800637c <__ieee754_asin+0x32c>
 80061cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80061d0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80061d4:	f7fa faa2 	bl	800071c <__aeabi_ddiv>
 80061d8:	4652      	mov	r2, sl
 80061da:	465b      	mov	r3, fp
 80061dc:	f7fa f974 	bl	80004c8 <__aeabi_dmul>
 80061e0:	4652      	mov	r2, sl
 80061e2:	465b      	mov	r3, fp
 80061e4:	f7f9 ffba 	bl	800015c <__adddf3>
 80061e8:	4602      	mov	r2, r0
 80061ea:	460b      	mov	r3, r1
 80061ec:	f7f9 ffb6 	bl	800015c <__adddf3>
 80061f0:	a345      	add	r3, pc, #276	; (adr r3, 8006308 <__ieee754_asin+0x2b8>)
 80061f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061f6:	f7f9 ffaf 	bl	8000158 <__aeabi_dsub>
 80061fa:	4602      	mov	r2, r0
 80061fc:	460b      	mov	r3, r1
 80061fe:	a140      	add	r1, pc, #256	; (adr r1, 8006300 <__ieee754_asin+0x2b0>)
 8006200:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006204:	f7f9 ffa8 	bl	8000158 <__aeabi_dsub>
 8006208:	9b05      	ldr	r3, [sp, #20]
 800620a:	4604      	mov	r4, r0
 800620c:	2b00      	cmp	r3, #0
 800620e:	bfdc      	itt	le
 8006210:	4602      	movle	r2, r0
 8006212:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 8006216:	460d      	mov	r5, r1
 8006218:	bfdc      	itt	le
 800621a:	4614      	movle	r4, r2
 800621c:	461d      	movle	r5, r3
 800621e:	e748      	b.n	80060b2 <__ieee754_asin+0x62>
 8006220:	460b      	mov	r3, r1
 8006222:	f7fa f951 	bl	80004c8 <__aeabi_dmul>
 8006226:	a33c      	add	r3, pc, #240	; (adr r3, 8006318 <__ieee754_asin+0x2c8>)
 8006228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800622c:	4606      	mov	r6, r0
 800622e:	460f      	mov	r7, r1
 8006230:	f7fa f94a 	bl	80004c8 <__aeabi_dmul>
 8006234:	a33a      	add	r3, pc, #232	; (adr r3, 8006320 <__ieee754_asin+0x2d0>)
 8006236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800623a:	f7f9 ff8f 	bl	800015c <__adddf3>
 800623e:	4632      	mov	r2, r6
 8006240:	463b      	mov	r3, r7
 8006242:	f7fa f941 	bl	80004c8 <__aeabi_dmul>
 8006246:	a338      	add	r3, pc, #224	; (adr r3, 8006328 <__ieee754_asin+0x2d8>)
 8006248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800624c:	f7f9 ff84 	bl	8000158 <__aeabi_dsub>
 8006250:	4632      	mov	r2, r6
 8006252:	463b      	mov	r3, r7
 8006254:	f7fa f938 	bl	80004c8 <__aeabi_dmul>
 8006258:	a335      	add	r3, pc, #212	; (adr r3, 8006330 <__ieee754_asin+0x2e0>)
 800625a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800625e:	f7f9 ff7d 	bl	800015c <__adddf3>
 8006262:	4632      	mov	r2, r6
 8006264:	463b      	mov	r3, r7
 8006266:	f7fa f92f 	bl	80004c8 <__aeabi_dmul>
 800626a:	a333      	add	r3, pc, #204	; (adr r3, 8006338 <__ieee754_asin+0x2e8>)
 800626c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006270:	f7f9 ff72 	bl	8000158 <__aeabi_dsub>
 8006274:	4632      	mov	r2, r6
 8006276:	463b      	mov	r3, r7
 8006278:	f7fa f926 	bl	80004c8 <__aeabi_dmul>
 800627c:	a330      	add	r3, pc, #192	; (adr r3, 8006340 <__ieee754_asin+0x2f0>)
 800627e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006282:	f7f9 ff6b 	bl	800015c <__adddf3>
 8006286:	4632      	mov	r2, r6
 8006288:	463b      	mov	r3, r7
 800628a:	f7fa f91d 	bl	80004c8 <__aeabi_dmul>
 800628e:	a32e      	add	r3, pc, #184	; (adr r3, 8006348 <__ieee754_asin+0x2f8>)
 8006290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006294:	4680      	mov	r8, r0
 8006296:	4689      	mov	r9, r1
 8006298:	4630      	mov	r0, r6
 800629a:	4639      	mov	r1, r7
 800629c:	f7fa f914 	bl	80004c8 <__aeabi_dmul>
 80062a0:	a32b      	add	r3, pc, #172	; (adr r3, 8006350 <__ieee754_asin+0x300>)
 80062a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062a6:	f7f9 ff57 	bl	8000158 <__aeabi_dsub>
 80062aa:	4632      	mov	r2, r6
 80062ac:	463b      	mov	r3, r7
 80062ae:	f7fa f90b 	bl	80004c8 <__aeabi_dmul>
 80062b2:	a329      	add	r3, pc, #164	; (adr r3, 8006358 <__ieee754_asin+0x308>)
 80062b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062b8:	f7f9 ff50 	bl	800015c <__adddf3>
 80062bc:	4632      	mov	r2, r6
 80062be:	463b      	mov	r3, r7
 80062c0:	f7fa f902 	bl	80004c8 <__aeabi_dmul>
 80062c4:	a326      	add	r3, pc, #152	; (adr r3, 8006360 <__ieee754_asin+0x310>)
 80062c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062ca:	f7f9 ff45 	bl	8000158 <__aeabi_dsub>
 80062ce:	4632      	mov	r2, r6
 80062d0:	463b      	mov	r3, r7
 80062d2:	f7fa f8f9 	bl	80004c8 <__aeabi_dmul>
 80062d6:	2200      	movs	r2, #0
 80062d8:	4b25      	ldr	r3, [pc, #148]	; (8006370 <__ieee754_asin+0x320>)
 80062da:	f7f9 ff3f 	bl	800015c <__adddf3>
 80062de:	4602      	mov	r2, r0
 80062e0:	460b      	mov	r3, r1
 80062e2:	4640      	mov	r0, r8
 80062e4:	4649      	mov	r1, r9
 80062e6:	f7fa fa19 	bl	800071c <__aeabi_ddiv>
 80062ea:	4622      	mov	r2, r4
 80062ec:	462b      	mov	r3, r5
 80062ee:	f7fa f8eb 	bl	80004c8 <__aeabi_dmul>
 80062f2:	4602      	mov	r2, r0
 80062f4:	460b      	mov	r3, r1
 80062f6:	4620      	mov	r0, r4
 80062f8:	4629      	mov	r1, r5
 80062fa:	e6ce      	b.n	800609a <__ieee754_asin+0x4a>
 80062fc:	f3af 8000 	nop.w
 8006300:	54442d18 	.word	0x54442d18
 8006304:	3ff921fb 	.word	0x3ff921fb
 8006308:	33145c07 	.word	0x33145c07
 800630c:	3c91a626 	.word	0x3c91a626
 8006310:	8800759c 	.word	0x8800759c
 8006314:	7e37e43c 	.word	0x7e37e43c
 8006318:	0dfdf709 	.word	0x0dfdf709
 800631c:	3f023de1 	.word	0x3f023de1
 8006320:	7501b288 	.word	0x7501b288
 8006324:	3f49efe0 	.word	0x3f49efe0
 8006328:	b5688f3b 	.word	0xb5688f3b
 800632c:	3fa48228 	.word	0x3fa48228
 8006330:	0e884455 	.word	0x0e884455
 8006334:	3fc9c155 	.word	0x3fc9c155
 8006338:	03eb6f7d 	.word	0x03eb6f7d
 800633c:	3fd4d612 	.word	0x3fd4d612
 8006340:	55555555 	.word	0x55555555
 8006344:	3fc55555 	.word	0x3fc55555
 8006348:	b12e9282 	.word	0xb12e9282
 800634c:	3fb3b8c5 	.word	0x3fb3b8c5
 8006350:	1b8d0159 	.word	0x1b8d0159
 8006354:	3fe6066c 	.word	0x3fe6066c
 8006358:	9c598ac8 	.word	0x9c598ac8
 800635c:	40002ae5 	.word	0x40002ae5
 8006360:	1c8a2d4b 	.word	0x1c8a2d4b
 8006364:	40033a27 	.word	0x40033a27
 8006368:	3fefffff 	.word	0x3fefffff
 800636c:	3fdfffff 	.word	0x3fdfffff
 8006370:	3ff00000 	.word	0x3ff00000
 8006374:	3fe00000 	.word	0x3fe00000
 8006378:	3fef3332 	.word	0x3fef3332
 800637c:	4602      	mov	r2, r0
 800637e:	460b      	mov	r3, r1
 8006380:	f7f9 feec 	bl	800015c <__adddf3>
 8006384:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006388:	4606      	mov	r6, r0
 800638a:	460f      	mov	r7, r1
 800638c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006390:	f7fa f9c4 	bl	800071c <__aeabi_ddiv>
 8006394:	4602      	mov	r2, r0
 8006396:	460b      	mov	r3, r1
 8006398:	4630      	mov	r0, r6
 800639a:	4639      	mov	r1, r7
 800639c:	f7fa f894 	bl	80004c8 <__aeabi_dmul>
 80063a0:	f04f 0800 	mov.w	r8, #0
 80063a4:	4606      	mov	r6, r0
 80063a6:	460f      	mov	r7, r1
 80063a8:	4642      	mov	r2, r8
 80063aa:	465b      	mov	r3, fp
 80063ac:	4640      	mov	r0, r8
 80063ae:	4659      	mov	r1, fp
 80063b0:	f7fa f88a 	bl	80004c8 <__aeabi_dmul>
 80063b4:	4602      	mov	r2, r0
 80063b6:	460b      	mov	r3, r1
 80063b8:	4620      	mov	r0, r4
 80063ba:	4629      	mov	r1, r5
 80063bc:	f7f9 fecc 	bl	8000158 <__aeabi_dsub>
 80063c0:	4642      	mov	r2, r8
 80063c2:	4604      	mov	r4, r0
 80063c4:	460d      	mov	r5, r1
 80063c6:	465b      	mov	r3, fp
 80063c8:	4650      	mov	r0, sl
 80063ca:	4659      	mov	r1, fp
 80063cc:	f7f9 fec6 	bl	800015c <__adddf3>
 80063d0:	4602      	mov	r2, r0
 80063d2:	460b      	mov	r3, r1
 80063d4:	4620      	mov	r0, r4
 80063d6:	4629      	mov	r1, r5
 80063d8:	f7fa f9a0 	bl	800071c <__aeabi_ddiv>
 80063dc:	4602      	mov	r2, r0
 80063de:	460b      	mov	r3, r1
 80063e0:	f7f9 febc 	bl	800015c <__adddf3>
 80063e4:	4602      	mov	r2, r0
 80063e6:	460b      	mov	r3, r1
 80063e8:	a113      	add	r1, pc, #76	; (adr r1, 8006438 <__ieee754_asin+0x3e8>)
 80063ea:	e9d1 0100 	ldrd	r0, r1, [r1]
 80063ee:	f7f9 feb3 	bl	8000158 <__aeabi_dsub>
 80063f2:	4602      	mov	r2, r0
 80063f4:	460b      	mov	r3, r1
 80063f6:	4630      	mov	r0, r6
 80063f8:	4639      	mov	r1, r7
 80063fa:	f7f9 fead 	bl	8000158 <__aeabi_dsub>
 80063fe:	4642      	mov	r2, r8
 8006400:	4604      	mov	r4, r0
 8006402:	460d      	mov	r5, r1
 8006404:	465b      	mov	r3, fp
 8006406:	4640      	mov	r0, r8
 8006408:	4659      	mov	r1, fp
 800640a:	f7f9 fea7 	bl	800015c <__adddf3>
 800640e:	4602      	mov	r2, r0
 8006410:	460b      	mov	r3, r1
 8006412:	a10b      	add	r1, pc, #44	; (adr r1, 8006440 <__ieee754_asin+0x3f0>)
 8006414:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006418:	f7f9 fe9e 	bl	8000158 <__aeabi_dsub>
 800641c:	4602      	mov	r2, r0
 800641e:	460b      	mov	r3, r1
 8006420:	4620      	mov	r0, r4
 8006422:	4629      	mov	r1, r5
 8006424:	f7f9 fe98 	bl	8000158 <__aeabi_dsub>
 8006428:	4602      	mov	r2, r0
 800642a:	460b      	mov	r3, r1
 800642c:	a104      	add	r1, pc, #16	; (adr r1, 8006440 <__ieee754_asin+0x3f0>)
 800642e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006432:	e6e7      	b.n	8006204 <__ieee754_asin+0x1b4>
 8006434:	f3af 8000 	nop.w
 8006438:	33145c07 	.word	0x33145c07
 800643c:	3c91a626 	.word	0x3c91a626
 8006440:	54442d18 	.word	0x54442d18
 8006444:	3fe921fb 	.word	0x3fe921fb

08006448 <__ieee754_rem_pio2>:
 8006448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800644c:	4614      	mov	r4, r2
 800644e:	4ac4      	ldr	r2, [pc, #784]	; (8006760 <__ieee754_rem_pio2+0x318>)
 8006450:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 8006454:	b08d      	sub	sp, #52	; 0x34
 8006456:	4592      	cmp	sl, r2
 8006458:	9104      	str	r1, [sp, #16]
 800645a:	dc07      	bgt.n	800646c <__ieee754_rem_pio2+0x24>
 800645c:	2200      	movs	r2, #0
 800645e:	2300      	movs	r3, #0
 8006460:	e9c4 0100 	strd	r0, r1, [r4]
 8006464:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8006468:	2500      	movs	r5, #0
 800646a:	e024      	b.n	80064b6 <__ieee754_rem_pio2+0x6e>
 800646c:	4abd      	ldr	r2, [pc, #756]	; (8006764 <__ieee754_rem_pio2+0x31c>)
 800646e:	4592      	cmp	sl, r2
 8006470:	dc72      	bgt.n	8006558 <__ieee754_rem_pio2+0x110>
 8006472:	9b04      	ldr	r3, [sp, #16]
 8006474:	4dbc      	ldr	r5, [pc, #752]	; (8006768 <__ieee754_rem_pio2+0x320>)
 8006476:	2b00      	cmp	r3, #0
 8006478:	a3ab      	add	r3, pc, #684	; (adr r3, 8006728 <__ieee754_rem_pio2+0x2e0>)
 800647a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800647e:	dd36      	ble.n	80064ee <__ieee754_rem_pio2+0xa6>
 8006480:	f7f9 fe6a 	bl	8000158 <__aeabi_dsub>
 8006484:	45aa      	cmp	sl, r5
 8006486:	4606      	mov	r6, r0
 8006488:	460f      	mov	r7, r1
 800648a:	d018      	beq.n	80064be <__ieee754_rem_pio2+0x76>
 800648c:	a3a8      	add	r3, pc, #672	; (adr r3, 8006730 <__ieee754_rem_pio2+0x2e8>)
 800648e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006492:	f7f9 fe61 	bl	8000158 <__aeabi_dsub>
 8006496:	4602      	mov	r2, r0
 8006498:	460b      	mov	r3, r1
 800649a:	4630      	mov	r0, r6
 800649c:	e9c4 2300 	strd	r2, r3, [r4]
 80064a0:	4639      	mov	r1, r7
 80064a2:	f7f9 fe59 	bl	8000158 <__aeabi_dsub>
 80064a6:	a3a2      	add	r3, pc, #648	; (adr r3, 8006730 <__ieee754_rem_pio2+0x2e8>)
 80064a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064ac:	f7f9 fe54 	bl	8000158 <__aeabi_dsub>
 80064b0:	2501      	movs	r5, #1
 80064b2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80064b6:	4628      	mov	r0, r5
 80064b8:	b00d      	add	sp, #52	; 0x34
 80064ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064be:	a39e      	add	r3, pc, #632	; (adr r3, 8006738 <__ieee754_rem_pio2+0x2f0>)
 80064c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064c4:	f7f9 fe48 	bl	8000158 <__aeabi_dsub>
 80064c8:	a39d      	add	r3, pc, #628	; (adr r3, 8006740 <__ieee754_rem_pio2+0x2f8>)
 80064ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064ce:	4606      	mov	r6, r0
 80064d0:	460f      	mov	r7, r1
 80064d2:	f7f9 fe41 	bl	8000158 <__aeabi_dsub>
 80064d6:	4602      	mov	r2, r0
 80064d8:	460b      	mov	r3, r1
 80064da:	4630      	mov	r0, r6
 80064dc:	e9c4 2300 	strd	r2, r3, [r4]
 80064e0:	4639      	mov	r1, r7
 80064e2:	f7f9 fe39 	bl	8000158 <__aeabi_dsub>
 80064e6:	a396      	add	r3, pc, #600	; (adr r3, 8006740 <__ieee754_rem_pio2+0x2f8>)
 80064e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064ec:	e7de      	b.n	80064ac <__ieee754_rem_pio2+0x64>
 80064ee:	f7f9 fe35 	bl	800015c <__adddf3>
 80064f2:	45aa      	cmp	sl, r5
 80064f4:	4606      	mov	r6, r0
 80064f6:	460f      	mov	r7, r1
 80064f8:	d016      	beq.n	8006528 <__ieee754_rem_pio2+0xe0>
 80064fa:	a38d      	add	r3, pc, #564	; (adr r3, 8006730 <__ieee754_rem_pio2+0x2e8>)
 80064fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006500:	f7f9 fe2c 	bl	800015c <__adddf3>
 8006504:	4602      	mov	r2, r0
 8006506:	460b      	mov	r3, r1
 8006508:	4630      	mov	r0, r6
 800650a:	e9c4 2300 	strd	r2, r3, [r4]
 800650e:	4639      	mov	r1, r7
 8006510:	f7f9 fe22 	bl	8000158 <__aeabi_dsub>
 8006514:	a386      	add	r3, pc, #536	; (adr r3, 8006730 <__ieee754_rem_pio2+0x2e8>)
 8006516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800651a:	f7f9 fe1f 	bl	800015c <__adddf3>
 800651e:	f04f 35ff 	mov.w	r5, #4294967295
 8006522:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006526:	e7c6      	b.n	80064b6 <__ieee754_rem_pio2+0x6e>
 8006528:	a383      	add	r3, pc, #524	; (adr r3, 8006738 <__ieee754_rem_pio2+0x2f0>)
 800652a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800652e:	f7f9 fe15 	bl	800015c <__adddf3>
 8006532:	a383      	add	r3, pc, #524	; (adr r3, 8006740 <__ieee754_rem_pio2+0x2f8>)
 8006534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006538:	4606      	mov	r6, r0
 800653a:	460f      	mov	r7, r1
 800653c:	f7f9 fe0e 	bl	800015c <__adddf3>
 8006540:	4602      	mov	r2, r0
 8006542:	460b      	mov	r3, r1
 8006544:	4630      	mov	r0, r6
 8006546:	e9c4 2300 	strd	r2, r3, [r4]
 800654a:	4639      	mov	r1, r7
 800654c:	f7f9 fe04 	bl	8000158 <__aeabi_dsub>
 8006550:	a37b      	add	r3, pc, #492	; (adr r3, 8006740 <__ieee754_rem_pio2+0x2f8>)
 8006552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006556:	e7e0      	b.n	800651a <__ieee754_rem_pio2+0xd2>
 8006558:	4a84      	ldr	r2, [pc, #528]	; (800676c <__ieee754_rem_pio2+0x324>)
 800655a:	4592      	cmp	sl, r2
 800655c:	f300 80d5 	bgt.w	800670a <__ieee754_rem_pio2+0x2c2>
 8006560:	f000 fecc 	bl	80072fc <fabs>
 8006564:	a378      	add	r3, pc, #480	; (adr r3, 8006748 <__ieee754_rem_pio2+0x300>)
 8006566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800656a:	4606      	mov	r6, r0
 800656c:	460f      	mov	r7, r1
 800656e:	f7f9 ffab 	bl	80004c8 <__aeabi_dmul>
 8006572:	2200      	movs	r2, #0
 8006574:	4b7e      	ldr	r3, [pc, #504]	; (8006770 <__ieee754_rem_pio2+0x328>)
 8006576:	f7f9 fdf1 	bl	800015c <__adddf3>
 800657a:	f7fa fa55 	bl	8000a28 <__aeabi_d2iz>
 800657e:	4605      	mov	r5, r0
 8006580:	f7f9 ff38 	bl	80003f4 <__aeabi_i2d>
 8006584:	4602      	mov	r2, r0
 8006586:	460b      	mov	r3, r1
 8006588:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800658c:	a366      	add	r3, pc, #408	; (adr r3, 8006728 <__ieee754_rem_pio2+0x2e0>)
 800658e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006592:	f7f9 ff99 	bl	80004c8 <__aeabi_dmul>
 8006596:	4602      	mov	r2, r0
 8006598:	460b      	mov	r3, r1
 800659a:	4630      	mov	r0, r6
 800659c:	4639      	mov	r1, r7
 800659e:	f7f9 fddb 	bl	8000158 <__aeabi_dsub>
 80065a2:	a363      	add	r3, pc, #396	; (adr r3, 8006730 <__ieee754_rem_pio2+0x2e8>)
 80065a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065a8:	4680      	mov	r8, r0
 80065aa:	4689      	mov	r9, r1
 80065ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80065b0:	f7f9 ff8a 	bl	80004c8 <__aeabi_dmul>
 80065b4:	2d1f      	cmp	r5, #31
 80065b6:	4606      	mov	r6, r0
 80065b8:	460f      	mov	r7, r1
 80065ba:	dc0e      	bgt.n	80065da <__ieee754_rem_pio2+0x192>
 80065bc:	4b6d      	ldr	r3, [pc, #436]	; (8006774 <__ieee754_rem_pio2+0x32c>)
 80065be:	1e6a      	subs	r2, r5, #1
 80065c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065c4:	4553      	cmp	r3, sl
 80065c6:	d008      	beq.n	80065da <__ieee754_rem_pio2+0x192>
 80065c8:	4632      	mov	r2, r6
 80065ca:	463b      	mov	r3, r7
 80065cc:	4640      	mov	r0, r8
 80065ce:	4649      	mov	r1, r9
 80065d0:	f7f9 fdc2 	bl	8000158 <__aeabi_dsub>
 80065d4:	e9c4 0100 	strd	r0, r1, [r4]
 80065d8:	e013      	b.n	8006602 <__ieee754_rem_pio2+0x1ba>
 80065da:	463b      	mov	r3, r7
 80065dc:	4632      	mov	r2, r6
 80065de:	4640      	mov	r0, r8
 80065e0:	4649      	mov	r1, r9
 80065e2:	f7f9 fdb9 	bl	8000158 <__aeabi_dsub>
 80065e6:	ea4f 532a 	mov.w	r3, sl, asr #20
 80065ea:	9305      	str	r3, [sp, #20]
 80065ec:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80065f0:	ebc3 5a1a 	rsb	sl, r3, sl, lsr #20
 80065f4:	f1ba 0f10 	cmp.w	sl, #16
 80065f8:	dc1f      	bgt.n	800663a <__ieee754_rem_pio2+0x1f2>
 80065fa:	4602      	mov	r2, r0
 80065fc:	460b      	mov	r3, r1
 80065fe:	e9c4 2300 	strd	r2, r3, [r4]
 8006602:	e9d4 2a00 	ldrd	r2, sl, [r4]
 8006606:	4640      	mov	r0, r8
 8006608:	4653      	mov	r3, sl
 800660a:	4649      	mov	r1, r9
 800660c:	f7f9 fda4 	bl	8000158 <__aeabi_dsub>
 8006610:	4632      	mov	r2, r6
 8006612:	463b      	mov	r3, r7
 8006614:	f7f9 fda0 	bl	8000158 <__aeabi_dsub>
 8006618:	460b      	mov	r3, r1
 800661a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800661e:	9904      	ldr	r1, [sp, #16]
 8006620:	4602      	mov	r2, r0
 8006622:	2900      	cmp	r1, #0
 8006624:	f6bf af47 	bge.w	80064b6 <__ieee754_rem_pio2+0x6e>
 8006628:	f10a 4100 	add.w	r1, sl, #2147483648	; 0x80000000
 800662c:	e9c4 1201 	strd	r1, r2, [r4, #4]
 8006630:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006634:	60e3      	str	r3, [r4, #12]
 8006636:	426d      	negs	r5, r5
 8006638:	e73d      	b.n	80064b6 <__ieee754_rem_pio2+0x6e>
 800663a:	a33f      	add	r3, pc, #252	; (adr r3, 8006738 <__ieee754_rem_pio2+0x2f0>)
 800663c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006640:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006644:	f7f9 ff40 	bl	80004c8 <__aeabi_dmul>
 8006648:	4606      	mov	r6, r0
 800664a:	460f      	mov	r7, r1
 800664c:	4602      	mov	r2, r0
 800664e:	460b      	mov	r3, r1
 8006650:	4640      	mov	r0, r8
 8006652:	4649      	mov	r1, r9
 8006654:	f7f9 fd80 	bl	8000158 <__aeabi_dsub>
 8006658:	4602      	mov	r2, r0
 800665a:	460b      	mov	r3, r1
 800665c:	4682      	mov	sl, r0
 800665e:	468b      	mov	fp, r1
 8006660:	4640      	mov	r0, r8
 8006662:	4649      	mov	r1, r9
 8006664:	f7f9 fd78 	bl	8000158 <__aeabi_dsub>
 8006668:	4632      	mov	r2, r6
 800666a:	463b      	mov	r3, r7
 800666c:	f7f9 fd74 	bl	8000158 <__aeabi_dsub>
 8006670:	a333      	add	r3, pc, #204	; (adr r3, 8006740 <__ieee754_rem_pio2+0x2f8>)
 8006672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006676:	4606      	mov	r6, r0
 8006678:	460f      	mov	r7, r1
 800667a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800667e:	f7f9 ff23 	bl	80004c8 <__aeabi_dmul>
 8006682:	4632      	mov	r2, r6
 8006684:	463b      	mov	r3, r7
 8006686:	f7f9 fd67 	bl	8000158 <__aeabi_dsub>
 800668a:	4602      	mov	r2, r0
 800668c:	460b      	mov	r3, r1
 800668e:	4606      	mov	r6, r0
 8006690:	460f      	mov	r7, r1
 8006692:	4650      	mov	r0, sl
 8006694:	4659      	mov	r1, fp
 8006696:	f7f9 fd5f 	bl	8000158 <__aeabi_dsub>
 800669a:	9a05      	ldr	r2, [sp, #20]
 800669c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80066a0:	1ad3      	subs	r3, r2, r3
 80066a2:	2b31      	cmp	r3, #49	; 0x31
 80066a4:	dc06      	bgt.n	80066b4 <__ieee754_rem_pio2+0x26c>
 80066a6:	4602      	mov	r2, r0
 80066a8:	460b      	mov	r3, r1
 80066aa:	46d0      	mov	r8, sl
 80066ac:	46d9      	mov	r9, fp
 80066ae:	e9c4 2300 	strd	r2, r3, [r4]
 80066b2:	e7a6      	b.n	8006602 <__ieee754_rem_pio2+0x1ba>
 80066b4:	a326      	add	r3, pc, #152	; (adr r3, 8006750 <__ieee754_rem_pio2+0x308>)
 80066b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80066be:	f7f9 ff03 	bl	80004c8 <__aeabi_dmul>
 80066c2:	4606      	mov	r6, r0
 80066c4:	460f      	mov	r7, r1
 80066c6:	4602      	mov	r2, r0
 80066c8:	460b      	mov	r3, r1
 80066ca:	4650      	mov	r0, sl
 80066cc:	4659      	mov	r1, fp
 80066ce:	f7f9 fd43 	bl	8000158 <__aeabi_dsub>
 80066d2:	4602      	mov	r2, r0
 80066d4:	460b      	mov	r3, r1
 80066d6:	4680      	mov	r8, r0
 80066d8:	4689      	mov	r9, r1
 80066da:	4650      	mov	r0, sl
 80066dc:	4659      	mov	r1, fp
 80066de:	f7f9 fd3b 	bl	8000158 <__aeabi_dsub>
 80066e2:	4632      	mov	r2, r6
 80066e4:	463b      	mov	r3, r7
 80066e6:	f7f9 fd37 	bl	8000158 <__aeabi_dsub>
 80066ea:	a31b      	add	r3, pc, #108	; (adr r3, 8006758 <__ieee754_rem_pio2+0x310>)
 80066ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066f0:	4606      	mov	r6, r0
 80066f2:	460f      	mov	r7, r1
 80066f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80066f8:	f7f9 fee6 	bl	80004c8 <__aeabi_dmul>
 80066fc:	4632      	mov	r2, r6
 80066fe:	463b      	mov	r3, r7
 8006700:	f7f9 fd2a 	bl	8000158 <__aeabi_dsub>
 8006704:	4606      	mov	r6, r0
 8006706:	460f      	mov	r7, r1
 8006708:	e75e      	b.n	80065c8 <__ieee754_rem_pio2+0x180>
 800670a:	4a1b      	ldr	r2, [pc, #108]	; (8006778 <__ieee754_rem_pio2+0x330>)
 800670c:	4592      	cmp	sl, r2
 800670e:	dd35      	ble.n	800677c <__ieee754_rem_pio2+0x334>
 8006710:	4602      	mov	r2, r0
 8006712:	460b      	mov	r3, r1
 8006714:	f7f9 fd20 	bl	8000158 <__aeabi_dsub>
 8006718:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800671c:	e9c4 0100 	strd	r0, r1, [r4]
 8006720:	e6a2      	b.n	8006468 <__ieee754_rem_pio2+0x20>
 8006722:	bf00      	nop
 8006724:	f3af 8000 	nop.w
 8006728:	54400000 	.word	0x54400000
 800672c:	3ff921fb 	.word	0x3ff921fb
 8006730:	1a626331 	.word	0x1a626331
 8006734:	3dd0b461 	.word	0x3dd0b461
 8006738:	1a600000 	.word	0x1a600000
 800673c:	3dd0b461 	.word	0x3dd0b461
 8006740:	2e037073 	.word	0x2e037073
 8006744:	3ba3198a 	.word	0x3ba3198a
 8006748:	6dc9c883 	.word	0x6dc9c883
 800674c:	3fe45f30 	.word	0x3fe45f30
 8006750:	2e000000 	.word	0x2e000000
 8006754:	3ba3198a 	.word	0x3ba3198a
 8006758:	252049c1 	.word	0x252049c1
 800675c:	397b839a 	.word	0x397b839a
 8006760:	3fe921fb 	.word	0x3fe921fb
 8006764:	4002d97b 	.word	0x4002d97b
 8006768:	3ff921fb 	.word	0x3ff921fb
 800676c:	413921fb 	.word	0x413921fb
 8006770:	3fe00000 	.word	0x3fe00000
 8006774:	08007678 	.word	0x08007678
 8006778:	7fefffff 	.word	0x7fefffff
 800677c:	ea4f 552a 	mov.w	r5, sl, asr #20
 8006780:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8006784:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 8006788:	460f      	mov	r7, r1
 800678a:	4606      	mov	r6, r0
 800678c:	f7fa f94c 	bl	8000a28 <__aeabi_d2iz>
 8006790:	f7f9 fe30 	bl	80003f4 <__aeabi_i2d>
 8006794:	4602      	mov	r2, r0
 8006796:	460b      	mov	r3, r1
 8006798:	4630      	mov	r0, r6
 800679a:	4639      	mov	r1, r7
 800679c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80067a0:	f7f9 fcda 	bl	8000158 <__aeabi_dsub>
 80067a4:	2200      	movs	r2, #0
 80067a6:	4b1e      	ldr	r3, [pc, #120]	; (8006820 <__ieee754_rem_pio2+0x3d8>)
 80067a8:	f7f9 fe8e 	bl	80004c8 <__aeabi_dmul>
 80067ac:	460f      	mov	r7, r1
 80067ae:	4606      	mov	r6, r0
 80067b0:	f7fa f93a 	bl	8000a28 <__aeabi_d2iz>
 80067b4:	f7f9 fe1e 	bl	80003f4 <__aeabi_i2d>
 80067b8:	4602      	mov	r2, r0
 80067ba:	460b      	mov	r3, r1
 80067bc:	4630      	mov	r0, r6
 80067be:	4639      	mov	r1, r7
 80067c0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80067c4:	f7f9 fcc8 	bl	8000158 <__aeabi_dsub>
 80067c8:	2200      	movs	r2, #0
 80067ca:	4b15      	ldr	r3, [pc, #84]	; (8006820 <__ieee754_rem_pio2+0x3d8>)
 80067cc:	f7f9 fe7c 	bl	80004c8 <__aeabi_dmul>
 80067d0:	f04f 0803 	mov.w	r8, #3
 80067d4:	2600      	movs	r6, #0
 80067d6:	2700      	movs	r7, #0
 80067d8:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80067dc:	f10d 0928 	add.w	r9, sp, #40	; 0x28
 80067e0:	4632      	mov	r2, r6
 80067e2:	e879 0102 	ldrd	r0, r1, [r9], #-8
 80067e6:	463b      	mov	r3, r7
 80067e8:	46c2      	mov	sl, r8
 80067ea:	f108 38ff 	add.w	r8, r8, #4294967295
 80067ee:	f7fa f8d3 	bl	8000998 <__aeabi_dcmpeq>
 80067f2:	2800      	cmp	r0, #0
 80067f4:	d1f4      	bne.n	80067e0 <__ieee754_rem_pio2+0x398>
 80067f6:	4b0b      	ldr	r3, [pc, #44]	; (8006824 <__ieee754_rem_pio2+0x3dc>)
 80067f8:	462a      	mov	r2, r5
 80067fa:	9301      	str	r3, [sp, #4]
 80067fc:	2302      	movs	r3, #2
 80067fe:	4621      	mov	r1, r4
 8006800:	9300      	str	r3, [sp, #0]
 8006802:	a806      	add	r0, sp, #24
 8006804:	4653      	mov	r3, sl
 8006806:	f000 f979 	bl	8006afc <__kernel_rem_pio2>
 800680a:	9b04      	ldr	r3, [sp, #16]
 800680c:	4605      	mov	r5, r0
 800680e:	2b00      	cmp	r3, #0
 8006810:	f6bf ae51 	bge.w	80064b6 <__ieee754_rem_pio2+0x6e>
 8006814:	6863      	ldr	r3, [r4, #4]
 8006816:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800681a:	6063      	str	r3, [r4, #4]
 800681c:	68e3      	ldr	r3, [r4, #12]
 800681e:	e707      	b.n	8006630 <__ieee754_rem_pio2+0x1e8>
 8006820:	41700000 	.word	0x41700000
 8006824:	080076f8 	.word	0x080076f8

08006828 <__ieee754_sqrt>:
 8006828:	f8df c150 	ldr.w	ip, [pc, #336]	; 800697c <__ieee754_sqrt+0x154>
 800682c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006830:	ea3c 0c01 	bics.w	ip, ip, r1
 8006834:	460b      	mov	r3, r1
 8006836:	4606      	mov	r6, r0
 8006838:	460d      	mov	r5, r1
 800683a:	460a      	mov	r2, r1
 800683c:	4607      	mov	r7, r0
 800683e:	4604      	mov	r4, r0
 8006840:	d10e      	bne.n	8006860 <__ieee754_sqrt+0x38>
 8006842:	4602      	mov	r2, r0
 8006844:	f7f9 fe40 	bl	80004c8 <__aeabi_dmul>
 8006848:	4602      	mov	r2, r0
 800684a:	460b      	mov	r3, r1
 800684c:	4630      	mov	r0, r6
 800684e:	4629      	mov	r1, r5
 8006850:	f7f9 fc84 	bl	800015c <__adddf3>
 8006854:	4606      	mov	r6, r0
 8006856:	460d      	mov	r5, r1
 8006858:	4630      	mov	r0, r6
 800685a:	4629      	mov	r1, r5
 800685c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006860:	2900      	cmp	r1, #0
 8006862:	dc0d      	bgt.n	8006880 <__ieee754_sqrt+0x58>
 8006864:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8006868:	ea5c 0707 	orrs.w	r7, ip, r7
 800686c:	d0f4      	beq.n	8006858 <__ieee754_sqrt+0x30>
 800686e:	b139      	cbz	r1, 8006880 <__ieee754_sqrt+0x58>
 8006870:	4602      	mov	r2, r0
 8006872:	f7f9 fc71 	bl	8000158 <__aeabi_dsub>
 8006876:	4602      	mov	r2, r0
 8006878:	460b      	mov	r3, r1
 800687a:	f7f9 ff4f 	bl	800071c <__aeabi_ddiv>
 800687e:	e7e9      	b.n	8006854 <__ieee754_sqrt+0x2c>
 8006880:	1512      	asrs	r2, r2, #20
 8006882:	d074      	beq.n	800696e <__ieee754_sqrt+0x146>
 8006884:	2000      	movs	r0, #0
 8006886:	07d5      	lsls	r5, r2, #31
 8006888:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800688c:	f443 1180 	orr.w	r1, r3, #1048576	; 0x100000
 8006890:	bf5e      	ittt	pl
 8006892:	0fe3      	lsrpl	r3, r4, #31
 8006894:	0064      	lslpl	r4, r4, #1
 8006896:	eb03 0141 	addpl.w	r1, r3, r1, lsl #1
 800689a:	0fe3      	lsrs	r3, r4, #31
 800689c:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 80068a0:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 80068a4:	2516      	movs	r5, #22
 80068a6:	4601      	mov	r1, r0
 80068a8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80068ac:	1076      	asrs	r6, r6, #1
 80068ae:	0064      	lsls	r4, r4, #1
 80068b0:	188f      	adds	r7, r1, r2
 80068b2:	429f      	cmp	r7, r3
 80068b4:	bfde      	ittt	le
 80068b6:	1bdb      	suble	r3, r3, r7
 80068b8:	18b9      	addle	r1, r7, r2
 80068ba:	1880      	addle	r0, r0, r2
 80068bc:	005b      	lsls	r3, r3, #1
 80068be:	3d01      	subs	r5, #1
 80068c0:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 80068c4:	ea4f 0252 	mov.w	r2, r2, lsr #1
 80068c8:	ea4f 0444 	mov.w	r4, r4, lsl #1
 80068cc:	d1f0      	bne.n	80068b0 <__ieee754_sqrt+0x88>
 80068ce:	462a      	mov	r2, r5
 80068d0:	f04f 0e20 	mov.w	lr, #32
 80068d4:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 80068d8:	428b      	cmp	r3, r1
 80068da:	eb07 0c05 	add.w	ip, r7, r5
 80068de:	dc02      	bgt.n	80068e6 <__ieee754_sqrt+0xbe>
 80068e0:	d113      	bne.n	800690a <__ieee754_sqrt+0xe2>
 80068e2:	45a4      	cmp	ip, r4
 80068e4:	d811      	bhi.n	800690a <__ieee754_sqrt+0xe2>
 80068e6:	f1bc 0f00 	cmp.w	ip, #0
 80068ea:	eb0c 0507 	add.w	r5, ip, r7
 80068ee:	da43      	bge.n	8006978 <__ieee754_sqrt+0x150>
 80068f0:	2d00      	cmp	r5, #0
 80068f2:	db41      	blt.n	8006978 <__ieee754_sqrt+0x150>
 80068f4:	f101 0801 	add.w	r8, r1, #1
 80068f8:	1a5b      	subs	r3, r3, r1
 80068fa:	4641      	mov	r1, r8
 80068fc:	45a4      	cmp	ip, r4
 80068fe:	bf88      	it	hi
 8006900:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8006904:	eba4 040c 	sub.w	r4, r4, ip
 8006908:	443a      	add	r2, r7
 800690a:	005b      	lsls	r3, r3, #1
 800690c:	f1be 0e01 	subs.w	lr, lr, #1
 8006910:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8006914:	ea4f 0757 	mov.w	r7, r7, lsr #1
 8006918:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800691c:	d1dc      	bne.n	80068d8 <__ieee754_sqrt+0xb0>
 800691e:	4323      	orrs	r3, r4
 8006920:	d006      	beq.n	8006930 <__ieee754_sqrt+0x108>
 8006922:	1c54      	adds	r4, r2, #1
 8006924:	bf0b      	itete	eq
 8006926:	4672      	moveq	r2, lr
 8006928:	3201      	addne	r2, #1
 800692a:	3001      	addeq	r0, #1
 800692c:	f022 0201 	bicne.w	r2, r2, #1
 8006930:	1043      	asrs	r3, r0, #1
 8006932:	07c1      	lsls	r1, r0, #31
 8006934:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8006938:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800693c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8006940:	bf48      	it	mi
 8006942:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8006946:	4610      	mov	r0, r2
 8006948:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 800694c:	e782      	b.n	8006854 <__ieee754_sqrt+0x2c>
 800694e:	0ae3      	lsrs	r3, r4, #11
 8006950:	3915      	subs	r1, #21
 8006952:	0564      	lsls	r4, r4, #21
 8006954:	2b00      	cmp	r3, #0
 8006956:	d0fa      	beq.n	800694e <__ieee754_sqrt+0x126>
 8006958:	02de      	lsls	r6, r3, #11
 800695a:	d50a      	bpl.n	8006972 <__ieee754_sqrt+0x14a>
 800695c:	f1c2 0020 	rsb	r0, r2, #32
 8006960:	fa24 f000 	lsr.w	r0, r4, r0
 8006964:	1e55      	subs	r5, r2, #1
 8006966:	4094      	lsls	r4, r2
 8006968:	4303      	orrs	r3, r0
 800696a:	1b4a      	subs	r2, r1, r5
 800696c:	e78a      	b.n	8006884 <__ieee754_sqrt+0x5c>
 800696e:	4611      	mov	r1, r2
 8006970:	e7f0      	b.n	8006954 <__ieee754_sqrt+0x12c>
 8006972:	005b      	lsls	r3, r3, #1
 8006974:	3201      	adds	r2, #1
 8006976:	e7ef      	b.n	8006958 <__ieee754_sqrt+0x130>
 8006978:	4688      	mov	r8, r1
 800697a:	e7bd      	b.n	80068f8 <__ieee754_sqrt+0xd0>
 800697c:	7ff00000 	.word	0x7ff00000

08006980 <__kernel_cos>:
 8006980:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006984:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8006988:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 800698c:	4680      	mov	r8, r0
 800698e:	460f      	mov	r7, r1
 8006990:	e9cd 2300 	strd	r2, r3, [sp]
 8006994:	da04      	bge.n	80069a0 <__kernel_cos+0x20>
 8006996:	f7fa f847 	bl	8000a28 <__aeabi_d2iz>
 800699a:	2800      	cmp	r0, #0
 800699c:	f000 8086 	beq.w	8006aac <__kernel_cos+0x12c>
 80069a0:	4642      	mov	r2, r8
 80069a2:	463b      	mov	r3, r7
 80069a4:	4640      	mov	r0, r8
 80069a6:	4639      	mov	r1, r7
 80069a8:	f7f9 fd8e 	bl	80004c8 <__aeabi_dmul>
 80069ac:	2200      	movs	r2, #0
 80069ae:	4b4e      	ldr	r3, [pc, #312]	; (8006ae8 <__kernel_cos+0x168>)
 80069b0:	4604      	mov	r4, r0
 80069b2:	460d      	mov	r5, r1
 80069b4:	f7f9 fd88 	bl	80004c8 <__aeabi_dmul>
 80069b8:	a33f      	add	r3, pc, #252	; (adr r3, 8006ab8 <__kernel_cos+0x138>)
 80069ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069be:	4682      	mov	sl, r0
 80069c0:	468b      	mov	fp, r1
 80069c2:	4620      	mov	r0, r4
 80069c4:	4629      	mov	r1, r5
 80069c6:	f7f9 fd7f 	bl	80004c8 <__aeabi_dmul>
 80069ca:	a33d      	add	r3, pc, #244	; (adr r3, 8006ac0 <__kernel_cos+0x140>)
 80069cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069d0:	f7f9 fbc4 	bl	800015c <__adddf3>
 80069d4:	4622      	mov	r2, r4
 80069d6:	462b      	mov	r3, r5
 80069d8:	f7f9 fd76 	bl	80004c8 <__aeabi_dmul>
 80069dc:	a33a      	add	r3, pc, #232	; (adr r3, 8006ac8 <__kernel_cos+0x148>)
 80069de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069e2:	f7f9 fbb9 	bl	8000158 <__aeabi_dsub>
 80069e6:	4622      	mov	r2, r4
 80069e8:	462b      	mov	r3, r5
 80069ea:	f7f9 fd6d 	bl	80004c8 <__aeabi_dmul>
 80069ee:	a338      	add	r3, pc, #224	; (adr r3, 8006ad0 <__kernel_cos+0x150>)
 80069f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069f4:	f7f9 fbb2 	bl	800015c <__adddf3>
 80069f8:	4622      	mov	r2, r4
 80069fa:	462b      	mov	r3, r5
 80069fc:	f7f9 fd64 	bl	80004c8 <__aeabi_dmul>
 8006a00:	a335      	add	r3, pc, #212	; (adr r3, 8006ad8 <__kernel_cos+0x158>)
 8006a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a06:	f7f9 fba7 	bl	8000158 <__aeabi_dsub>
 8006a0a:	4622      	mov	r2, r4
 8006a0c:	462b      	mov	r3, r5
 8006a0e:	f7f9 fd5b 	bl	80004c8 <__aeabi_dmul>
 8006a12:	a333      	add	r3, pc, #204	; (adr r3, 8006ae0 <__kernel_cos+0x160>)
 8006a14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a18:	f7f9 fba0 	bl	800015c <__adddf3>
 8006a1c:	4622      	mov	r2, r4
 8006a1e:	462b      	mov	r3, r5
 8006a20:	f7f9 fd52 	bl	80004c8 <__aeabi_dmul>
 8006a24:	4622      	mov	r2, r4
 8006a26:	462b      	mov	r3, r5
 8006a28:	f7f9 fd4e 	bl	80004c8 <__aeabi_dmul>
 8006a2c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006a30:	4604      	mov	r4, r0
 8006a32:	460d      	mov	r5, r1
 8006a34:	4640      	mov	r0, r8
 8006a36:	4639      	mov	r1, r7
 8006a38:	f7f9 fd46 	bl	80004c8 <__aeabi_dmul>
 8006a3c:	460b      	mov	r3, r1
 8006a3e:	4602      	mov	r2, r0
 8006a40:	4629      	mov	r1, r5
 8006a42:	4620      	mov	r0, r4
 8006a44:	f7f9 fb88 	bl	8000158 <__aeabi_dsub>
 8006a48:	4b28      	ldr	r3, [pc, #160]	; (8006aec <__kernel_cos+0x16c>)
 8006a4a:	4680      	mov	r8, r0
 8006a4c:	429e      	cmp	r6, r3
 8006a4e:	4689      	mov	r9, r1
 8006a50:	dc0e      	bgt.n	8006a70 <__kernel_cos+0xf0>
 8006a52:	4602      	mov	r2, r0
 8006a54:	460b      	mov	r3, r1
 8006a56:	4650      	mov	r0, sl
 8006a58:	4659      	mov	r1, fp
 8006a5a:	f7f9 fb7d 	bl	8000158 <__aeabi_dsub>
 8006a5e:	4602      	mov	r2, r0
 8006a60:	2000      	movs	r0, #0
 8006a62:	460b      	mov	r3, r1
 8006a64:	4922      	ldr	r1, [pc, #136]	; (8006af0 <__kernel_cos+0x170>)
 8006a66:	f7f9 fb77 	bl	8000158 <__aeabi_dsub>
 8006a6a:	b003      	add	sp, #12
 8006a6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a70:	2400      	movs	r4, #0
 8006a72:	4b20      	ldr	r3, [pc, #128]	; (8006af4 <__kernel_cos+0x174>)
 8006a74:	4622      	mov	r2, r4
 8006a76:	429e      	cmp	r6, r3
 8006a78:	bfcc      	ite	gt
 8006a7a:	4d1f      	ldrgt	r5, [pc, #124]	; (8006af8 <__kernel_cos+0x178>)
 8006a7c:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8006a80:	462b      	mov	r3, r5
 8006a82:	2000      	movs	r0, #0
 8006a84:	491a      	ldr	r1, [pc, #104]	; (8006af0 <__kernel_cos+0x170>)
 8006a86:	f7f9 fb67 	bl	8000158 <__aeabi_dsub>
 8006a8a:	4622      	mov	r2, r4
 8006a8c:	4606      	mov	r6, r0
 8006a8e:	460f      	mov	r7, r1
 8006a90:	462b      	mov	r3, r5
 8006a92:	4650      	mov	r0, sl
 8006a94:	4659      	mov	r1, fp
 8006a96:	f7f9 fb5f 	bl	8000158 <__aeabi_dsub>
 8006a9a:	4642      	mov	r2, r8
 8006a9c:	464b      	mov	r3, r9
 8006a9e:	f7f9 fb5b 	bl	8000158 <__aeabi_dsub>
 8006aa2:	4602      	mov	r2, r0
 8006aa4:	460b      	mov	r3, r1
 8006aa6:	4630      	mov	r0, r6
 8006aa8:	4639      	mov	r1, r7
 8006aaa:	e7dc      	b.n	8006a66 <__kernel_cos+0xe6>
 8006aac:	2000      	movs	r0, #0
 8006aae:	4910      	ldr	r1, [pc, #64]	; (8006af0 <__kernel_cos+0x170>)
 8006ab0:	e7db      	b.n	8006a6a <__kernel_cos+0xea>
 8006ab2:	bf00      	nop
 8006ab4:	f3af 8000 	nop.w
 8006ab8:	be8838d4 	.word	0xbe8838d4
 8006abc:	bda8fae9 	.word	0xbda8fae9
 8006ac0:	bdb4b1c4 	.word	0xbdb4b1c4
 8006ac4:	3e21ee9e 	.word	0x3e21ee9e
 8006ac8:	809c52ad 	.word	0x809c52ad
 8006acc:	3e927e4f 	.word	0x3e927e4f
 8006ad0:	19cb1590 	.word	0x19cb1590
 8006ad4:	3efa01a0 	.word	0x3efa01a0
 8006ad8:	16c15177 	.word	0x16c15177
 8006adc:	3f56c16c 	.word	0x3f56c16c
 8006ae0:	5555554c 	.word	0x5555554c
 8006ae4:	3fa55555 	.word	0x3fa55555
 8006ae8:	3fe00000 	.word	0x3fe00000
 8006aec:	3fd33332 	.word	0x3fd33332
 8006af0:	3ff00000 	.word	0x3ff00000
 8006af4:	3fe90000 	.word	0x3fe90000
 8006af8:	3fd20000 	.word	0x3fd20000

08006afc <__kernel_rem_pio2>:
 8006afc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b00:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8006b04:	9308      	str	r3, [sp, #32]
 8006b06:	9101      	str	r1, [sp, #4]
 8006b08:	4bc0      	ldr	r3, [pc, #768]	; (8006e0c <__kernel_rem_pio2+0x310>)
 8006b0a:	99a2      	ldr	r1, [sp, #648]	; 0x288
 8006b0c:	f112 0f14 	cmn.w	r2, #20
 8006b10:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006b14:	bfa8      	it	ge
 8006b16:	1ed4      	subge	r4, r2, #3
 8006b18:	9304      	str	r3, [sp, #16]
 8006b1a:	9b08      	ldr	r3, [sp, #32]
 8006b1c:	bfb8      	it	lt
 8006b1e:	2400      	movlt	r4, #0
 8006b20:	f103 33ff 	add.w	r3, r3, #4294967295
 8006b24:	9306      	str	r3, [sp, #24]
 8006b26:	bfa4      	itt	ge
 8006b28:	2318      	movge	r3, #24
 8006b2a:	fb94 f4f3 	sdivge	r4, r4, r3
 8006b2e:	f06f 0317 	mvn.w	r3, #23
 8006b32:	fb04 3303 	mla	r3, r4, r3, r3
 8006b36:	eb03 0a02 	add.w	sl, r3, r2
 8006b3a:	9a06      	ldr	r2, [sp, #24]
 8006b3c:	9b04      	ldr	r3, [sp, #16]
 8006b3e:	1aa7      	subs	r7, r4, r2
 8006b40:	eb03 0802 	add.w	r8, r3, r2
 8006b44:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8006b46:	2500      	movs	r5, #0
 8006b48:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	2300      	movs	r3, #0
 8006b50:	9009      	str	r0, [sp, #36]	; 0x24
 8006b52:	ae20      	add	r6, sp, #128	; 0x80
 8006b54:	4545      	cmp	r5, r8
 8006b56:	dd19      	ble.n	8006b8c <__kernel_rem_pio2+0x90>
 8006b58:	9b08      	ldr	r3, [sp, #32]
 8006b5a:	aa20      	add	r2, sp, #128	; 0x80
 8006b5c:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8006b60:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8006b64:	f1c3 0301 	rsb	r3, r3, #1
 8006b68:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8006b6c:	9307      	str	r3, [sp, #28]
 8006b6e:	9b07      	ldr	r3, [sp, #28]
 8006b70:	9a04      	ldr	r2, [sp, #16]
 8006b72:	4443      	add	r3, r8
 8006b74:	429a      	cmp	r2, r3
 8006b76:	db35      	blt.n	8006be4 <__kernel_rem_pio2+0xe8>
 8006b78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	f1a3 0908 	sub.w	r9, r3, #8
 8006b80:	2300      	movs	r3, #0
 8006b82:	462f      	mov	r7, r5
 8006b84:	2600      	movs	r6, #0
 8006b86:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006b8a:	e01f      	b.n	8006bcc <__kernel_rem_pio2+0xd0>
 8006b8c:	42ef      	cmn	r7, r5
 8006b8e:	d40b      	bmi.n	8006ba8 <__kernel_rem_pio2+0xac>
 8006b90:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8006b94:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006b98:	f7f9 fc2c 	bl	80003f4 <__aeabi_i2d>
 8006b9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006ba0:	e8e6 0102 	strd	r0, r1, [r6], #8
 8006ba4:	3501      	adds	r5, #1
 8006ba6:	e7d5      	b.n	8006b54 <__kernel_rem_pio2+0x58>
 8006ba8:	4610      	mov	r0, r2
 8006baa:	4619      	mov	r1, r3
 8006bac:	e7f8      	b.n	8006ba0 <__kernel_rem_pio2+0xa4>
 8006bae:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006bb2:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 8006bb6:	f7f9 fc87 	bl	80004c8 <__aeabi_dmul>
 8006bba:	4602      	mov	r2, r0
 8006bbc:	460b      	mov	r3, r1
 8006bbe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006bc2:	f7f9 facb 	bl	800015c <__adddf3>
 8006bc6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006bca:	3601      	adds	r6, #1
 8006bcc:	9b06      	ldr	r3, [sp, #24]
 8006bce:	3f08      	subs	r7, #8
 8006bd0:	429e      	cmp	r6, r3
 8006bd2:	ddec      	ble.n	8006bae <__kernel_rem_pio2+0xb2>
 8006bd4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006bd8:	3508      	adds	r5, #8
 8006bda:	e8eb 2302 	strd	r2, r3, [fp], #8
 8006bde:	f108 0801 	add.w	r8, r8, #1
 8006be2:	e7c4      	b.n	8006b6e <__kernel_rem_pio2+0x72>
 8006be4:	9b04      	ldr	r3, [sp, #16]
 8006be6:	aa0c      	add	r2, sp, #48	; 0x30
 8006be8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006bec:	930b      	str	r3, [sp, #44]	; 0x2c
 8006bee:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8006bf0:	9f04      	ldr	r7, [sp, #16]
 8006bf2:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8006bf6:	930a      	str	r3, [sp, #40]	; 0x28
 8006bf8:	463e      	mov	r6, r7
 8006bfa:	ab98      	add	r3, sp, #608	; 0x260
 8006bfc:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 8006c00:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006c04:	f8cd b008 	str.w	fp, [sp, #8]
 8006c08:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 8006c0c:	2e00      	cmp	r6, #0
 8006c0e:	dc71      	bgt.n	8006cf4 <__kernel_rem_pio2+0x1f8>
 8006c10:	4652      	mov	r2, sl
 8006c12:	4620      	mov	r0, r4
 8006c14:	4629      	mov	r1, r5
 8006c16:	f000 fbff 	bl	8007418 <scalbn>
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8006c20:	4604      	mov	r4, r0
 8006c22:	460d      	mov	r5, r1
 8006c24:	f7f9 fc50 	bl	80004c8 <__aeabi_dmul>
 8006c28:	f000 fb6e 	bl	8007308 <floor>
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	4b78      	ldr	r3, [pc, #480]	; (8006e10 <__kernel_rem_pio2+0x314>)
 8006c30:	f7f9 fc4a 	bl	80004c8 <__aeabi_dmul>
 8006c34:	4602      	mov	r2, r0
 8006c36:	460b      	mov	r3, r1
 8006c38:	4620      	mov	r0, r4
 8006c3a:	4629      	mov	r1, r5
 8006c3c:	f7f9 fa8c 	bl	8000158 <__aeabi_dsub>
 8006c40:	460d      	mov	r5, r1
 8006c42:	4604      	mov	r4, r0
 8006c44:	f7f9 fef0 	bl	8000a28 <__aeabi_d2iz>
 8006c48:	9007      	str	r0, [sp, #28]
 8006c4a:	f7f9 fbd3 	bl	80003f4 <__aeabi_i2d>
 8006c4e:	4602      	mov	r2, r0
 8006c50:	460b      	mov	r3, r1
 8006c52:	4620      	mov	r0, r4
 8006c54:	4629      	mov	r1, r5
 8006c56:	f7f9 fa7f 	bl	8000158 <__aeabi_dsub>
 8006c5a:	f1ba 0f00 	cmp.w	sl, #0
 8006c5e:	4680      	mov	r8, r0
 8006c60:	4689      	mov	r9, r1
 8006c62:	dd70      	ble.n	8006d46 <__kernel_rem_pio2+0x24a>
 8006c64:	1e7a      	subs	r2, r7, #1
 8006c66:	ab0c      	add	r3, sp, #48	; 0x30
 8006c68:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8006c6c:	9c07      	ldr	r4, [sp, #28]
 8006c6e:	f1ca 0118 	rsb	r1, sl, #24
 8006c72:	fa40 f301 	asr.w	r3, r0, r1
 8006c76:	441c      	add	r4, r3
 8006c78:	408b      	lsls	r3, r1
 8006c7a:	1ac0      	subs	r0, r0, r3
 8006c7c:	ab0c      	add	r3, sp, #48	; 0x30
 8006c7e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8006c82:	f1ca 0317 	rsb	r3, sl, #23
 8006c86:	9407      	str	r4, [sp, #28]
 8006c88:	fa40 f303 	asr.w	r3, r0, r3
 8006c8c:	9302      	str	r3, [sp, #8]
 8006c8e:	9b02      	ldr	r3, [sp, #8]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	dd66      	ble.n	8006d62 <__kernel_rem_pio2+0x266>
 8006c94:	2200      	movs	r2, #0
 8006c96:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8006c9a:	4614      	mov	r4, r2
 8006c9c:	9b07      	ldr	r3, [sp, #28]
 8006c9e:	3301      	adds	r3, #1
 8006ca0:	9307      	str	r3, [sp, #28]
 8006ca2:	4297      	cmp	r7, r2
 8006ca4:	f300 809f 	bgt.w	8006de6 <__kernel_rem_pio2+0x2ea>
 8006ca8:	f1ba 0f00 	cmp.w	sl, #0
 8006cac:	dd07      	ble.n	8006cbe <__kernel_rem_pio2+0x1c2>
 8006cae:	f1ba 0f01 	cmp.w	sl, #1
 8006cb2:	f000 80b9 	beq.w	8006e28 <__kernel_rem_pio2+0x32c>
 8006cb6:	f1ba 0f02 	cmp.w	sl, #2
 8006cba:	f000 80bf 	beq.w	8006e3c <__kernel_rem_pio2+0x340>
 8006cbe:	9b02      	ldr	r3, [sp, #8]
 8006cc0:	2b02      	cmp	r3, #2
 8006cc2:	d14e      	bne.n	8006d62 <__kernel_rem_pio2+0x266>
 8006cc4:	4642      	mov	r2, r8
 8006cc6:	464b      	mov	r3, r9
 8006cc8:	2000      	movs	r0, #0
 8006cca:	4952      	ldr	r1, [pc, #328]	; (8006e14 <__kernel_rem_pio2+0x318>)
 8006ccc:	f7f9 fa44 	bl	8000158 <__aeabi_dsub>
 8006cd0:	4680      	mov	r8, r0
 8006cd2:	4689      	mov	r9, r1
 8006cd4:	2c00      	cmp	r4, #0
 8006cd6:	d044      	beq.n	8006d62 <__kernel_rem_pio2+0x266>
 8006cd8:	4652      	mov	r2, sl
 8006cda:	2000      	movs	r0, #0
 8006cdc:	494d      	ldr	r1, [pc, #308]	; (8006e14 <__kernel_rem_pio2+0x318>)
 8006cde:	f000 fb9b 	bl	8007418 <scalbn>
 8006ce2:	4602      	mov	r2, r0
 8006ce4:	460b      	mov	r3, r1
 8006ce6:	4640      	mov	r0, r8
 8006ce8:	4649      	mov	r1, r9
 8006cea:	f7f9 fa35 	bl	8000158 <__aeabi_dsub>
 8006cee:	4680      	mov	r8, r0
 8006cf0:	4689      	mov	r9, r1
 8006cf2:	e036      	b.n	8006d62 <__kernel_rem_pio2+0x266>
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	4b48      	ldr	r3, [pc, #288]	; (8006e18 <__kernel_rem_pio2+0x31c>)
 8006cf8:	4620      	mov	r0, r4
 8006cfa:	4629      	mov	r1, r5
 8006cfc:	f7f9 fbe4 	bl	80004c8 <__aeabi_dmul>
 8006d00:	f7f9 fe92 	bl	8000a28 <__aeabi_d2iz>
 8006d04:	f7f9 fb76 	bl	80003f4 <__aeabi_i2d>
 8006d08:	2200      	movs	r2, #0
 8006d0a:	4b44      	ldr	r3, [pc, #272]	; (8006e1c <__kernel_rem_pio2+0x320>)
 8006d0c:	4680      	mov	r8, r0
 8006d0e:	4689      	mov	r9, r1
 8006d10:	f7f9 fbda 	bl	80004c8 <__aeabi_dmul>
 8006d14:	4602      	mov	r2, r0
 8006d16:	460b      	mov	r3, r1
 8006d18:	4620      	mov	r0, r4
 8006d1a:	4629      	mov	r1, r5
 8006d1c:	f7f9 fa1c 	bl	8000158 <__aeabi_dsub>
 8006d20:	f7f9 fe82 	bl	8000a28 <__aeabi_d2iz>
 8006d24:	9b02      	ldr	r3, [sp, #8]
 8006d26:	3e01      	subs	r6, #1
 8006d28:	f843 0b04 	str.w	r0, [r3], #4
 8006d2c:	9302      	str	r3, [sp, #8]
 8006d2e:	ab70      	add	r3, sp, #448	; 0x1c0
 8006d30:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006d34:	4640      	mov	r0, r8
 8006d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d3a:	4649      	mov	r1, r9
 8006d3c:	f7f9 fa0e 	bl	800015c <__adddf3>
 8006d40:	4604      	mov	r4, r0
 8006d42:	460d      	mov	r5, r1
 8006d44:	e762      	b.n	8006c0c <__kernel_rem_pio2+0x110>
 8006d46:	d105      	bne.n	8006d54 <__kernel_rem_pio2+0x258>
 8006d48:	1e7b      	subs	r3, r7, #1
 8006d4a:	aa0c      	add	r2, sp, #48	; 0x30
 8006d4c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8006d50:	15c3      	asrs	r3, r0, #23
 8006d52:	e79b      	b.n	8006c8c <__kernel_rem_pio2+0x190>
 8006d54:	2200      	movs	r2, #0
 8006d56:	4b32      	ldr	r3, [pc, #200]	; (8006e20 <__kernel_rem_pio2+0x324>)
 8006d58:	f7f9 fe3c 	bl	80009d4 <__aeabi_dcmpge>
 8006d5c:	2800      	cmp	r0, #0
 8006d5e:	d13f      	bne.n	8006de0 <__kernel_rem_pio2+0x2e4>
 8006d60:	9002      	str	r0, [sp, #8]
 8006d62:	2200      	movs	r2, #0
 8006d64:	2300      	movs	r3, #0
 8006d66:	4640      	mov	r0, r8
 8006d68:	4649      	mov	r1, r9
 8006d6a:	f7f9 fe15 	bl	8000998 <__aeabi_dcmpeq>
 8006d6e:	2800      	cmp	r0, #0
 8006d70:	f000 80b5 	beq.w	8006ede <__kernel_rem_pio2+0x3e2>
 8006d74:	1e7c      	subs	r4, r7, #1
 8006d76:	4623      	mov	r3, r4
 8006d78:	2200      	movs	r2, #0
 8006d7a:	9904      	ldr	r1, [sp, #16]
 8006d7c:	428b      	cmp	r3, r1
 8006d7e:	da64      	bge.n	8006e4a <__kernel_rem_pio2+0x34e>
 8006d80:	2a00      	cmp	r2, #0
 8006d82:	d078      	beq.n	8006e76 <__kernel_rem_pio2+0x37a>
 8006d84:	ab0c      	add	r3, sp, #48	; 0x30
 8006d86:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8006d8a:	f1aa 0a18 	sub.w	sl, sl, #24
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	f000 80a3 	beq.w	8006eda <__kernel_rem_pio2+0x3de>
 8006d94:	4652      	mov	r2, sl
 8006d96:	2000      	movs	r0, #0
 8006d98:	491e      	ldr	r1, [pc, #120]	; (8006e14 <__kernel_rem_pio2+0x318>)
 8006d9a:	f000 fb3d 	bl	8007418 <scalbn>
 8006d9e:	46a2      	mov	sl, r4
 8006da0:	4606      	mov	r6, r0
 8006da2:	460f      	mov	r7, r1
 8006da4:	f04f 0800 	mov.w	r8, #0
 8006da8:	00e3      	lsls	r3, r4, #3
 8006daa:	9306      	str	r3, [sp, #24]
 8006dac:	f8df 9068 	ldr.w	r9, [pc, #104]	; 8006e18 <__kernel_rem_pio2+0x31c>
 8006db0:	ab70      	add	r3, sp, #448	; 0x1c0
 8006db2:	eb03 0bc4 	add.w	fp, r3, r4, lsl #3
 8006db6:	f1ba 0f00 	cmp.w	sl, #0
 8006dba:	f280 80c6 	bge.w	8006f4a <__kernel_rem_pio2+0x44e>
 8006dbe:	4627      	mov	r7, r4
 8006dc0:	f04f 0800 	mov.w	r8, #0
 8006dc4:	2f00      	cmp	r7, #0
 8006dc6:	f2c0 80f3 	blt.w	8006fb0 <__kernel_rem_pio2+0x4b4>
 8006dca:	4b16      	ldr	r3, [pc, #88]	; (8006e24 <__kernel_rem_pio2+0x328>)
 8006dcc:	f04f 0a00 	mov.w	sl, #0
 8006dd0:	461d      	mov	r5, r3
 8006dd2:	ab70      	add	r3, sp, #448	; 0x1c0
 8006dd4:	f04f 0b00 	mov.w	fp, #0
 8006dd8:	2600      	movs	r6, #0
 8006dda:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 8006dde:	e0d9      	b.n	8006f94 <__kernel_rem_pio2+0x498>
 8006de0:	2302      	movs	r3, #2
 8006de2:	9302      	str	r3, [sp, #8]
 8006de4:	e756      	b.n	8006c94 <__kernel_rem_pio2+0x198>
 8006de6:	f8db 3000 	ldr.w	r3, [fp]
 8006dea:	b954      	cbnz	r4, 8006e02 <__kernel_rem_pio2+0x306>
 8006dec:	b123      	cbz	r3, 8006df8 <__kernel_rem_pio2+0x2fc>
 8006dee:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8006df2:	f8cb 3000 	str.w	r3, [fp]
 8006df6:	2301      	movs	r3, #1
 8006df8:	461c      	mov	r4, r3
 8006dfa:	3201      	adds	r2, #1
 8006dfc:	f10b 0b04 	add.w	fp, fp, #4
 8006e00:	e74f      	b.n	8006ca2 <__kernel_rem_pio2+0x1a6>
 8006e02:	1acb      	subs	r3, r1, r3
 8006e04:	f8cb 3000 	str.w	r3, [fp]
 8006e08:	4623      	mov	r3, r4
 8006e0a:	e7f5      	b.n	8006df8 <__kernel_rem_pio2+0x2fc>
 8006e0c:	08007840 	.word	0x08007840
 8006e10:	40200000 	.word	0x40200000
 8006e14:	3ff00000 	.word	0x3ff00000
 8006e18:	3e700000 	.word	0x3e700000
 8006e1c:	41700000 	.word	0x41700000
 8006e20:	3fe00000 	.word	0x3fe00000
 8006e24:	08007800 	.word	0x08007800
 8006e28:	1e7a      	subs	r2, r7, #1
 8006e2a:	ab0c      	add	r3, sp, #48	; 0x30
 8006e2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e30:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8006e34:	a90c      	add	r1, sp, #48	; 0x30
 8006e36:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8006e3a:	e740      	b.n	8006cbe <__kernel_rem_pio2+0x1c2>
 8006e3c:	1e7a      	subs	r2, r7, #1
 8006e3e:	ab0c      	add	r3, sp, #48	; 0x30
 8006e40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e44:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8006e48:	e7f4      	b.n	8006e34 <__kernel_rem_pio2+0x338>
 8006e4a:	a90c      	add	r1, sp, #48	; 0x30
 8006e4c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8006e50:	3b01      	subs	r3, #1
 8006e52:	430a      	orrs	r2, r1
 8006e54:	e791      	b.n	8006d7a <__kernel_rem_pio2+0x27e>
 8006e56:	3401      	adds	r4, #1
 8006e58:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8006e5c:	2a00      	cmp	r2, #0
 8006e5e:	d0fa      	beq.n	8006e56 <__kernel_rem_pio2+0x35a>
 8006e60:	9b08      	ldr	r3, [sp, #32]
 8006e62:	1c7e      	adds	r6, r7, #1
 8006e64:	18fd      	adds	r5, r7, r3
 8006e66:	ab20      	add	r3, sp, #128	; 0x80
 8006e68:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8006e6c:	443c      	add	r4, r7
 8006e6e:	42b4      	cmp	r4, r6
 8006e70:	da04      	bge.n	8006e7c <__kernel_rem_pio2+0x380>
 8006e72:	4627      	mov	r7, r4
 8006e74:	e6c0      	b.n	8006bf8 <__kernel_rem_pio2+0xfc>
 8006e76:	2401      	movs	r4, #1
 8006e78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006e7a:	e7ed      	b.n	8006e58 <__kernel_rem_pio2+0x35c>
 8006e7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e7e:	462f      	mov	r7, r5
 8006e80:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8006e84:	f7f9 fab6 	bl	80003f4 <__aeabi_i2d>
 8006e88:	f04f 0b00 	mov.w	fp, #0
 8006e8c:	f04f 0800 	mov.w	r8, #0
 8006e90:	f04f 0900 	mov.w	r9, #0
 8006e94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e96:	e8e7 0102 	strd	r0, r1, [r7], #8
 8006e9a:	3b08      	subs	r3, #8
 8006e9c:	9302      	str	r3, [sp, #8]
 8006e9e:	9b06      	ldr	r3, [sp, #24]
 8006ea0:	459b      	cmp	fp, r3
 8006ea2:	dd07      	ble.n	8006eb4 <__kernel_rem_pio2+0x3b8>
 8006ea4:	ab70      	add	r3, sp, #448	; 0x1c0
 8006ea6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006eaa:	463d      	mov	r5, r7
 8006eac:	e9c3 8900 	strd	r8, r9, [r3]
 8006eb0:	3601      	adds	r6, #1
 8006eb2:	e7dc      	b.n	8006e6e <__kernel_rem_pio2+0x372>
 8006eb4:	9902      	ldr	r1, [sp, #8]
 8006eb6:	f10b 0b01 	add.w	fp, fp, #1
 8006eba:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 8006ebe:	9102      	str	r1, [sp, #8]
 8006ec0:	e875 0102 	ldrd	r0, r1, [r5], #-8
 8006ec4:	f7f9 fb00 	bl	80004c8 <__aeabi_dmul>
 8006ec8:	4602      	mov	r2, r0
 8006eca:	460b      	mov	r3, r1
 8006ecc:	4640      	mov	r0, r8
 8006ece:	4649      	mov	r1, r9
 8006ed0:	f7f9 f944 	bl	800015c <__adddf3>
 8006ed4:	4680      	mov	r8, r0
 8006ed6:	4689      	mov	r9, r1
 8006ed8:	e7e1      	b.n	8006e9e <__kernel_rem_pio2+0x3a2>
 8006eda:	3c01      	subs	r4, #1
 8006edc:	e752      	b.n	8006d84 <__kernel_rem_pio2+0x288>
 8006ede:	f1ca 0200 	rsb	r2, sl, #0
 8006ee2:	4640      	mov	r0, r8
 8006ee4:	4649      	mov	r1, r9
 8006ee6:	f000 fa97 	bl	8007418 <scalbn>
 8006eea:	2200      	movs	r2, #0
 8006eec:	4ba5      	ldr	r3, [pc, #660]	; (8007184 <__kernel_rem_pio2+0x688>)
 8006eee:	4604      	mov	r4, r0
 8006ef0:	460d      	mov	r5, r1
 8006ef2:	f7f9 fd6f 	bl	80009d4 <__aeabi_dcmpge>
 8006ef6:	b1f8      	cbz	r0, 8006f38 <__kernel_rem_pio2+0x43c>
 8006ef8:	2200      	movs	r2, #0
 8006efa:	4ba3      	ldr	r3, [pc, #652]	; (8007188 <__kernel_rem_pio2+0x68c>)
 8006efc:	4620      	mov	r0, r4
 8006efe:	4629      	mov	r1, r5
 8006f00:	f7f9 fae2 	bl	80004c8 <__aeabi_dmul>
 8006f04:	f7f9 fd90 	bl	8000a28 <__aeabi_d2iz>
 8006f08:	4606      	mov	r6, r0
 8006f0a:	f7f9 fa73 	bl	80003f4 <__aeabi_i2d>
 8006f0e:	2200      	movs	r2, #0
 8006f10:	4b9c      	ldr	r3, [pc, #624]	; (8007184 <__kernel_rem_pio2+0x688>)
 8006f12:	f7f9 fad9 	bl	80004c8 <__aeabi_dmul>
 8006f16:	460b      	mov	r3, r1
 8006f18:	4602      	mov	r2, r0
 8006f1a:	4629      	mov	r1, r5
 8006f1c:	4620      	mov	r0, r4
 8006f1e:	f7f9 f91b 	bl	8000158 <__aeabi_dsub>
 8006f22:	f7f9 fd81 	bl	8000a28 <__aeabi_d2iz>
 8006f26:	1c7c      	adds	r4, r7, #1
 8006f28:	ab0c      	add	r3, sp, #48	; 0x30
 8006f2a:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 8006f2e:	f10a 0a18 	add.w	sl, sl, #24
 8006f32:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
 8006f36:	e72d      	b.n	8006d94 <__kernel_rem_pio2+0x298>
 8006f38:	4620      	mov	r0, r4
 8006f3a:	4629      	mov	r1, r5
 8006f3c:	f7f9 fd74 	bl	8000a28 <__aeabi_d2iz>
 8006f40:	ab0c      	add	r3, sp, #48	; 0x30
 8006f42:	463c      	mov	r4, r7
 8006f44:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 8006f48:	e724      	b.n	8006d94 <__kernel_rem_pio2+0x298>
 8006f4a:	ab0c      	add	r3, sp, #48	; 0x30
 8006f4c:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8006f50:	f7f9 fa50 	bl	80003f4 <__aeabi_i2d>
 8006f54:	4632      	mov	r2, r6
 8006f56:	463b      	mov	r3, r7
 8006f58:	f7f9 fab6 	bl	80004c8 <__aeabi_dmul>
 8006f5c:	4642      	mov	r2, r8
 8006f5e:	e86b 0102 	strd	r0, r1, [fp], #-8
 8006f62:	464b      	mov	r3, r9
 8006f64:	4630      	mov	r0, r6
 8006f66:	4639      	mov	r1, r7
 8006f68:	f7f9 faae 	bl	80004c8 <__aeabi_dmul>
 8006f6c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006f70:	4606      	mov	r6, r0
 8006f72:	460f      	mov	r7, r1
 8006f74:	e71f      	b.n	8006db6 <__kernel_rem_pio2+0x2ba>
 8006f76:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8006f7a:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8006f7e:	f7f9 faa3 	bl	80004c8 <__aeabi_dmul>
 8006f82:	4602      	mov	r2, r0
 8006f84:	460b      	mov	r3, r1
 8006f86:	4650      	mov	r0, sl
 8006f88:	4659      	mov	r1, fp
 8006f8a:	f7f9 f8e7 	bl	800015c <__adddf3>
 8006f8e:	4682      	mov	sl, r0
 8006f90:	468b      	mov	fp, r1
 8006f92:	3601      	adds	r6, #1
 8006f94:	9b04      	ldr	r3, [sp, #16]
 8006f96:	429e      	cmp	r6, r3
 8006f98:	dc01      	bgt.n	8006f9e <__kernel_rem_pio2+0x4a2>
 8006f9a:	45b0      	cmp	r8, r6
 8006f9c:	daeb      	bge.n	8006f76 <__kernel_rem_pio2+0x47a>
 8006f9e:	ab48      	add	r3, sp, #288	; 0x120
 8006fa0:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8006fa4:	e9c3 ab00 	strd	sl, fp, [r3]
 8006fa8:	3f01      	subs	r7, #1
 8006faa:	f108 0801 	add.w	r8, r8, #1
 8006fae:	e709      	b.n	8006dc4 <__kernel_rem_pio2+0x2c8>
 8006fb0:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 8006fb2:	2b02      	cmp	r3, #2
 8006fb4:	dc09      	bgt.n	8006fca <__kernel_rem_pio2+0x4ce>
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	dc34      	bgt.n	8007024 <__kernel_rem_pio2+0x528>
 8006fba:	d05e      	beq.n	800707a <__kernel_rem_pio2+0x57e>
 8006fbc:	9b07      	ldr	r3, [sp, #28]
 8006fbe:	f003 0007 	and.w	r0, r3, #7
 8006fc2:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8006fc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fca:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 8006fcc:	2b03      	cmp	r3, #3
 8006fce:	d1f5      	bne.n	8006fbc <__kernel_rem_pio2+0x4c0>
 8006fd0:	9a06      	ldr	r2, [sp, #24]
 8006fd2:	ab48      	add	r3, sp, #288	; 0x120
 8006fd4:	441a      	add	r2, r3
 8006fd6:	4615      	mov	r5, r2
 8006fd8:	4692      	mov	sl, r2
 8006fda:	46a3      	mov	fp, r4
 8006fdc:	f1bb 0f00 	cmp.w	fp, #0
 8006fe0:	dc7a      	bgt.n	80070d8 <__kernel_rem_pio2+0x5dc>
 8006fe2:	46aa      	mov	sl, r5
 8006fe4:	46a3      	mov	fp, r4
 8006fe6:	f1bb 0f01 	cmp.w	fp, #1
 8006fea:	f300 8094 	bgt.w	8007116 <__kernel_rem_pio2+0x61a>
 8006fee:	2700      	movs	r7, #0
 8006ff0:	463e      	mov	r6, r7
 8006ff2:	2c01      	cmp	r4, #1
 8006ff4:	f300 80ae 	bgt.w	8007154 <__kernel_rem_pio2+0x658>
 8006ff8:	e9dd 5048 	ldrd	r5, r0, [sp, #288]	; 0x120
 8006ffc:	e9dd 414a 	ldrd	r4, r1, [sp, #296]	; 0x128
 8007000:	9b02      	ldr	r3, [sp, #8]
 8007002:	2b00      	cmp	r3, #0
 8007004:	f040 80b0 	bne.w	8007168 <__kernel_rem_pio2+0x66c>
 8007008:	4603      	mov	r3, r0
 800700a:	462a      	mov	r2, r5
 800700c:	9801      	ldr	r0, [sp, #4]
 800700e:	e9c0 2300 	strd	r2, r3, [r0]
 8007012:	4622      	mov	r2, r4
 8007014:	460b      	mov	r3, r1
 8007016:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800701a:	463a      	mov	r2, r7
 800701c:	4633      	mov	r3, r6
 800701e:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8007022:	e7cb      	b.n	8006fbc <__kernel_rem_pio2+0x4c0>
 8007024:	2000      	movs	r0, #0
 8007026:	9a06      	ldr	r2, [sp, #24]
 8007028:	ab48      	add	r3, sp, #288	; 0x120
 800702a:	441a      	add	r2, r3
 800702c:	4615      	mov	r5, r2
 800702e:	46a0      	mov	r8, r4
 8007030:	4601      	mov	r1, r0
 8007032:	f1b8 0f00 	cmp.w	r8, #0
 8007036:	da3c      	bge.n	80070b2 <__kernel_rem_pio2+0x5b6>
 8007038:	9b02      	ldr	r3, [sp, #8]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d040      	beq.n	80070c0 <__kernel_rem_pio2+0x5c4>
 800703e:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 8007042:	4602      	mov	r2, r0
 8007044:	462b      	mov	r3, r5
 8007046:	9d01      	ldr	r5, [sp, #4]
 8007048:	2601      	movs	r6, #1
 800704a:	e9c5 2300 	strd	r2, r3, [r5]
 800704e:	460b      	mov	r3, r1
 8007050:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8007054:	f7f9 f880 	bl	8000158 <__aeabi_dsub>
 8007058:	4684      	mov	ip, r0
 800705a:	460f      	mov	r7, r1
 800705c:	ad48      	add	r5, sp, #288	; 0x120
 800705e:	42b4      	cmp	r4, r6
 8007060:	f105 0508 	add.w	r5, r5, #8
 8007064:	da2e      	bge.n	80070c4 <__kernel_rem_pio2+0x5c8>
 8007066:	9b02      	ldr	r3, [sp, #8]
 8007068:	b10b      	cbz	r3, 800706e <__kernel_rem_pio2+0x572>
 800706a:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800706e:	4662      	mov	r2, ip
 8007070:	463b      	mov	r3, r7
 8007072:	9901      	ldr	r1, [sp, #4]
 8007074:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8007078:	e7a0      	b.n	8006fbc <__kernel_rem_pio2+0x4c0>
 800707a:	9a06      	ldr	r2, [sp, #24]
 800707c:	9ea2      	ldr	r6, [sp, #648]	; 0x288
 800707e:	ab48      	add	r3, sp, #288	; 0x120
 8007080:	441a      	add	r2, r3
 8007082:	4615      	mov	r5, r2
 8007084:	4637      	mov	r7, r6
 8007086:	2c00      	cmp	r4, #0
 8007088:	da09      	bge.n	800709e <__kernel_rem_pio2+0x5a2>
 800708a:	9b02      	ldr	r3, [sp, #8]
 800708c:	b10b      	cbz	r3, 8007092 <__kernel_rem_pio2+0x596>
 800708e:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 8007092:	4632      	mov	r2, r6
 8007094:	463b      	mov	r3, r7
 8007096:	9901      	ldr	r1, [sp, #4]
 8007098:	e9c1 2300 	strd	r2, r3, [r1]
 800709c:	e78e      	b.n	8006fbc <__kernel_rem_pio2+0x4c0>
 800709e:	4630      	mov	r0, r6
 80070a0:	e875 2302 	ldrd	r2, r3, [r5], #-8
 80070a4:	4639      	mov	r1, r7
 80070a6:	f7f9 f859 	bl	800015c <__adddf3>
 80070aa:	3c01      	subs	r4, #1
 80070ac:	4606      	mov	r6, r0
 80070ae:	460f      	mov	r7, r1
 80070b0:	e7e9      	b.n	8007086 <__kernel_rem_pio2+0x58a>
 80070b2:	e875 2302 	ldrd	r2, r3, [r5], #-8
 80070b6:	f7f9 f851 	bl	800015c <__adddf3>
 80070ba:	f108 38ff 	add.w	r8, r8, #4294967295
 80070be:	e7b8      	b.n	8007032 <__kernel_rem_pio2+0x536>
 80070c0:	460d      	mov	r5, r1
 80070c2:	e7be      	b.n	8007042 <__kernel_rem_pio2+0x546>
 80070c4:	4660      	mov	r0, ip
 80070c6:	e9d5 2300 	ldrd	r2, r3, [r5]
 80070ca:	4639      	mov	r1, r7
 80070cc:	f7f9 f846 	bl	800015c <__adddf3>
 80070d0:	3601      	adds	r6, #1
 80070d2:	4684      	mov	ip, r0
 80070d4:	460f      	mov	r7, r1
 80070d6:	e7c2      	b.n	800705e <__kernel_rem_pio2+0x562>
 80070d8:	e9da 6700 	ldrd	r6, r7, [sl]
 80070dc:	e95a 8902 	ldrd	r8, r9, [sl, #-8]
 80070e0:	4632      	mov	r2, r6
 80070e2:	463b      	mov	r3, r7
 80070e4:	4640      	mov	r0, r8
 80070e6:	4649      	mov	r1, r9
 80070e8:	f7f9 f838 	bl	800015c <__adddf3>
 80070ec:	4602      	mov	r2, r0
 80070ee:	460b      	mov	r3, r1
 80070f0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80070f4:	4640      	mov	r0, r8
 80070f6:	4649      	mov	r1, r9
 80070f8:	f7f9 f82e 	bl	8000158 <__aeabi_dsub>
 80070fc:	4632      	mov	r2, r6
 80070fe:	463b      	mov	r3, r7
 8007100:	f7f9 f82c 	bl	800015c <__adddf3>
 8007104:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007108:	e86a 0102 	strd	r0, r1, [sl], #-8
 800710c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007110:	e9ca 2300 	strd	r2, r3, [sl]
 8007114:	e762      	b.n	8006fdc <__kernel_rem_pio2+0x4e0>
 8007116:	e9da 8900 	ldrd	r8, r9, [sl]
 800711a:	e95a 6702 	ldrd	r6, r7, [sl, #-8]
 800711e:	4642      	mov	r2, r8
 8007120:	464b      	mov	r3, r9
 8007122:	4630      	mov	r0, r6
 8007124:	4639      	mov	r1, r7
 8007126:	f7f9 f819 	bl	800015c <__adddf3>
 800712a:	4602      	mov	r2, r0
 800712c:	460b      	mov	r3, r1
 800712e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007132:	4630      	mov	r0, r6
 8007134:	4639      	mov	r1, r7
 8007136:	f7f9 f80f 	bl	8000158 <__aeabi_dsub>
 800713a:	4642      	mov	r2, r8
 800713c:	464b      	mov	r3, r9
 800713e:	f7f9 f80d 	bl	800015c <__adddf3>
 8007142:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007146:	e86a 0102 	strd	r0, r1, [sl], #-8
 800714a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800714e:	e9ca 2300 	strd	r2, r3, [sl]
 8007152:	e748      	b.n	8006fe6 <__kernel_rem_pio2+0x4ea>
 8007154:	4638      	mov	r0, r7
 8007156:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800715a:	4631      	mov	r1, r6
 800715c:	f7f8 fffe 	bl	800015c <__adddf3>
 8007160:	3c01      	subs	r4, #1
 8007162:	4607      	mov	r7, r0
 8007164:	460e      	mov	r6, r1
 8007166:	e744      	b.n	8006ff2 <__kernel_rem_pio2+0x4f6>
 8007168:	9b01      	ldr	r3, [sp, #4]
 800716a:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800716e:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8007172:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 8007176:	e9c3 0401 	strd	r0, r4, [r3, #4]
 800717a:	e9c3 1703 	strd	r1, r7, [r3, #12]
 800717e:	601d      	str	r5, [r3, #0]
 8007180:	615e      	str	r6, [r3, #20]
 8007182:	e71b      	b.n	8006fbc <__kernel_rem_pio2+0x4c0>
 8007184:	41700000 	.word	0x41700000
 8007188:	3e700000 	.word	0x3e700000
 800718c:	00000000 	.word	0x00000000

08007190 <__kernel_sin>:
 8007190:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007194:	b086      	sub	sp, #24
 8007196:	e9cd 2300 	strd	r2, r3, [sp]
 800719a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800719e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80071a2:	4682      	mov	sl, r0
 80071a4:	460c      	mov	r4, r1
 80071a6:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80071a8:	da03      	bge.n	80071b2 <__kernel_sin+0x22>
 80071aa:	f7f9 fc3d 	bl	8000a28 <__aeabi_d2iz>
 80071ae:	2800      	cmp	r0, #0
 80071b0:	d050      	beq.n	8007254 <__kernel_sin+0xc4>
 80071b2:	4652      	mov	r2, sl
 80071b4:	4623      	mov	r3, r4
 80071b6:	4650      	mov	r0, sl
 80071b8:	4621      	mov	r1, r4
 80071ba:	f7f9 f985 	bl	80004c8 <__aeabi_dmul>
 80071be:	4606      	mov	r6, r0
 80071c0:	460f      	mov	r7, r1
 80071c2:	4602      	mov	r2, r0
 80071c4:	460b      	mov	r3, r1
 80071c6:	4650      	mov	r0, sl
 80071c8:	4621      	mov	r1, r4
 80071ca:	f7f9 f97d 	bl	80004c8 <__aeabi_dmul>
 80071ce:	a33e      	add	r3, pc, #248	; (adr r3, 80072c8 <__kernel_sin+0x138>)
 80071d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071d4:	4680      	mov	r8, r0
 80071d6:	4689      	mov	r9, r1
 80071d8:	4630      	mov	r0, r6
 80071da:	4639      	mov	r1, r7
 80071dc:	f7f9 f974 	bl	80004c8 <__aeabi_dmul>
 80071e0:	a33b      	add	r3, pc, #236	; (adr r3, 80072d0 <__kernel_sin+0x140>)
 80071e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071e6:	f7f8 ffb7 	bl	8000158 <__aeabi_dsub>
 80071ea:	4632      	mov	r2, r6
 80071ec:	463b      	mov	r3, r7
 80071ee:	f7f9 f96b 	bl	80004c8 <__aeabi_dmul>
 80071f2:	a339      	add	r3, pc, #228	; (adr r3, 80072d8 <__kernel_sin+0x148>)
 80071f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071f8:	f7f8 ffb0 	bl	800015c <__adddf3>
 80071fc:	4632      	mov	r2, r6
 80071fe:	463b      	mov	r3, r7
 8007200:	f7f9 f962 	bl	80004c8 <__aeabi_dmul>
 8007204:	a336      	add	r3, pc, #216	; (adr r3, 80072e0 <__kernel_sin+0x150>)
 8007206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800720a:	f7f8 ffa5 	bl	8000158 <__aeabi_dsub>
 800720e:	4632      	mov	r2, r6
 8007210:	463b      	mov	r3, r7
 8007212:	f7f9 f959 	bl	80004c8 <__aeabi_dmul>
 8007216:	a334      	add	r3, pc, #208	; (adr r3, 80072e8 <__kernel_sin+0x158>)
 8007218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800721c:	f7f8 ff9e 	bl	800015c <__adddf3>
 8007220:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007224:	b9dd      	cbnz	r5, 800725e <__kernel_sin+0xce>
 8007226:	4602      	mov	r2, r0
 8007228:	460b      	mov	r3, r1
 800722a:	4630      	mov	r0, r6
 800722c:	4639      	mov	r1, r7
 800722e:	f7f9 f94b 	bl	80004c8 <__aeabi_dmul>
 8007232:	a32f      	add	r3, pc, #188	; (adr r3, 80072f0 <__kernel_sin+0x160>)
 8007234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007238:	f7f8 ff8e 	bl	8000158 <__aeabi_dsub>
 800723c:	4642      	mov	r2, r8
 800723e:	464b      	mov	r3, r9
 8007240:	f7f9 f942 	bl	80004c8 <__aeabi_dmul>
 8007244:	4602      	mov	r2, r0
 8007246:	460b      	mov	r3, r1
 8007248:	4650      	mov	r0, sl
 800724a:	4621      	mov	r1, r4
 800724c:	f7f8 ff86 	bl	800015c <__adddf3>
 8007250:	4682      	mov	sl, r0
 8007252:	460c      	mov	r4, r1
 8007254:	4650      	mov	r0, sl
 8007256:	4621      	mov	r1, r4
 8007258:	b006      	add	sp, #24
 800725a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800725e:	2200      	movs	r2, #0
 8007260:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007264:	4b24      	ldr	r3, [pc, #144]	; (80072f8 <__kernel_sin+0x168>)
 8007266:	f7f9 f92f 	bl	80004c8 <__aeabi_dmul>
 800726a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800726e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007272:	4640      	mov	r0, r8
 8007274:	4649      	mov	r1, r9
 8007276:	f7f9 f927 	bl	80004c8 <__aeabi_dmul>
 800727a:	4602      	mov	r2, r0
 800727c:	460b      	mov	r3, r1
 800727e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007282:	f7f8 ff69 	bl	8000158 <__aeabi_dsub>
 8007286:	4632      	mov	r2, r6
 8007288:	463b      	mov	r3, r7
 800728a:	f7f9 f91d 	bl	80004c8 <__aeabi_dmul>
 800728e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007292:	f7f8 ff61 	bl	8000158 <__aeabi_dsub>
 8007296:	a316      	add	r3, pc, #88	; (adr r3, 80072f0 <__kernel_sin+0x160>)
 8007298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800729c:	4606      	mov	r6, r0
 800729e:	460f      	mov	r7, r1
 80072a0:	4640      	mov	r0, r8
 80072a2:	4649      	mov	r1, r9
 80072a4:	f7f9 f910 	bl	80004c8 <__aeabi_dmul>
 80072a8:	4602      	mov	r2, r0
 80072aa:	460b      	mov	r3, r1
 80072ac:	4630      	mov	r0, r6
 80072ae:	4639      	mov	r1, r7
 80072b0:	f7f8 ff54 	bl	800015c <__adddf3>
 80072b4:	4602      	mov	r2, r0
 80072b6:	460b      	mov	r3, r1
 80072b8:	4650      	mov	r0, sl
 80072ba:	4621      	mov	r1, r4
 80072bc:	f7f8 ff4c 	bl	8000158 <__aeabi_dsub>
 80072c0:	e7c6      	b.n	8007250 <__kernel_sin+0xc0>
 80072c2:	bf00      	nop
 80072c4:	f3af 8000 	nop.w
 80072c8:	5acfd57c 	.word	0x5acfd57c
 80072cc:	3de5d93a 	.word	0x3de5d93a
 80072d0:	8a2b9ceb 	.word	0x8a2b9ceb
 80072d4:	3e5ae5e6 	.word	0x3e5ae5e6
 80072d8:	57b1fe7d 	.word	0x57b1fe7d
 80072dc:	3ec71de3 	.word	0x3ec71de3
 80072e0:	19c161d5 	.word	0x19c161d5
 80072e4:	3f2a01a0 	.word	0x3f2a01a0
 80072e8:	1110f8a6 	.word	0x1110f8a6
 80072ec:	3f811111 	.word	0x3f811111
 80072f0:	55555549 	.word	0x55555549
 80072f4:	3fc55555 	.word	0x3fc55555
 80072f8:	3fe00000 	.word	0x3fe00000

080072fc <fabs>:
 80072fc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8007300:	4770      	bx	lr
 8007302:	0000      	movs	r0, r0
 8007304:	0000      	movs	r0, r0
	...

08007308 <floor>:
 8007308:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800730c:	f3c1 580a 	ubfx	r8, r1, #20, #11
 8007310:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 8007314:	2e13      	cmp	r6, #19
 8007316:	4602      	mov	r2, r0
 8007318:	460b      	mov	r3, r1
 800731a:	4607      	mov	r7, r0
 800731c:	460c      	mov	r4, r1
 800731e:	4605      	mov	r5, r0
 8007320:	dc34      	bgt.n	800738c <floor+0x84>
 8007322:	2e00      	cmp	r6, #0
 8007324:	da15      	bge.n	8007352 <floor+0x4a>
 8007326:	a334      	add	r3, pc, #208	; (adr r3, 80073f8 <floor+0xf0>)
 8007328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800732c:	f7f8 ff16 	bl	800015c <__adddf3>
 8007330:	2200      	movs	r2, #0
 8007332:	2300      	movs	r3, #0
 8007334:	f7f9 fb58 	bl	80009e8 <__aeabi_dcmpgt>
 8007338:	b140      	cbz	r0, 800734c <floor+0x44>
 800733a:	2c00      	cmp	r4, #0
 800733c:	da59      	bge.n	80073f2 <floor+0xea>
 800733e:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8007342:	ea57 0503 	orrs.w	r5, r7, r3
 8007346:	d001      	beq.n	800734c <floor+0x44>
 8007348:	2500      	movs	r5, #0
 800734a:	4c2d      	ldr	r4, [pc, #180]	; (8007400 <floor+0xf8>)
 800734c:	4623      	mov	r3, r4
 800734e:	462f      	mov	r7, r5
 8007350:	e025      	b.n	800739e <floor+0x96>
 8007352:	4a2c      	ldr	r2, [pc, #176]	; (8007404 <floor+0xfc>)
 8007354:	fa42 f806 	asr.w	r8, r2, r6
 8007358:	ea01 0208 	and.w	r2, r1, r8
 800735c:	4302      	orrs	r2, r0
 800735e:	d01e      	beq.n	800739e <floor+0x96>
 8007360:	a325      	add	r3, pc, #148	; (adr r3, 80073f8 <floor+0xf0>)
 8007362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007366:	f7f8 fef9 	bl	800015c <__adddf3>
 800736a:	2200      	movs	r2, #0
 800736c:	2300      	movs	r3, #0
 800736e:	f7f9 fb3b 	bl	80009e8 <__aeabi_dcmpgt>
 8007372:	2800      	cmp	r0, #0
 8007374:	d0ea      	beq.n	800734c <floor+0x44>
 8007376:	2c00      	cmp	r4, #0
 8007378:	bfbe      	ittt	lt
 800737a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800737e:	fa43 f606 	asrlt.w	r6, r3, r6
 8007382:	19a4      	addlt	r4, r4, r6
 8007384:	2500      	movs	r5, #0
 8007386:	ea24 0408 	bic.w	r4, r4, r8
 800738a:	e7df      	b.n	800734c <floor+0x44>
 800738c:	2e33      	cmp	r6, #51	; 0x33
 800738e:	dd0a      	ble.n	80073a6 <floor+0x9e>
 8007390:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8007394:	d103      	bne.n	800739e <floor+0x96>
 8007396:	f7f8 fee1 	bl	800015c <__adddf3>
 800739a:	4607      	mov	r7, r0
 800739c:	460b      	mov	r3, r1
 800739e:	4638      	mov	r0, r7
 80073a0:	4619      	mov	r1, r3
 80073a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80073a6:	f04f 32ff 	mov.w	r2, #4294967295
 80073aa:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 80073ae:	fa22 f808 	lsr.w	r8, r2, r8
 80073b2:	ea18 0f00 	tst.w	r8, r0
 80073b6:	d0f2      	beq.n	800739e <floor+0x96>
 80073b8:	a30f      	add	r3, pc, #60	; (adr r3, 80073f8 <floor+0xf0>)
 80073ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073be:	f7f8 fecd 	bl	800015c <__adddf3>
 80073c2:	2200      	movs	r2, #0
 80073c4:	2300      	movs	r3, #0
 80073c6:	f7f9 fb0f 	bl	80009e8 <__aeabi_dcmpgt>
 80073ca:	2800      	cmp	r0, #0
 80073cc:	d0be      	beq.n	800734c <floor+0x44>
 80073ce:	2c00      	cmp	r4, #0
 80073d0:	da02      	bge.n	80073d8 <floor+0xd0>
 80073d2:	2e14      	cmp	r6, #20
 80073d4:	d103      	bne.n	80073de <floor+0xd6>
 80073d6:	3401      	adds	r4, #1
 80073d8:	ea25 0508 	bic.w	r5, r5, r8
 80073dc:	e7b6      	b.n	800734c <floor+0x44>
 80073de:	2301      	movs	r3, #1
 80073e0:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80073e4:	fa03 f606 	lsl.w	r6, r3, r6
 80073e8:	4435      	add	r5, r6
 80073ea:	42bd      	cmp	r5, r7
 80073ec:	bf38      	it	cc
 80073ee:	18e4      	addcc	r4, r4, r3
 80073f0:	e7f2      	b.n	80073d8 <floor+0xd0>
 80073f2:	2500      	movs	r5, #0
 80073f4:	462c      	mov	r4, r5
 80073f6:	e7a9      	b.n	800734c <floor+0x44>
 80073f8:	8800759c 	.word	0x8800759c
 80073fc:	7e37e43c 	.word	0x7e37e43c
 8007400:	bff00000 	.word	0xbff00000
 8007404:	000fffff 	.word	0x000fffff

08007408 <nan>:
 8007408:	2000      	movs	r0, #0
 800740a:	4901      	ldr	r1, [pc, #4]	; (8007410 <nan+0x8>)
 800740c:	4770      	bx	lr
 800740e:	bf00      	nop
 8007410:	7ff80000 	.word	0x7ff80000
 8007414:	00000000 	.word	0x00000000

08007418 <scalbn>:
 8007418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800741a:	f3c1 560a 	ubfx	r6, r1, #20, #11
 800741e:	4604      	mov	r4, r0
 8007420:	460d      	mov	r5, r1
 8007422:	4617      	mov	r7, r2
 8007424:	460b      	mov	r3, r1
 8007426:	b996      	cbnz	r6, 800744e <scalbn+0x36>
 8007428:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800742c:	4303      	orrs	r3, r0
 800742e:	d039      	beq.n	80074a4 <scalbn+0x8c>
 8007430:	4b35      	ldr	r3, [pc, #212]	; (8007508 <scalbn+0xf0>)
 8007432:	2200      	movs	r2, #0
 8007434:	f7f9 f848 	bl	80004c8 <__aeabi_dmul>
 8007438:	4b34      	ldr	r3, [pc, #208]	; (800750c <scalbn+0xf4>)
 800743a:	4604      	mov	r4, r0
 800743c:	429f      	cmp	r7, r3
 800743e:	460d      	mov	r5, r1
 8007440:	da0f      	bge.n	8007462 <scalbn+0x4a>
 8007442:	a32d      	add	r3, pc, #180	; (adr r3, 80074f8 <scalbn+0xe0>)
 8007444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007448:	f7f9 f83e 	bl	80004c8 <__aeabi_dmul>
 800744c:	e006      	b.n	800745c <scalbn+0x44>
 800744e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8007452:	4296      	cmp	r6, r2
 8007454:	d10a      	bne.n	800746c <scalbn+0x54>
 8007456:	4602      	mov	r2, r0
 8007458:	f7f8 fe80 	bl	800015c <__adddf3>
 800745c:	4604      	mov	r4, r0
 800745e:	460d      	mov	r5, r1
 8007460:	e020      	b.n	80074a4 <scalbn+0x8c>
 8007462:	460b      	mov	r3, r1
 8007464:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8007468:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 800746c:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8007470:	19b9      	adds	r1, r7, r6
 8007472:	4291      	cmp	r1, r2
 8007474:	dd0e      	ble.n	8007494 <scalbn+0x7c>
 8007476:	a322      	add	r3, pc, #136	; (adr r3, 8007500 <scalbn+0xe8>)
 8007478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800747c:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8007480:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 8007484:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 8007488:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 800748c:	4820      	ldr	r0, [pc, #128]	; (8007510 <scalbn+0xf8>)
 800748e:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 8007492:	e7d9      	b.n	8007448 <scalbn+0x30>
 8007494:	2900      	cmp	r1, #0
 8007496:	dd08      	ble.n	80074aa <scalbn+0x92>
 8007498:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800749c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80074a0:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 80074a4:	4620      	mov	r0, r4
 80074a6:	4629      	mov	r1, r5
 80074a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80074aa:	f111 0f35 	cmn.w	r1, #53	; 0x35
 80074ae:	da16      	bge.n	80074de <scalbn+0xc6>
 80074b0:	f24c 3350 	movw	r3, #50000	; 0xc350
 80074b4:	429f      	cmp	r7, r3
 80074b6:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 80074ba:	dd08      	ble.n	80074ce <scalbn+0xb6>
 80074bc:	4c15      	ldr	r4, [pc, #84]	; (8007514 <scalbn+0xfc>)
 80074be:	4814      	ldr	r0, [pc, #80]	; (8007510 <scalbn+0xf8>)
 80074c0:	f363 74df 	bfi	r4, r3, #31, #1
 80074c4:	a30e      	add	r3, pc, #56	; (adr r3, 8007500 <scalbn+0xe8>)
 80074c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074ca:	4621      	mov	r1, r4
 80074cc:	e7bc      	b.n	8007448 <scalbn+0x30>
 80074ce:	4c12      	ldr	r4, [pc, #72]	; (8007518 <scalbn+0x100>)
 80074d0:	4812      	ldr	r0, [pc, #72]	; (800751c <scalbn+0x104>)
 80074d2:	f363 74df 	bfi	r4, r3, #31, #1
 80074d6:	a308      	add	r3, pc, #32	; (adr r3, 80074f8 <scalbn+0xe0>)
 80074d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074dc:	e7f5      	b.n	80074ca <scalbn+0xb2>
 80074de:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80074e2:	3136      	adds	r1, #54	; 0x36
 80074e4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80074e8:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 80074ec:	4620      	mov	r0, r4
 80074ee:	4629      	mov	r1, r5
 80074f0:	2200      	movs	r2, #0
 80074f2:	4b0b      	ldr	r3, [pc, #44]	; (8007520 <scalbn+0x108>)
 80074f4:	e7a8      	b.n	8007448 <scalbn+0x30>
 80074f6:	bf00      	nop
 80074f8:	c2f8f359 	.word	0xc2f8f359
 80074fc:	01a56e1f 	.word	0x01a56e1f
 8007500:	8800759c 	.word	0x8800759c
 8007504:	7e37e43c 	.word	0x7e37e43c
 8007508:	43500000 	.word	0x43500000
 800750c:	ffff3cb0 	.word	0xffff3cb0
 8007510:	8800759c 	.word	0x8800759c
 8007514:	7e37e43c 	.word	0x7e37e43c
 8007518:	01a56e1f 	.word	0x01a56e1f
 800751c:	c2f8f359 	.word	0xc2f8f359
 8007520:	3c900000 	.word	0x3c900000

08007524 <_init>:
 8007524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007526:	bf00      	nop
 8007528:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800752a:	bc08      	pop	{r3}
 800752c:	469e      	mov	lr, r3
 800752e:	4770      	bx	lr

08007530 <_fini>:
 8007530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007532:	bf00      	nop
 8007534:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007536:	bc08      	pop	{r3}
 8007538:	469e      	mov	lr, r3
 800753a:	4770      	bx	lr
